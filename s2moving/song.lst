 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 1 - 01/15/2025 07:33:10 PM


       1/       0 :                     	CPU 68000
       2/       0 :                     	padding off
       3/       0 :                     
       4/       0 :                     z80_ptr function x,(x)<<8&$FF00|(x)>>8&$00FF
       5/       0 :                     
       6/       0 : =$0                  FixMusicAndSFXDataBugs = 0
       7/       0 : =$2                  SonicDriverVer = 2
       8/       0 :                     	include "sound/_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                  SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                  psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 :                     	enumconf	$C
(1)   23/       0 : =$88..$B8            	enum		smpsPitch10lo=$88,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
(1)   24/       0 : =$C4..$F4            	nextenum	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
(1)   25/       0 : =$0..$30             	enum		smpsPitch00=$00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
(1)   26/       0 : =$3C..$6C            	nextenum	smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
(1)   27/       0 : =$78                 	nextenum	smpsPitch10hi
(1)   28/       0 :                     	enumconf	1
(1)   29/       0 :                     ; ---------------------------------------------------------------------------
(1)   30/       0 :                     ; Note Equates
(1)   31/       0 : =$80..$8F            	enum		nRst=$80,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   32/       0 : =$90..$9F            	nextenum	nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   33/       0 : =$A0..$AF            	nextenum	nG2,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   34/       0 : =$B0..$BF            	nextenum	nB3,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   35/       0 : =$C0..$CF            	nextenum	nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   36/       0 : =$D0..$DF            	nextenum	nG6,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   37/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   38/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   39/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   40/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   41/       0 : =>TRUE               	if SonicDriverVer<=2
(1)   42/       0 : =$C6                 nMaxPSG				EQU nA5
(1)   43/       0 : =$D2                 nMaxPSG1			EQU nA5+psgdelta
(1)   44/       0 : =$D2                 nMaxPSG2			EQU nA5+psgdelta
(1)   45/       0 : =>FALSE              	else
(1)   46/       0 :                     nMaxPSG				EQU nBb6-psgdelta
(1)   47/       0 :                     nMaxPSG1			EQU nBb6
(1)   48/       0 :                     nMaxPSG2			EQU nB6
(1)   49/       0 : [41]                 	endif
(1)   50/       0 :                     ; ---------------------------------------------------------------------------
(1)   51/       0 :                     ; PSG volume envelope equates
(1)   52/       0 : =$2                  	switch SonicDriverVer
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 2 - 01/15/2025 07:33:10 PM


(1)   53/       0 : =>FALSE              		case 1
(1)   54/       0 :                     			enum		fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   55/       0 :                     			nextenum	fTone_07,fTone_08,fTone_09
(1)   56/       0 : =>TRUE               		case 2
(1)   57/       0 : =$1..$6              			enum		fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   58/       0 : =$7..$C              			nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   59/       0 : =$D                  			nextenum	fTone_0D
(1)   60/       0 : =>FALSE              		elsecase;SonicDriverVer>=3
(1)   61/       0 :                     			enum		sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(1)   62/       0 :                     			nextenum	sTone_07,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   63/       0 :                     			nextenum	sTone_0D,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(1)   64/       0 :                     			nextenum	sTone_13,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(1)   65/       0 :                     			nextenum	sTone_19,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(1)   66/       0 :                     			nextenum	sTone_1F,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(1)   67/       0 :                     			nextenum	sTone_25,sTone_26,sTone_27
(1)   68/       0 :                     			; For conversions:
(1)   69/       0 :                     			if SonicDriverVer>=5
(1)   70/       0 :                     				nextenum	fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(1)   71/       0 :                     				nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(1)   72/       0 :                     				nextenum	fTone_0D
(1)   73/       0 : [69]                 			endif
(1)   74/       0 : [52]                 	endcase
(1)   75/       0 :                     ; ---------------------------------------------------------------------------
(1)   76/       0 :                     ; DAC Equates
(1)   77/       0 : =$2                  	switch SonicDriverVer
(1)   78/       0 : =>FALSE              		case 1
(1)   79/       0 :                     			enum		dKick=$81,dSnare,dTimpani
(1)   80/       0 :                     			enum		dHiTimpani=$88,dMidTimpani,dLowTimpani,dVLowTimpani
(1)   81/       0 : =>TRUE               		case 2
(1)   82/       0 : =$81..$89            			enum		dKick=$81,dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)   83/       0 : =$8A..$8F            			nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)   84/       0 : =$90..$91            			nextenum	dMidClap,dLowClap
(1)   85/       0 : =>FALSE              		case 3
(1)   86/       0 :                     			enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)   87/       0 :                     			nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)   88/       0 :                     			nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)   89/       0 :                     			nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)   90/       0 :                     			nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)   91/       0 :                     			nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)   92/       0 :                     			nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)   93/       0 :                     			nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)   94/       0 :                     			nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)   95/       0 :                     			nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)   96/       0 :                     			nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit_S3
(1)   97/       0 :                     			nextenum	dLowerEchoedClapHit_S3,dHipHopHitKick,dHipHopHitPowerKick
(1)   98/       0 :                     			nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)   99/       0 :                     			nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  100/       0 :                     			nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  101/       0 :                     			nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  102/       0 : =>FALSE              		case 4
(1)  103/       0 :                     			enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)  104/       0 :                     			nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)  105/       0 :                     			nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)  106/       0 :                     			nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)  107/       0 :                     			nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)  108/       0 :                     			nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)  109/       0 :                     			nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)  110/       0 :                     			nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)  111/       0 :                     			nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)  112/       0 :                     			nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 3 - 01/15/2025 07:33:10 PM


(1)  113/       0 :                     			nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)  114/       0 :                     			nextenum	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
(1)  115/       0 :                     			nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)  116/       0 :                     			nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  117/       0 :                     			nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  118/       0 :                     			nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  119/       0 : =>FALSE              		elsecase;SonicDriverVer>=5
(1)  120/       0 :                     			if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1)  121/       0 :                     				enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)  122/       0 :                     				nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)  123/       0 :                     				nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(1)  124/       0 :                     				nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(1)  125/       0 :                     				nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)  126/       0 :                     				nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)  127/       0 :                     				nextenum	dClick,dPowerKick,dQuickGlassCrash
(1)  128/       0 : [120]                			endif
(1)  129/       0 :                     			if (use_s3_samples<>0)||(use_sk_samples<>0)
(1)  130/       0 :                     				nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)  131/       0 :                     				nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)  132/       0 :                     				nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)  133/       0 :                     				nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)  134/       0 :                     				nextenum	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
(1)  135/       0 :                     				nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)  136/       0 :                     				nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)  137/       0 :                     				nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(1)  138/       0 :                     				nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(1)  139/       0 : [129]                			endif
(1)  140/       0 :                     			; For conversions:
(1)  141/       0 :                     			if (use_s2_samples<>0)
(1)  142/       0 :                     				if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1)  143/       0 :                     					nextenum	dKick
(1)  144/       0 :                     				else
(1)  145/       0 :                     					enum		dKick=$81
(1)  146/       0 : [142]                				endif
(1)  147/       0 :                     				nextenum	dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)  148/       0 :                     				nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)  149/       0 :                     				nextenum	dMidClap,dLowClap
(1)  150/       0 : [141]                			endif
(1)  151/       0 :                     			if (use_s3d_samples<>0)
(1)  152/       0 :                     				nextenum	dFinalFightMetalCrash,dIntroKick
(1)  153/       0 : [151]                			endif
(1)  154/       0 :                     			if (use_s3_samples<>0)
(1)  155/       0 :                     				nextenum	dEchoedClapHit_S3,dLowerEchoedClapHit_S3
(1)  156/       0 : [154]                			endif
(1)  157/       0 : [77]                 	endcase
(1)  158/       0 :                     ; ---------------------------------------------------------------------------
(1)  159/       0 :                     ; Channel IDs for SFX
(1)  160/       0 : =$80                 cPSG1				EQU $80
(1)  161/       0 : =$A0                 cPSG2				EQU $A0
(1)  162/       0 : =$C0                 cPSG3				EQU $C0
(1)  163/       0 : =$E0                 cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)  164/       0 : =$2                  cFM3				EQU $02
(1)  165/       0 : =$4                  cFM4				EQU $04
(1)  166/       0 : =$5                  cFM5				EQU $05
(1)  167/       0 : =$6                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)  168/       0 :                     ; ---------------------------------------------------------------------------
(1)  169/       0 :                     ; Conversion macros and functions
(1)  170/       0 :                     
(1)  171/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)  172/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 4 - 01/15/2025 07:33:10 PM


(1)  173/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)  174/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)  175/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)  176/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)  177/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)  178/       0 :                     
(1)  179/       0 :                     convertMainTempoMod macro mod
(1)  180/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)  181/       0 :                     		dc.b	mod
(1)  182/       0 :                     	elseif SourceDriver==1
(1)  183/       0 :                     		if mod==1
(1)  184/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)  185/       0 :                     		endif
(1)  186/       0 :                     		if SonicDriverVer==2
(1)  187/       0 :                     			dc.b	s1TempotoS2(mod)
(1)  188/       0 :                     		else;if SonicDriverVer>=3
(1)  189/       0 :                     			dc.b	s1TempotoS3(mod)
(1)  190/       0 :                     		endif
(1)  191/       0 :                     	elseif SourceDriver==2
(1)  192/       0 :                     		if mod==0
(1)  193/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)  194/       0 :                     		endif
(1)  195/       0 :                     		if SonicDriverVer==1
(1)  196/       0 :                     			dc.b	s2TempotoS1(mod)
(1)  197/       0 :                     		else;if SonicDriverVer>=3
(1)  198/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  199/       0 :                     		endif
(1)  200/       0 :                     	else;if SourceDriver>=3
(1)  201/       0 :                     		if mod==0
(1)  202/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  203/       0 :                     		endif
(1)  204/       0 :                     		if SonicDriverVer==1
(1)  205/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  206/       0 :                     		else;if SonicDriverVer==2
(1)  207/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  208/       0 :                     		endif
(1)  209/       0 :                     	endif
(1)  210/       0 :                     	endm
(1)  211/       0 :                     
(1)  212/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  213/       0 :                     PSGPitchConvert macro pitch
(1)  214/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  215/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  216/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  217/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  218/       0 :                     	else
(1)  219/       0 :                     		dc.b	pitch
(1)  220/       0 :                     	endif
(1)  221/       0 :                     	endm
(1)  222/       0 :                     
(1)  223/       0 :                     CheckedChannelPointer macro loc
(1)  224/       0 :                     	if SonicDriverVer<>1
(1)  225/       0 :                     		dc.w	z80_ptr(loc)
(1)  226/       0 :                     	else
(1)  227/       0 :                     		if (MOMPASS=1)&&(DEFINED(loc))
(1)  228/       0 :                     			fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  229/       0 :                     		endif
(1)  230/       0 :                     		dc.w	loc-songStart
(1)  231/       0 :                     	endif
(1)  232/       0 :                     	endm
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 5 - 01/15/2025 07:33:10 PM


(1)  233/       0 :                     ; ---------------------------------------------------------------------------
(1)  234/       0 :                     ; Header Macros
(1)  235/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  236/       0 :                     
(1)  237/       0 :                     SourceDriver set ver
(1)  238/       0 :                     
(1)  239/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  240/       0 :                     		set SourceSMPS2ASM,sourcesmps2asmver
(1)  241/       0 :                     	else
(1)  242/       0 :                     		set SourceSMPS2ASM,0
(1)  243/       0 :                     	endif
(1)  244/       0 :                     
(1)  245/       0 :                     songStart set *
(1)  246/       0 :                     
(1)  247/       0 :                     	if MOMPASS=1
(1)  248/       0 :                     		if SMPS2ASMVer < SourceSMPS2ASM
(1)  249/       0 :                     			message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  250/       0 :                     		endif
(1)  251/       0 :                     	endif
(1)  252/       0 :                     
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     smpsHeaderVoiceNull macro
(1)  256/       0 :                     	if songStart<>*
(1)  257/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  258/       0 :                     	endif
(1)  259/       0 :                     	dc.w	$0000
(1)  260/       0 :                     	endm
(1)  261/       0 :                     
(1)  262/       0 :                     ; Header - Set up Voice Location
(1)  263/       0 :                     ; Common to music and SFX
(1)  264/       0 :                     smpsHeaderVoice macro loc
(1)  265/       0 :                     	if songStart<>*
(1)  266/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  267/       0 :                     	endif
(1)  268/       0 :                     	if SonicDriverVer<>1
(1)  269/       0 :                     		dc.w	z80_ptr(loc)
(1)  270/       0 :                     	else
(1)  271/       0 :                     		if (MOMPASS=1)&&(DEFINED(loc))
(1)  272/       0 :                     			fatal "Voice banks for Sonic 1 songs must come after the start of the song"
(1)  273/       0 :                     		endif
(1)  274/       0 :                     		dc.w	loc-songStart
(1)  275/       0 :                     	endif
(1)  276/       0 :                     	endm
(1)  277/       0 :                     
(1)  278/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  279/       0 :                     ; Common to music and SFX
(1)  280/       0 :                     smpsHeaderVoiceUVB macro
(1)  281/       0 :                     	if songStart<>*
(1)  282/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  283/       0 :                     	endif
(1)  284/       0 :                     	if SonicDriverVer>=5
(1)  285/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  286/       0 :                     	elseif SonicDriverVer>=3
(1)  287/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  288/       0 :                     	else
(1)  289/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(1)  290/       0 :                     	endif
(1)  291/       0 :                     	endm
(1)  292/       0 :                     
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 6 - 01/15/2025 07:33:10 PM


(1)  293/       0 :                     ; Header macros for music (not for SFX)
(1)  294/       0 :                     ; Header - Set up Channel Usage
(1)  295/       0 :                     smpsHeaderChan macro fm,psg
(1)  296/       0 :                     	dc.b	fm,psg
(1)  297/       0 :                     	endm
(1)  298/       0 :                     
(1)  299/       0 :                     ; Header - Set up Tempo
(1)  300/       0 :                     smpsHeaderTempo macro div,mod
(1)  301/       0 :                     	dc.b	div
(1)  302/       0 :                     	convertMainTempoMod mod
(1)  303/       0 :                     	endm
(1)  304/       0 :                     
(1)  305/       0 :                     ; Header - Set up DAC Channel
(1)  306/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  307/       0 :                     	CheckedChannelPointer loc
(1)  308/       0 :                     	if ("pitch"<>"")
(1)  309/       0 :                     		dc.b	pitch
(1)  310/       0 :                     		if ("vol"<>"")
(1)  311/       0 :                     			dc.b	vol
(1)  312/       0 :                     		else
(1)  313/       0 :                     			dc.b	$00
(1)  314/       0 :                     		endif
(1)  315/       0 :                     	else
(1)  316/       0 :                     		dc.w	$00
(1)  317/       0 :                     	endif
(1)  318/       0 :                     	endm
(1)  319/       0 :                     
(1)  320/       0 :                     ; Header - Set up FM Channel
(1)  321/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  322/       0 :                     	CheckedChannelPointer loc
(1)  323/       0 :                     	dc.b	pitch,vol
(1)  324/       0 :                     	endm
(1)  325/       0 :                     
(1)  326/       0 :                     ; Header - Set up PSG Channel
(1)  327/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  328/       0 :                     	CheckedChannelPointer loc
(1)  329/       0 :                     	PSGPitchConvert pitch
(1)  330/       0 :                     	dc.b	vol
(1)  331/       0 :                     	; Frequency envelope
(1)  332/       0 :                     	if (SonicDriverVer>=3) && (SourceDriver<3)
(1)  333/       0 :                     		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)  334/       0 :                     		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)  335/       0 :                     		; other drivers may try to process as valid data, so manually force it to 0 here.
(1)  336/       0 :                     		dc.b	0
(1)  337/       0 :                     	else
(1)  338/       0 :                     		if (MOMPASS==1) && (SonicDriverVer<3) && (SourceDriver>=3) && (mod<>0)
(1)  339/       0 :                     			message "This track header specifies a frequency envelope, but this driver does not support them."			
(1)  340/       0 :                     		endif
(1)  341/       0 :                     		dc.b	mod
(1)  342/       0 :                     	endif
(1)  343/       0 :                     	; Volume envelope
(1)  344/       0 :                     	dc.b	voice
(1)  345/       0 :                     	endm
(1)  346/       0 :                     
(1)  347/       0 :                     ; Header macros for SFX (not for music)
(1)  348/       0 :                     ; Header - Set up Tempo
(1)  349/       0 :                     smpsHeaderTempoSFX macro div
(1)  350/       0 :                     	dc.b	div
(1)  351/       0 :                     	endm
(1)  352/       0 :                     
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 7 - 01/15/2025 07:33:10 PM


(1)  353/       0 :                     ; Header - Set up Channel Usage
(1)  354/       0 :                     smpsHeaderChanSFX macro chan
(1)  355/       0 :                     	dc.b	chan
(1)  356/       0 :                     	endm
(1)  357/       0 :                     
(1)  358/       0 :                     ; Header - Set up FM Channel
(1)  359/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  360/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  361/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  362/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  363/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  364/       0 :                     	endif
(1)  365/       0 :                     	dc.b	$80,chanid
(1)  366/       0 :                     	CheckedChannelPointer loc
(1)  367/       0 :                     	if (chanid&$80)<>0
(1)  368/       0 :                     		PSGPitchConvert pitch
(1)  369/       0 :                     	else
(1)  370/       0 :                     		dc.b	pitch
(1)  371/       0 :                     	endif
(1)  372/       0 :                     	dc.b	vol
(1)  373/       0 :                     	endm
(1)  374/       0 :                     ; ---------------------------------------------------------------------------
(1)  375/       0 :                     ; Co-ord Flag Macros and Equates
(1)  376/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  377/       0 :                     smpsPan macro direction,amsfms
(1)  378/       0 :                     panNone set $00
(1)  379/       0 :                     panRight set $40
(1)  380/       0 :                     panLeft set $80
(1)  381/       0 :                     panCentre set $C0
(1)  382/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  383/       0 :                     	dc.b $E0,direction+amsfms
(1)  384/       0 :                     	endm
(1)  385/       0 :                     
(1)  386/       0 :                     ; E1xx - Set channel detune to val
(1)  387/       0 :                     smpsDetune macro val
(1)  388/       0 :                     	dc.b	$E1,val
(1)  389/       0 :                     	endm
(1)  390/       0 :                     
(1)  391/       0 :                     ; E2xx - Useless
(1)  392/       0 :                     smpsNop macro val
(1)  393/       0 :                     	if SonicDriverVer<3
(1)  394/       0 :                     		dc.b	$E2,val
(1)  395/       0 :                     	endif
(1)  396/       0 :                     	endm
(1)  397/       0 :                     
(1)  398/       0 :                     ; Return (used after smpsCall)
(1)  399/       0 :                     smpsReturn macro val
(1)  400/       0 :                     	if SonicDriverVer>=3
(1)  401/       0 :                     		dc.b	$F9
(1)  402/       0 :                     	else
(1)  403/       0 :                     		dc.b	$E3
(1)  404/       0 :                     	endif
(1)  405/       0 :                     	endm
(1)  406/       0 :                     
(1)  407/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  408/       0 :                     smpsFade macro val
(1)  409/       0 :                     	if SonicDriverVer>=3
(1)  410/       0 :                     		dc.b	$E2
(1)  411/       0 :                     		if ("val"<>"")
(1)  412/       0 :                     			dc.b	val
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 8 - 01/15/2025 07:33:10 PM


(1)  413/       0 :                     		else
(1)  414/       0 :                     			dc.b	$FF
(1)  415/       0 :                     		endif
(1)  416/       0 :                     		if SourceDriver<3
(1)  417/       0 :                     			smpsStop
(1)  418/       0 :                     		endif
(1)  419/       0 :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(1)  420/       0 :                     		; This is one of those weird S3+ "fades" that we don't need
(1)  421/       0 :                     	else
(1)  422/       0 :                     		dc.b	$E4
(1)  423/       0 :                     	endif
(1)  424/       0 :                     	endm
(1)  425/       0 :                     
(1)  426/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  427/       0 :                     smpsChanTempoDiv macro val
(1)  428/       0 :                     	if SonicDriverVer>=5
(1)  429/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  430/       0 :                     		dc.b	$FF,$08,val
(1)  431/       0 :                     	elseif SonicDriverVer==3
(1)  432/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  433/       0 :                     	else
(1)  434/       0 :                     		dc.b	$E5,val
(1)  435/       0 :                     	endif
(1)  436/       0 :                     	endm
(1)  437/       0 :                     
(1)  438/       0 :                     ; E6xx - Alter Volume by xx
(1)  439/       0 :                     smpsAlterVol macro val
(1)  440/       0 :                     	dc.b	$E6,val
(1)  441/       0 :                     	endm
(1)  442/       0 :                     
(1)  443/       0 :                     ; E7 - Prevent attack of next note
(1)  444/       0 : =$E7                 smpsNoAttack	EQU $E7
(1)  445/       0 :                     
(1)  446/       0 :                     ; E8xx - Set note fill to xx
(1)  447/       0 :                     smpsNoteFill macro val
(1)  448/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  449/       0 :                     		; Unique to Flamewing's modified driver
(1)  450/       0 :                     		dc.b	$FF,$0A,val
(1)  451/       0 :                     	else
(1)  452/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  453/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  454/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  455/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  456/       0 :                     		endif
(1)  457/       0 :                     		dc.b	$E8,val
(1)  458/       0 :                     	endif
(1)  459/       0 :                     	endm
(1)  460/       0 :                     
(1)  461/       0 :                     ; Add xx to channel pitch
(1)  462/       0 :                     smpsChangeTransposition macro val
(1)  463/       0 :                     	if SonicDriverVer>=3
(1)  464/       0 :                     		dc.b	$FB,val
(1)  465/       0 :                     	else
(1)  466/       0 :                     		dc.b	$E9,val
(1)  467/       0 :                     	endif
(1)  468/       0 :                     	endm
(1)  469/       0 :                     
(1)  470/       0 :                     ; Set music tempo modifier to xx
(1)  471/       0 :                     smpsSetTempoMod macro mod
(1)  472/       0 :                     	if SonicDriverVer>=3
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 9 - 01/15/2025 07:33:10 PM


(1)  473/       0 :                     		dc.b	$FF,$00
(1)  474/       0 :                     	else
(1)  475/       0 :                     		dc.b	$EA
(1)  476/       0 :                     	endif
(1)  477/       0 :                     	convertMainTempoMod mod
(1)  478/       0 :                     	endm
(1)  479/       0 :                     
(1)  480/       0 :                     ; Set music tempo divider to xx
(1)  481/       0 :                     smpsSetTempoDiv macro val
(1)  482/       0 :                     	if SonicDriverVer>=3
(1)  483/       0 :                     		dc.b	$FF,$04,val
(1)  484/       0 :                     	else
(1)  485/       0 :                     		dc.b	$EB,val
(1)  486/       0 :                     	endif
(1)  487/       0 :                     	endm
(1)  488/       0 :                     
(1)  489/       0 :                     ; ECxx - Set Volume to xx
(1)  490/       0 :                     smpsSetVol macro val
(1)  491/       0 :                     	if SonicDriverVer>=3
(1)  492/       0 :                     		dc.b	$E4,val
(1)  493/       0 :                     	else
(1)  494/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  495/       0 :                     	endif
(1)  496/       0 :                     	endm
(1)  497/       0 :                     
(1)  498/       0 :                     ; Works on all drivers
(1)  499/       0 :                     smpsPSGAlterVol macro vol
(1)  500/       0 :                     	dc.b	$EC,vol
(1)  501/       0 :                     	endm
(1)  502/       0 :                     
(1)  503/       0 :                     smpsPSGAlterVolS2 macro vol
(1)  504/       0 :                     	; Sonic 2's driver allows the FM command to be used on PSG channels, but others do not.
(1)  505/       0 :                     	if SonicDriverVer==2
(1)  506/       0 :                     		smpsAlterVol vol
(1)  507/       0 :                     	else
(1)  508/       0 :                     		smpsPSGAlterVol vol
(1)  509/       0 :                     	endif
(1)  510/       0 :                     	endm
(1)  511/       0 :                     
(1)  512/       0 :                     ; Clears pushing sound flag in S1
(1)  513/       0 :                     smpsClearPush macro
(1)  514/       0 :                     	if SonicDriverVer==1
(1)  515/       0 :                     		dc.b	$ED
(1)  516/       0 :                     	else
(1)  517/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  518/       0 :                     	endif
(1)  519/       0 :                     	endm
(1)  520/       0 :                     
(1)  521/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  522/       0 :                     smpsStopSpecial macro
(1)  523/       0 :                     	if SonicDriverVer==1
(1)  524/       0 :                     		dc.b	$EE
(1)  525/       0 :                     	else
(1)  526/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  527/       0 :                     		smpsStop
(1)  528/       0 :                     	endif
(1)  529/       0 :                     	endm
(1)  530/       0 :                     
(1)  531/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  532/       0 :                     smpsFMvoice macro voice,songID
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 10 - 01/15/2025 07:33:10 PM


(1)  533/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  534/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  535/       0 :                     	else
(1)  536/       0 :                     		dc.b	$EF,voice
(1)  537/       0 :                     	endif
(1)  538/       0 :                     	endm
(1)  539/       0 :                     
(1)  540/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  541/       0 :                     smpsModSet macro wait,speed,change,step
(1)  542/       0 :                     	dc.b	$F0
(1)  543/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  544/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  545/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  546/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  547/       0 :                     	else
(1)  548/       0 :                     		dc.b	wait,speed,change,step
(1)  549/       0 :                     	endif
(1)  550/       0 :                     	;dc.b	speed,change,step
(1)  551/       0 :                     	endm
(1)  552/       0 :                     
(1)  553/       0 :                     ; Turn on Modulation
(1)  554/       0 :                     smpsModOn macro type
(1)  555/       0 :                     	if SonicDriverVer>=3
(1)  556/       0 :                     		if "type"<>""
(1)  557/       0 :                     			dc.b	$F4,type
(1)  558/       0 :                     		else
(1)  559/       0 :                     			dc.b	$F4,$80
(1)  560/       0 :                     		endif
(1)  561/       0 :                     	else
(1)  562/       0 :                     		dc.b	$F1
(1)  563/       0 :                     	endif
(1)  564/       0 :                     	endm
(1)  565/       0 :                     
(1)  566/       0 :                     ; F2 - End of channel
(1)  567/       0 :                     smpsStop macro
(1)  568/       0 :                     	dc.b	$F2
(1)  569/       0 :                     	endm
(1)  570/       0 :                     
(1)  571/       0 :                     ; F3xx - PSG waveform to xx
(1)  572/       0 :                     smpsPSGform macro form
(1)  573/       0 :                     	dc.b	$F3,form
(1)  574/       0 :                     	endm
(1)  575/       0 :                     
(1)  576/       0 :                     ; Turn off Modulation
(1)  577/       0 :                     smpsModOff macro
(1)  578/       0 :                     	if SonicDriverVer>=3
(1)  579/       0 :                     		dc.b	$FA
(1)  580/       0 :                     	else
(1)  581/       0 :                     		dc.b	$F4
(1)  582/       0 :                     	endif
(1)  583/       0 :                     	endm
(1)  584/       0 :                     
(1)  585/       0 :                     ; F5xx - PSG voice to xx
(1)  586/       0 :                     smpsPSGvoice macro voice
(1)  587/       0 :                     	dc.b	$F5,voice
(1)  588/       0 :                     	endm
(1)  589/       0 :                     
(1)  590/       0 :                     ; F6xxxx - Jump to xxxx
(1)  591/       0 :                     smpsJump macro loc
(1)  592/       0 :                     	dc.b	$F6
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 11 - 01/15/2025 07:33:10 PM


(1)  593/       0 :                     	if SonicDriverVer<>1
(1)  594/       0 :                     		dc.w	z80_ptr(loc)
(1)  595/       0 :                     	else
(1)  596/       0 :                     		dc.w	loc-*-1
(1)  597/       0 :                     	endif
(1)  598/       0 :                     	endm
(1)  599/       0 :                     
(1)  600/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  601/       0 :                     smpsLoop macro index,loops,loc
(1)  602/       0 :                     	dc.b	$F7
(1)  603/       0 :                     	dc.b	index,loops
(1)  604/       0 :                     	if SonicDriverVer<>1
(1)  605/       0 :                     		dc.w	z80_ptr(loc)
(1)  606/       0 :                     	else
(1)  607/       0 :                     		dc.w	loc-*-1
(1)  608/       0 :                     	endif
(1)  609/       0 :                     	endm
(1)  610/       0 :                     
(1)  611/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  612/       0 :                     smpsCall macro loc
(1)  613/       0 :                     	dc.b	$F8
(1)  614/       0 :                     	if SonicDriverVer<>1
(1)  615/       0 :                     		dc.w	z80_ptr(loc)
(1)  616/       0 :                     	else
(1)  617/       0 :                     		dc.w	loc-*-1
(1)  618/       0 :                     	endif
(1)  619/       0 :                     	endm
(1)  620/       0 :                     ; ---------------------------------------------------------------------------
(1)  621/       0 :                     ; Alter Volume
(1)  622/       0 :                     smpsFMAlterVol macro val1,val2
(1)  623/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  624/       0 :                     		dc.b	$E5,val1,val2
(1)  625/       0 :                     	else
(1)  626/       0 :                     		dc.b	$E6,val1
(1)  627/       0 :                     	endif
(1)  628/       0 :                     	endm
(1)  629/       0 :                     
(1)  630/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  631/       0 : =>FALSE              	if SonicDriverVer>=3
(1)  632/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  633/       0 :                     smpsStopFM macro
(1)  634/       0 :                     	dc.b	$E3
(1)  635/       0 :                     	endm
(1)  636/       0 :                     
(1)  637/       0 :                     ; Spindash Rev
(1)  638/       0 :                     smpsSpindashRev macro
(1)  639/       0 :                     	dc.b	$E9
(1)  640/       0 :                     	endm
(1)  641/       0 :                     
(1)  642/       0 :                     smpsPlayDACSample macro sample
(1)  643/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  644/       0 :                     	endm
(1)  645/       0 :                     
(1)  646/       0 :                     smpsConditionalJump macro index,loc
(1)  647/       0 :                     	dc.b	$EB
(1)  648/       0 :                     	dc.b	index
(1)  649/       0 :                     	dc.w	z80_ptr(loc)
(1)  650/       0 :                     	endm
(1)  651/       0 :                     
(1)  652/       0 :                     ; Set note values to xx-$40
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 12 - 01/15/2025 07:33:10 PM


(1)  653/       0 :                     smpsSetNote macro val
(1)  654/       0 :                     	dc.b	$ED,val
(1)  655/       0 :                     	endm
(1)  656/       0 :                     
(1)  657/       0 :                     smpsFMICommand macro reg,val
(1)  658/       0 :                     	dc.b	$EE,reg,val
(1)  659/       0 :                     	endm
(1)  660/       0 :                     
(1)  661/       0 :                     ; Set Modulation
(1)  662/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  663/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  664/       0 :                     	endm
(1)  665/       0 :                     
(1)  666/       0 :                     ; Set Modulation
(1)  667/       0 :                     smpsModChange macro val
(1)  668/       0 :                     	dc.b	$F4,val
(1)  669/       0 :                     	endm
(1)  670/       0 :                     
(1)  671/       0 :                     ; FCxxxx - Jump to xxxx
(1)  672/       0 :                     smpsContinuousLoop macro loc
(1)  673/       0 :                     	dc.b	$FC
(1)  674/       0 :                     	dc.w	z80_ptr(loc)
(1)  675/       0 :                     	endm
(1)  676/       0 :                     
(1)  677/       0 :                     smpsAlternateSMPS macro flag
(1)  678/       0 :                     	dc.b	$FD,flag
(1)  679/       0 :                     	endm
(1)  680/       0 :                     
(1)  681/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  682/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  683/       0 :                     	endm
(1)  684/       0 :                     
(1)  685/       0 :                     smpsPlaySound macro index
(1)  686/       0 :                     	if SonicDriverVer>=5
(1)  687/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(1)  688/       0 :                     	endif
(1)  689/       0 :                     	dc.b	$FF,$01,index
(1)  690/       0 :                     	endm
(1)  691/       0 :                     
(1)  692/       0 :                     smpsHaltMusic macro flag
(1)  693/       0 :                     	dc.b	$FF,$02,flag
(1)  694/       0 :                     	endm
(1)  695/       0 :                     
(1)  696/       0 :                     smpsCopyData macro data,len
(1)  697/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  698/       0 :                     	dc.b	$FF,$03
(1)  699/       0 :                     	dc.w	little_endian(data)
(1)  700/       0 :                     	dc.b	len
(1)  701/       0 :                     	endm
(1)  702/       0 :                     
(1)  703/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  704/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  705/       0 :                     	endm
(1)  706/       0 :                     
(1)  707/       0 :                     smpsFMVolEnv macro tone,mask
(1)  708/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  709/       0 :                     	endm
(1)  710/       0 :                     
(1)  711/       0 :                     smpsResetSpindashRev macro val
(1)  712/       0 :                     	dc.b	$FF,$07
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 13 - 01/15/2025 07:33:10 PM


(1)  713/       0 :                     	endm
(1)  714/       0 :                     
(1)  715/       0 :                     	; Flags ported from other drivers.
(1)  716/       0 :                     	if SonicDriverVer>=5
(1)  717/       0 :                     smpsChanFMCommand macro reg,val
(1)  718/       0 :                     	dc.b	$FF,$09,reg,val
(1)  719/       0 :                     	endm
(1)  720/       0 :                     
(1)  721/       0 :                     smpsPitchSlide macro enable
(1)  722/       0 :                     	dc.b	$FF,$0B,enable
(1)  723/       0 :                     	endm
(1)  724/       0 :                     
(1)  725/       0 :                     smpsSetLFO macro enable,amsfms
(1)  726/       0 :                     	dc.b	$FF,$0C,enable,amsfms
(1)  727/       0 :                     	endm
(1)  728/       0 :                     
(1)  729/       0 :                     smpsPlayMusic macro index
(1)  730/       0 :                     	dc.b	$FF,$0D,index
(1)  731/       0 :                     	endm
(1)  732/       0 : [716]                	endif
(1)  733/       0 :                     
(1)  734/       0 : [631]                	endif
(1)  735/       0 :                     ; ---------------------------------------------------------------------------
(1)  736/       0 :                     ; S1/S2 only coordination flag
(1)  737/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  738/       0 :                     smpsMaxRelRate macro
(1)  739/       0 :                     	if SonicDriverVer>=3
(1)  740/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  741/       0 :                     		smpsFMICommand $88,$0F
(1)  742/       0 :                     		smpsFMICommand $8C,$0F
(1)  743/       0 :                     	else
(1)  744/       0 :                     		dc.b	$F9
(1)  745/       0 :                     	endif
(1)  746/       0 :                     	endm
(1)  747/       0 :                     ; ---------------------------------------------------------------------------
(1)  748/       0 :                     ; Backwards compatibility
(1)  749/       0 :                     smpsAlterNote macro
(1)  750/       0 :                     	smpsDetune	ALLARGS
(1)  751/       0 :                     	endm
(1)  752/       0 :                     
(1)  753/       0 :                     smpsAlterPitch macro
(1)  754/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  755/       0 :                     	endm
(1)  756/       0 :                     
(1)  757/       0 :                     smpsFMFlutter macro
(1)  758/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  759/       0 :                     	endm
(1)  760/       0 :                     
(1)  761/       0 :                     smpsWeirdD1LRR macro
(1)  762/       0 :                     	smpsMaxRelRate ALLARGS
(1)  763/       0 :                     	endm
(1)  764/       0 :                     
(1)  765/       0 :                     smpsSetvoice macro
(1)  766/       0 :                     	smpsFMvoice ALLARGS
(1)  767/       0 :                     	endm
(1)  768/       0 :                     ; ---------------------------------------------------------------------------
(1)  769/       0 :                     ; Macros for FM instruments
(1)  770/       0 :                     ; Voices - Feedback
(1)  771/       0 :                     smpsVcFeedback macro val
(1)  772/       0 :                     vcFeedback set val
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 14 - 01/15/2025 07:33:10 PM


(1)  773/       0 :                     	endm
(1)  774/       0 :                     
(1)  775/       0 :                     ; Voices - Algorithm
(1)  776/       0 :                     smpsVcAlgorithm macro val
(1)  777/       0 :                     vcAlgorithm set val
(1)  778/       0 :                     	endm
(1)  779/       0 :                     
(1)  780/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  781/       0 :                     vcUnusedBits set val
(1)  782/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(1)  783/       0 :                     		set vcD1R1Unk,d1r1<<5
(1)  784/       0 :                     		set vcD1R2Unk,d1r2<<5
(1)  785/       0 :                     		set vcD1R3Unk,d1r3<<5
(1)  786/       0 :                     		set vcD1R4Unk,d1r4<<5
(1)  787/       0 :                     	else
(1)  788/       0 :                     		set vcD1R1Unk,0
(1)  789/       0 :                     		set vcD1R2Unk,0
(1)  790/       0 :                     		set vcD1R3Unk,0
(1)  791/       0 :                     		set vcD1R4Unk,0
(1)  792/       0 :                     	endif
(1)  793/       0 :                     	endm
(1)  794/       0 :                     
(1)  795/       0 :                     ; Voices - Detune
(1)  796/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  797/       0 :                     	set vcDT1,op1
(1)  798/       0 :                     	set vcDT2,op2
(1)  799/       0 :                     	set vcDT3,op3
(1)  800/       0 :                     	set vcDT4,op4
(1)  801/       0 :                     	endm
(1)  802/       0 :                     
(1)  803/       0 :                     ; Voices - Coarse-Frequency
(1)  804/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  805/       0 :                     	set vcCF1,op1
(1)  806/       0 :                     	set vcCF2,op2
(1)  807/       0 :                     	set vcCF3,op3
(1)  808/       0 :                     	set vcCF4,op4
(1)  809/       0 :                     	endm
(1)  810/       0 :                     
(1)  811/       0 :                     ; Voices - Rate Scale
(1)  812/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  813/       0 :                     	set vcRS1,op1
(1)  814/       0 :                     	set vcRS2,op2
(1)  815/       0 :                     	set vcRS3,op3
(1)  816/       0 :                     	set vcRS4,op4
(1)  817/       0 :                     	endm
(1)  818/       0 :                     
(1)  819/       0 :                     ; Voices - Attack Rate
(1)  820/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  821/       0 :                     	set vcAR1,op1
(1)  822/       0 :                     	set vcAR2,op2
(1)  823/       0 :                     	set vcAR3,op3
(1)  824/       0 :                     	set vcAR4,op4
(1)  825/       0 :                     	endm
(1)  826/       0 :                     
(1)  827/       0 :                     ; Voices - Amplitude Modulation
(1)  828/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  829/       0 :                     ; were the Amplitude Modulation.
(1)  830/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  831/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  832/       0 :                     	if SourceSMPS2ASM==0
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 15 - 01/15/2025 07:33:10 PM


(1)  833/       0 :                     		set vcAM1,op1<<5
(1)  834/       0 :                     		set vcAM2,op2<<5
(1)  835/       0 :                     		set vcAM3,op3<<5
(1)  836/       0 :                     		set vcAM4,op4<<5
(1)  837/       0 :                     	else
(1)  838/       0 :                     		set vcAM1,op1<<7
(1)  839/       0 :                     		set vcAM2,op2<<7
(1)  840/       0 :                     		set vcAM3,op3<<7
(1)  841/       0 :                     		set vcAM4,op4<<7
(1)  842/       0 :                     	endif
(1)  843/       0 :                     	endm
(1)  844/       0 :                     
(1)  845/       0 :                     ; Voices - First Decay Rate
(1)  846/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  847/       0 :                     	set vcD1R1,op1
(1)  848/       0 :                     	set vcD1R2,op2
(1)  849/       0 :                     	set vcD1R3,op3
(1)  850/       0 :                     	set vcD1R4,op4
(1)  851/       0 :                     	endm
(1)  852/       0 :                     
(1)  853/       0 :                     ; Voices - Second Decay Rate
(1)  854/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  855/       0 :                     	set vcD2R1,op1
(1)  856/       0 :                     	set vcD2R2,op2
(1)  857/       0 :                     	set vcD2R3,op3
(1)  858/       0 :                     	set vcD2R4,op4
(1)  859/       0 :                     	endm
(1)  860/       0 :                     
(1)  861/       0 :                     ; Voices - Decay Level
(1)  862/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  863/       0 :                     	set vcDL1,op1
(1)  864/       0 :                     	set vcDL2,op2
(1)  865/       0 :                     	set vcDL3,op3
(1)  866/       0 :                     	set vcDL4,op4
(1)  867/       0 :                     	endm
(1)  868/       0 :                     
(1)  869/       0 :                     ; Voices - Release Rate
(1)  870/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  871/       0 :                     	set vcRR1,op1
(1)  872/       0 :                     	set vcRR2,op2
(1)  873/       0 :                     	set vcRR3,op3
(1)  874/       0 :                     	set vcRR4,op4
(1)  875/       0 :                     	endm
(1)  876/       0 :                     
(1)  877/       0 :                     ; Voices - Total Level
(1)  878/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  879/       0 :                     ; but later versions leave it up to the user.
(1)  880/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  881/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  882/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  883/       0 :                     ; SMPS Z80 does the opposite.
(1)  884/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  885/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  886/       0 :                     ; what we do, so we just print a warning.
(1)  887/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  888/       0 :                     	set vcTL1,op1
(1)  889/       0 :                     	set vcTL2,op2
(1)  890/       0 :                     	set vcTL3,op3
(1)  891/       0 :                     	set vcTL4,op4
(1)  892/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
 AS V1.42 Beta [Bld 212] - Source File song.asm(_smps2asm_inc.asm) - Page 16 - 01/15/2025 07:33:10 PM


(1)  893/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  894/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  895/       0 :                     	if SourceSMPS2ASM==0
(1)  896/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  897/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  898/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  899/       0 :                     		set vcTLMask1,$80
(1)  900/       0 :                     	else
(1)  901/       0 :                     		set vcTLMask4,0
(1)  902/       0 :                     		set vcTLMask3,0
(1)  903/       0 :                     		set vcTLMask2,0
(1)  904/       0 :                     		set vcTLMask1,0
(1)  905/       0 :                     	endif
(1)  906/       0 :                     
(1)  907/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  908/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  909/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  910/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  911/       0 :                     		set vcTLMask1,$80
(1)  912/       0 :                     		set vcTL1,vcTL1&$7F
(1)  913/       0 :                     		set vcTL2,vcTL2&$7F
(1)  914/       0 :                     		set vcTL3,vcTL3&$7F
(1)  915/       0 :                     		set vcTL4,vcTL4&$7F
(1)  916/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  917/       0 :                     		if MOMPASS=1
(1)  918/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  919/       0 :                     		endif
(1)  920/       0 :                     	endif
(1)  921/       0 :                     
(1)  922/       0 :                     	if SonicDriverVer==2
(1)  923/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  924/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  925/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  926/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  927/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  928/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  929/       0 :                     	else
(1)  930/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  931/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  932/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  933/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  934/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  935/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  936/       0 :                     	endif
(1)  937/       0 :                     	endm
(1)  938/       0 :                     
(1)  939/       0 :                     
       9/       0 :                     
      10/    1380 :                     	phase $1380
      11/    1380 :                     	include "sound/music/A4 - S1GHZEDIT.asm"
(1)    1/    1380 :                     Mus81_GHZ_Header:
(1)    2/    1380 : (MACRO)              	smpsHeaderStartSong 1
(1)    2/    1380 :                     
(1)    2/    1380 : =$1                  SourceDriver set 1
(1)    2/    1380 :                     
(1)    2/    1380 : =>FALSE                      if (""<>"")
(1)    2/    1380 :                                     set SourceSMPS2ASM,
(1)    2/    1380 : =>TRUE                       else
(1)    2/    1380 : =$0                                  set SourceSMPS2ASM,0
(1)    2/    1380 : [2]                          endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 17 - 01/15/2025 07:33:10 PM


(1)    2/    1380 :                     
(1)    2/    1380 : =$1380               songStart set *
(1)    2/    1380 :                     
(1)    2/    1380 : =>FALSE                      if MOMPASS=1
(1)    2/    1380 :                                     if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/    1380 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/    1380 : [2]                                  endif
(1)    2/    1380 : [2]                          endif
(1)    2/    1380 :                     
(1)    3/    1380 : (MACRO)              	smpsHeaderVoice     Mus81_GHZ_Voices
(1)    3/    1380 : =>FALSE                      if songStart<>*
(1)    3/    1380 :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/    1380 : [3]                          endif
(1)    3/    1380 : =>TRUE                       if SonicDriverVer<>1
(1)    3/    1380 : 071A                                dc.w    z80_ptr(Mus81_GHZ_Voices)
(1)    3/    1382 : =>FALSE                      else
(1)    3/    1382 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_Voices))
(1)    3/    1382 :                                             fatal "Voice banks for Sonic 1 songs must come after the start of the song"
(1)    3/    1382 : [3]                                  endif
(1)    3/    1382 :                                     dc.w    Mus81_GHZ_Voices-songStart
(1)    3/    1382 : [3]                          endif
(1)    4/    1382 : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/    1382 : 0603                        dc.b    $06,$03
(1)    5/    1384 : (MACRO)              	smpsHeaderTempo     $01, $03
(1)    5/    1384 : 01                          dc.b    $01
(1)    5/    1385 :  (MACRO-2)                   convertMainTempoMod $03
(1)    5/    1385 : =>FALSE                      if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/    1385 :                                     dc.b    $03
(1)    5/    1385 : =>TRUE                       elseif SourceDriver==1
(1)    5/    1385 : =>FALSE                              if $03==1
(1)    5/    1385 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/    1385 : [5]                                  endif
(1)    5/    1385 : =>TRUE                               if SonicDriverVer==2
(1)    5/    1385 : AB                                          dc.b    s1TempotoS2($03)
(1)    5/    1386 : =>FALSE                              else;if SonicDriverVer>=3
(1)    5/    1386 :                                             dc.b    s1TempotoS3($03)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : =>FALSE                      elseif SourceDriver==2
(1)    5/    1386 :                                     if $03==0
(1)    5/    1386 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 :                                     if SonicDriverVer==1
(1)    5/    1386 :                                             dc.b    s2TempotoS1($03)
(1)    5/    1386 :                                     else;if SonicDriverVer>=3
(1)    5/    1386 :                                             dc.b    s2TempotoS3($03)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : =>FALSE                      else;if SourceDriver>=3
(1)    5/    1386 :                                     if $03==0
(1)    5/    1386 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 :                                     if SonicDriverVer==1
(1)    5/    1386 :                                             dc.b    s3TempotoS1($03)
(1)    5/    1386 :                                     else;if SonicDriverVer==2
(1)    5/    1386 :                                             dc.b    s3TempotoS2($03)
(1)    5/    1386 : [5]                                  endif
(1)    5/    1386 : [5]                          endif
(1)    6/    1386 :                     
(1)    7/    1386 : (MACRO)              	smpsHeaderDAC       Mus81_GHZ_DAC
(1)    7/    1386 :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_DAC
(1)    7/    1386 : =>TRUE                       if SonicDriverVer<>1
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 18 - 01/15/2025 07:33:10 PM


(1)    7/    1386 : C619                                dc.w    z80_ptr(Mus81_GHZ_DAC)
(1)    7/    1388 : =>FALSE                      else
(1)    7/    1388 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_DAC))
(1)    7/    1388 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/    1388 : [7]                                  endif
(1)    7/    1388 :                                     dc.w    Mus81_GHZ_DAC-songStart
(1)    7/    1388 : [7]                          endif
(1)    7/    1388 : =>FALSE                      if (""<>"")
(1)    7/    1388 :                                     dc.b    
(1)    7/    1388 :                                     if (""<>"")
(1)    7/    1388 :                                             dc.b    
(1)    7/    1388 :                                     else
(1)    7/    1388 :                                             dc.b    $00
(1)    7/    1388 : [7]                                  endif
(1)    7/    1388 : =>TRUE                       else
(1)    7/    1388 : 0000                                dc.w    $00
(1)    7/    138A : [7]                          endif
(1)    8/    138A : (MACRO)              	smpsHeaderFM        Mus81_GHZ_FM1,	$F8, $12
(1)    8/    138A :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_FM1
(1)    8/    138A : =>TRUE                       if SonicDriverVer<>1
(1)    8/    138A : B013                                dc.w    z80_ptr(Mus81_GHZ_FM1)
(1)    8/    138C : =>FALSE                      else
(1)    8/    138C :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_FM1))
(1)    8/    138C :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/    138C : [8]                                  endif
(1)    8/    138C :                                     dc.w    Mus81_GHZ_FM1-songStart
(1)    8/    138C : [8]                          endif
(1)    8/    138C : F812                        dc.b    $F8,$12
(1)    9/    138E : (MACRO)              	smpsHeaderFM        Mus81_GHZ_FM2,	$00, $0B
(1)    9/    138E :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_FM2
(1)    9/    138E : =>TRUE                       if SonicDriverVer<>1
(1)    9/    138E : 7C14                                dc.w    z80_ptr(Mus81_GHZ_FM2)
(1)    9/    1390 : =>FALSE                      else
(1)    9/    1390 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_FM2))
(1)    9/    1390 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/    1390 : [9]                                  endif
(1)    9/    1390 :                                     dc.w    Mus81_GHZ_FM2-songStart
(1)    9/    1390 : [9]                          endif
(1)    9/    1390 : 000B                        dc.b    $00,$0B
(1)   10/    1392 : (MACRO)              	smpsHeaderFM        Mus81_GHZ_FM3,	$F8, $14
(1)   10/    1392 :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_FM3
(1)   10/    1392 : =>TRUE                       if SonicDriverVer<>1
(1)   10/    1392 : 6115                                dc.w    z80_ptr(Mus81_GHZ_FM3)
(1)   10/    1394 : =>FALSE                      else
(1)   10/    1394 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_FM3))
(1)   10/    1394 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/    1394 : [10]                                 endif
(1)   10/    1394 :                                     dc.w    Mus81_GHZ_FM3-songStart
(1)   10/    1394 : [10]                         endif
(1)   10/    1394 : F814                        dc.b    $F8,$14
(1)   11/    1396 : (MACRO)              	smpsHeaderFM        Mus81_GHZ_FM4,	$F8, $08
(1)   11/    1396 :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_FM4
(1)   11/    1396 : =>TRUE                       if SonicDriverVer<>1
(1)   11/    1396 : 8216                                dc.w    z80_ptr(Mus81_GHZ_FM4)
(1)   11/    1398 : =>FALSE                      else
(1)   11/    1398 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_FM4))
(1)   11/    1398 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/    1398 : [11]                                 endif
(1)   11/    1398 :                                     dc.w    Mus81_GHZ_FM4-songStart
(1)   11/    1398 : [11]                         endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 19 - 01/15/2025 07:33:10 PM


(1)   11/    1398 : F808                        dc.b    $F8,$08
(1)   12/    139A : (MACRO)              	smpsHeaderFM        Mus81_GHZ_FM5,	$F8, $20
(1)   12/    139A :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_FM5
(1)   12/    139A : =>TRUE                       if SonicDriverVer<>1
(1)   12/    139A : 9317                                dc.w    z80_ptr(Mus81_GHZ_FM5)
(1)   12/    139C : =>FALSE                      else
(1)   12/    139C :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_FM5))
(1)   12/    139C :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/    139C : [12]                                 endif
(1)   12/    139C :                                     dc.w    Mus81_GHZ_FM5-songStart
(1)   12/    139C : [12]                         endif
(1)   12/    139C : F820                        dc.b    $F8,$20
(1)   13/    139E : (MACRO)              	smpsHeaderPSG       Mus81_GHZ_PSG1,	$D0, $01, $00, fTone_03
(1)   13/    139E :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_PSG1
(1)   13/    139E : =>TRUE                       if SonicDriverVer<>1
(1)   13/    139E : B218                                dc.w    z80_ptr(Mus81_GHZ_PSG1)
(1)   13/    13A0 : =>FALSE                      else
(1)   13/    13A0 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_PSG1))
(1)   13/    13A0 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/    13A0 : [13]                                 endif
(1)   13/    13A0 :                                     dc.w    Mus81_GHZ_PSG1-songStart
(1)   13/    13A0 : [13]                         endif
(1)   13/    13A0 :  (MACRO-2)                   PSGPitchConvert $D0
(1)   13/    13A0 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/    13A0 :                                     dc.b    ($D0+psgdelta)&$FF
(1)   13/    13A0 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/    13A0 :                                     dc.b    ($D0-psgdelta)&$FF
(1)   13/    13A0 : =>TRUE                       else
(1)   13/    13A0 : D0                                  dc.b    $D0
(1)   13/    13A1 : [13]                         endif
(1)   13/    13A1 : 01                          dc.b    $01
(1)   13/    13A2 :                             ; Frequency envelope
(1)   13/    13A2 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/    13A2 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/    13A2 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/    13A2 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/    13A2 :                                     dc.b    0
(1)   13/    13A2 : =>TRUE                       else
(1)   13/    13A2 : =>FALSE                              if (MOMPASS==1) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/    13A2 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/    13A2 : [13]                                 endif
(1)   13/    13A2 : 00                                  dc.b    $00
(1)   13/    13A3 : [13]                         endif
(1)   13/    13A3 :                             ; Volume envelope
(1)   13/    13A3 : 03                          dc.b    fTone_03
(1)   14/    13A4 : (MACRO)              	smpsHeaderPSG       Mus81_GHZ_PSG2,	$D0, $03, $00, fTone_06
(1)   14/    13A4 :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_PSG2
(1)   14/    13A4 : =>TRUE                       if SonicDriverVer<>1
(1)   14/    13A4 : 4D19                                dc.w    z80_ptr(Mus81_GHZ_PSG2)
(1)   14/    13A6 : =>FALSE                      else
(1)   14/    13A6 :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_PSG2))
(1)   14/    13A6 :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/    13A6 : [14]                                 endif
(1)   14/    13A6 :                                     dc.w    Mus81_GHZ_PSG2-songStart
(1)   14/    13A6 : [14]                         endif
(1)   14/    13A6 :  (MACRO-2)                   PSGPitchConvert $D0
(1)   14/    13A6 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/    13A6 :                                     dc.b    ($D0+psgdelta)&$FF
(1)   14/    13A6 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/    13A6 :                                     dc.b    ($D0-psgdelta)&$FF
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 20 - 01/15/2025 07:33:10 PM


(1)   14/    13A6 : =>TRUE                       else
(1)   14/    13A6 : D0                                  dc.b    $D0
(1)   14/    13A7 : [14]                         endif
(1)   14/    13A7 : 03                          dc.b    $03
(1)   14/    13A8 :                             ; Frequency envelope
(1)   14/    13A8 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/    13A8 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/    13A8 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/    13A8 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/    13A8 :                                     dc.b    0
(1)   14/    13A8 : =>TRUE                       else
(1)   14/    13A8 : =>FALSE                              if (MOMPASS==1) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/    13A8 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/    13A8 : [14]                                 endif
(1)   14/    13A8 : 00                                  dc.b    $00
(1)   14/    13A9 : [14]                         endif
(1)   14/    13A9 :                             ; Volume envelope
(1)   14/    13A9 : 06                          dc.b    fTone_06
(1)   15/    13AA : (MACRO)              	smpsHeaderPSG       Mus81_GHZ_PSG3,	$00, $03, $00, fTone_04
(1)   15/    13AA :  (MACRO-2)                   CheckedChannelPointer Mus81_GHZ_PSG3
(1)   15/    13AA : =>TRUE                       if SonicDriverVer<>1
(1)   15/    13AA : BA19                                dc.w    z80_ptr(Mus81_GHZ_PSG3)
(1)   15/    13AC : =>FALSE                      else
(1)   15/    13AC :                                     if (MOMPASS=1)&&(DEFINED(Mus81_GHZ_PSG3))
(1)   15/    13AC :                                             fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/    13AC : [15]                                 endif
(1)   15/    13AC :                                     dc.w    Mus81_GHZ_PSG3-songStart
(1)   15/    13AC : [15]                         endif
(1)   15/    13AC :  (MACRO-2)                   PSGPitchConvert $00
(1)   15/    13AC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/    13AC :                                     dc.b    ($00+psgdelta)&$FF
(1)   15/    13AC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/    13AC :                                     dc.b    ($00-psgdelta)&$FF
(1)   15/    13AC : =>TRUE                       else
(1)   15/    13AC : 00                                  dc.b    $00
(1)   15/    13AD : [15]                         endif
(1)   15/    13AD : 03                          dc.b    $03
(1)   15/    13AE :                             ; Frequency envelope
(1)   15/    13AE : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/    13AE :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/    13AE :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/    13AE :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/    13AE :                                     dc.b    0
(1)   15/    13AE : =>TRUE                       else
(1)   15/    13AE : =>FALSE                              if (MOMPASS==1) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/    13AE :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/    13AE : [15]                                 endif
(1)   15/    13AE : 00                                  dc.b    $00
(1)   15/    13AF : [15]                         endif
(1)   15/    13AF :                             ; Volume envelope
(1)   15/    13AF : 04                          dc.b    fTone_04
(1)   16/    13B0 :                     
(1)   17/    13B0 :                     ; FM1 Data
(1)   18/    13B0 :                     Mus81_GHZ_FM1:
(1)   19/    13B0 : (MACRO)              	smpsSetvoice        $02
(1)   19/    13B0 :  (MACRO-2)                   smpsFMvoice $02
(1)   19/    13B0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/    13B0 :                                     dc.b    $EF,$02|$80,+$81
(1)   19/    13B0 : =>TRUE                       else
(1)   19/    13B0 : EF02                                dc.b    $EF,$02
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 21 - 01/15/2025 07:33:10 PM


(1)   19/    13B2 : [19]                         endif
(1)   20/    13B2 : (MACRO)              	smpsPan             panRight, $00
(1)   20/    13B2 : =$0                  panNone set $00
(1)   20/    13B2 : =$40                 panRight set $40
(1)   20/    13B2 : =$80                 panLeft set $80
(1)   20/    13B2 : =$C0                 panCentre set $C0
(1)   20/    13B2 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   20/    13B2 : E040                        dc.b $E0,panRight+$00
(1)   21/    13B4 : (MACRO)              	smpsCall            Mus81_GHZ_Call02
(1)   21/    13B4 : F8                          dc.b    $F8
(1)   21/    13B5 : =>TRUE                       if SonicDriverVer<>1
(1)   21/    13B5 : 3114                                dc.w    z80_ptr(Mus81_GHZ_Call02)
(1)   21/    13B7 : =>FALSE                      else
(1)   21/    13B7 :                                     dc.w    Mus81_GHZ_Call02-*-1
(1)   21/    13B7 : [21]                         endif
(1)   22/    13B7 : (MACRO)              	smpsPan             panCenter, $00
(1)   22/    13B7 : =$0                  panNone set $00
(1)   22/    13B7 : =$40                 panRight set $40
(1)   22/    13B7 : =$80                 panLeft set $80
(1)   22/    13B7 : =$C0                 panCentre set $C0
(1)   22/    13B7 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   22/    13B7 : E0C0                        dc.b $E0,panCenter+$00
(1)   23/    13B9 :                     
(1)   24/    13B9 :                     Mus81_GHZ_Loop0E:
(1)   25/    13B9 : (MACRO)              	smpsPan             panLeft, $00
(1)   25/    13B9 : =$0                  panNone set $00
(1)   25/    13B9 : =$40                 panRight set $40
(1)   25/    13B9 : =$80                 panLeft set $80
(1)   25/    13B9 : =$C0                 panCentre set $C0
(1)   25/    13B9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   25/    13B9 : E080                        dc.b $E0,panLeft+$00
(1)   26/    13BB : D904                	dc.b	nE7, $04
(1)   27/    13BD : (MACRO)              	smpsPan             panRight, $00
(1)   27/    13BD : =$0                  panNone set $00
(1)   27/    13BD : =$40                 panRight set $40
(1)   27/    13BD : =$80                 panLeft set $80
(1)   27/    13BD : =$C0                 panCentre set $C0
(1)   27/    13BD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   27/    13BD : E040                        dc.b $E0,panRight+$00
> > > A4 - S1GHZEDIT.asm(28):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8
> > >       ~~~
(1)   28/    13BF :                     	dc.b	nC8
(1)   29/    13BF : (MACRO)              	smpsAlterVol        $01
(1)   29/    13BF : E601                        dc.b    $E6,$01
(1)   30/    13C1 : (MACRO)              	smpsLoop            $00, $0D, Mus81_GHZ_Loop0E
(1)   30/    13C1 : F7                          dc.b    $F7
(1)   30/    13C2 : 000D                        dc.b    $00,$0D
(1)   30/    13C4 : =>TRUE                       if SonicDriverVer<>1
(1)   30/    13C4 : B913                                dc.w    z80_ptr(Mus81_GHZ_Loop0E)
(1)   30/    13C6 : =>FALSE                      else
(1)   30/    13C6 :                                     dc.w    Mus81_GHZ_Loop0E-*-1
(1)   30/    13C6 : [30]                         endif
(1)   31/    13C6 : D904 8014           	dc.b	nE7, $04, nRst, $14
(1)   32/    13CA : (MACRO)              	smpsAlterVol        $EB
(1)   32/    13CA : E6EB                        dc.b    $E6,$EB
(1)   33/    13CC : (MACRO)              	smpsPan             panCenter, $00
(1)   33/    13CC : =$0                  panNone set $00
(1)   33/    13CC : =$40                 panRight set $40
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 22 - 01/15/2025 07:33:10 PM


(1)   33/    13CC : =$80                 panLeft set $80
(1)   33/    13CC : =$C0                 panCentre set $C0
(1)   33/    13CC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   33/    13CC : E0C0                        dc.b $E0,panCenter+$00
(1)   34/    13CE : 8040 8080 8080 80   	dc.b	nRst, $40, nRst, nRst, nRst, nRst, nRst
(1)   35/    13D5 :                     
(1)   36/    13D5 :                     Mus81_GHZ_Jump04:
(1)   37/    13D5 : (MACRO)              	smpsSetvoice        $06
(1)   37/    13D5 :  (MACRO-2)                   smpsFMvoice $06
(1)   37/    13D5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   37/    13D5 :                                     dc.b    $EF,$06|$80,+$81
(1)   37/    13D5 : =>TRUE                       else
(1)   37/    13D5 : EF06                                dc.b    $EF,$06
(1)   37/    13D7 : [37]                         endif
(1)   38/    13D7 : (MACRO)              	smpsModSet          $0D, $01, $07, $04
(1)   38/    13D7 : F0                          dc.b    $F0
(1)   38/    13D8 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/    13D8 :                                     dc.b    $0D+1,$01,$07,(($04+1) * $01) & $FF
(1)   38/    13D8 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   38/    13D8 :                                     dc.b    $0D-1,$01,$07,conv0To256($04)/conv0To256($01)-1
(1)   38/    13D8 : =>TRUE                       else
(1)   38/    13D8 : 0D01 0704                           dc.b    $0D,$01,$07,$04
(1)   38/    13DC : [38]                         endif
(1)   38/    13DC :                             ;dc.b   $01,$07,$04
(1)   39/    13DC : (MACRO)              	smpsAlterPitch      $F8
(1)   39/    13DC :  (MACRO-2)                   smpsChangeTransposition $F8
(1)   39/    13DC : =>FALSE                      if SonicDriverVer>=3
(1)   39/    13DC :                                     dc.b    $FB,$F8
(1)   39/    13DC : =>TRUE                       else
(1)   39/    13DC : E9F8                                dc.b    $E9,$F8
(1)   39/    13DE : [39]                         endif
(1)   40/    13DE : 8020                	dc.b	nRst, $20
(1)   41/    13E0 : (MACRO)              	smpsCall            Mus81_GHZ_Call07
(1)   41/    13E0 : F8                          dc.b    $F8
(1)   41/    13E1 : =>TRUE                       if SonicDriverVer<>1
(1)   41/    13E1 : 4314                                dc.w    z80_ptr(Mus81_GHZ_Call07)
(1)   41/    13E3 : =>FALSE                      else
(1)   41/    13E3 :                                     dc.w    Mus81_GHZ_Call07-*-1
(1)   41/    13E3 : [41]                         endif
> > > A4 - S1GHZEDIT.asm(42):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $38
> > >       ~~~
(1)   42/    13E3 :                     	dc.b	nC8, $38
(1)   43/    13E3 : (MACRO)              	smpsCall            Mus81_GHZ_Call07
(1)   43/    13E3 : F8                          dc.b    $F8
(1)   43/    13E4 : =>TRUE                       if SonicDriverVer<>1
(1)   43/    13E4 : 4314                                dc.w    z80_ptr(Mus81_GHZ_Call07)
(1)   43/    13E6 : =>FALSE                      else
(1)   43/    13E6 :                                     dc.w    Mus81_GHZ_Call07-*-1
(1)   43/    13E6 : [43]                         endif
> > > A4 - S1GHZEDIT.asm(44):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $08, $08, nE7
> > >       ~~~
(1)   44/    13E6 :                     	dc.b	nC8, $08, $08, nE7
(1)   45/    13E6 : (MACRO)              	smpsAlterPitch      $10
(1)   45/    13E6 :  (MACRO-2)                   smpsChangeTransposition $10
(1)   45/    13E6 : =>FALSE                      if SonicDriverVer>=3
(1)   45/    13E6 :                                     dc.b    $FB,$10
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 23 - 01/15/2025 07:33:10 PM


(1)   45/    13E6 : =>TRUE                       else
(1)   45/    13E6 : E910                                dc.b    $E9,$10
(1)   45/    13E8 : [45]                         endif
(1)   46/    13E8 : (MACRO)              	smpsSetvoice        $06
(1)   46/    13E8 :  (MACRO-2)                   smpsFMvoice $06
(1)   46/    13E8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   46/    13E8 :                                     dc.b    $EF,$06|$80,+$81
(1)   46/    13E8 : =>TRUE                       else
(1)   46/    13E8 : EF06                                dc.b    $EF,$06
(1)   46/    13EA : [46]                         endif
(1)   47/    13EA : (MACRO)              	smpsAlterPitch      $F8
(1)   47/    13EA :  (MACRO-2)                   smpsChangeTransposition $F8
(1)   47/    13EA : =>FALSE                      if SonicDriverVer>=3
(1)   47/    13EA :                                     dc.b    $FB,$F8
(1)   47/    13EA : =>TRUE                       else
(1)   47/    13EA : E9F8                                dc.b    $E9,$F8
(1)   47/    13EC : [47]                         endif
> > > A4 - S1GHZEDIT.asm(48):7: error #1010: symbol undefined
> > > nD8
> > >  dc.b nD8, $34, smpsNoAttack, $34, nC8, $08, nD8, nE7, $38, smpsNoAttack, $38, nC8
> > >       ~~~
(1)   48/    13EC :                     	dc.b	nD8, $34, smpsNoAttack, $34, nC8, $08, nD8, nE7, $38, smpsNoAttack, $38, nC8
> > > A4 - S1GHZEDIT.asm(49):12: error #1010: symbol undefined
> > > nC8
> > >  dc.b $08, nC8, nE7, nEb6, $34, smpsNoAttack, $34, nC8, $08, nEb6, nD8, $1C
> > >            ~~~
(1)   49/    13EC :                     	dc.b	$08, nC8, nE7, nEb6, $34, smpsNoAttack, $34, nC8, $08, nEb6, nD8, $1C
(1)   50/    13EC : E71C                	dc.b	smpsNoAttack, $1C
(1)   51/    13EE : (MACRO)              	smpsSetvoice        $05
(1)   51/    13EE :  (MACRO-2)                   smpsFMvoice $05
(1)   51/    13EE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   51/    13EE :                                     dc.b    $EF,$05|$80,+$81
(1)   51/    13EE : =>TRUE                       else
(1)   51/    13EE : EF05                                dc.b    $EF,$05
(1)   51/    13F0 : [51]                         endif
(1)   52/    13F0 : (MACRO)              	smpsAlterPitch      $F8
(1)   52/    13F0 :  (MACRO-2)                   smpsChangeTransposition $F8
(1)   52/    13F0 : =>FALSE                      if SonicDriverVer>=3
(1)   52/    13F0 :                                     dc.b    $FB,$F8
(1)   52/    13F0 : =>TRUE                       else
(1)   52/    13F0 : E9F8                                dc.b    $E9,$F8
(1)   52/    13F2 : [52]                         endif
(1)   53/    13F2 : (MACRO)              	smpsAlterVol        $0A
(1)   53/    13F2 : E60A                        dc.b    $E6,$0A
(1)   54/    13F4 : 8008 D910 8004      	dc.b	nRst, $08, nE7, $10, nRst, $04
(1)   55/    13FA : (MACRO)              	smpsNoteFill        $0B
(1)   55/    13FA : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   55/    13FA :                                     ; Unique to Flamewing's modified driver
(1)   55/    13FA :                                     dc.b    $FF,$0A,$0B
(1)   55/    13FA : =>TRUE                       else
(1)   55/    13FA : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   55/    13FA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   55/    13FA : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   55/    13FA :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   55/    13FA : [55]                                 endif
(1)   55/    13FA : E80B                                dc.b    $E8,$0B
(1)   55/    13FC : [55]                         endif
(1)   56/    13FC : D908 DAD9 DC        	dc.b	nE7, $08, nF7, nE7, nG7
(1)   57/    1401 : (MACRO)              	smpsNoteFill        $14
(1)   57/    1401 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 24 - 01/15/2025 07:33:10 PM


(1)   57/    1401 :                                     ; Unique to Flamewing's modified driver
(1)   57/    1401 :                                     dc.b    $FF,$0A,$14
(1)   57/    1401 : =>TRUE                       else
(1)   57/    1401 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   57/    1401 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   57/    1401 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   57/    1401 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   57/    1401 : [57]                                 endif
(1)   57/    1401 : E814                                dc.b    $E8,$14
(1)   57/    1403 : [57]                         endif
(1)   58/    1403 : D910                	dc.b	nE7, $10
(1)   59/    1405 : (MACRO)              	smpsNoteFill        $0B
(1)   59/    1405 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   59/    1405 :                                     ; Unique to Flamewing's modified driver
(1)   59/    1405 :                                     dc.b    $FF,$0A,$0B
(1)   59/    1405 : =>TRUE                       else
(1)   59/    1405 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   59/    1405 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   59/    1405 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   59/    1405 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   59/    1405 : [59]                                 endif
(1)   59/    1405 : E80B                                dc.b    $E8,$0B
(1)   59/    1407 : [59]                         endif
> > > A4 - S1GHZEDIT.asm(60):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $08
> > >       ~~~
(1)   60/    1407 :                     	dc.b	nC8, $08
(1)   61/    1407 : (MACRO)              	smpsNoteFill        $00
(1)   61/    1407 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   61/    1407 :                                     ; Unique to Flamewing's modified driver
(1)   61/    1407 :                                     dc.b    $FF,$0A,$00
(1)   61/    1407 : =>TRUE                       else
(1)   61/    1407 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   61/    1407 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   61/    1407 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   61/    1407 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   61/    1407 : [61]                                 endif
(1)   61/    1407 : E800                                dc.b    $E8,$00
(1)   61/    1409 : [61]                         endif
(1)   62/    1409 : (MACRO)              	smpsAlterVol        $F6
(1)   62/    1409 : E6F6                        dc.b    $E6,$F6
(1)   63/    140B : (MACRO)              	smpsAlterPitch      $18
(1)   63/    140B :  (MACRO-2)                   smpsChangeTransposition $18
(1)   63/    140B : =>FALSE                      if SonicDriverVer>=3
(1)   63/    140B :                                     dc.b    $FB,$18
(1)   63/    140B : =>TRUE                       else
(1)   63/    140B : E918                                dc.b    $E9,$18
(1)   63/    140D : [63]                         endif
(1)   64/    140D : (MACRO)              	smpsJump            Mus81_GHZ_Jump04
(1)   64/    140D : F6                          dc.b    $F6
(1)   64/    140E : =>TRUE                       if SonicDriverVer<>1
(1)   64/    140E : D513                                dc.w    z80_ptr(Mus81_GHZ_Jump04)
(1)   64/    1410 : =>FALSE                      else
(1)   64/    1410 :                                     dc.w    Mus81_GHZ_Jump04-*-1
(1)   64/    1410 : [64]                         endif
(1)   65/    1410 :                     
(1)   66/    1410 :                     Mus81_GHZ_Call02:
> > > A4 - S1GHZEDIT.asm(67):52: error #1010: symbol undefined
> > > nC8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 25 - 01/15/2025 07:33:10 PM


> > >  dc.b nA6, $04, nF6, nA6, nF6, nB6, nG6, nB6, nG6, nC8, nA6, nC8
> > >                                                    ~~~
(1)   67/    1410 :                     	dc.b	nA6, $04, nF6, nA6, nF6, nB6, nG6, nB6, nG6, nC8, nA6, nC8
> > > A4 - S1GHZEDIT.asm(68):12: error #1010: symbol undefined
> > > nD8
> > >  dc.b nA6, nD8, nB6, nD8, nB6
> > >            ~~~
(1)   68/    1410 :                     	dc.b	nA6, nD8, nB6, nD8, nB6
(1)   69/    1410 : (MACRO)              	smpsReturn
(1)   69/    1410 : =>FALSE                      if SonicDriverVer>=3
(1)   69/    1410 :                                     dc.b    $F9
(1)   69/    1410 : =>TRUE                       else
(1)   69/    1410 : E3                                  dc.b    $E3
(1)   69/    1411 : [69]                         endif
(1)   70/    1411 :                     
(1)   71/    1411 :                     Mus81_GHZ_Call07:
> > > A4 - S1GHZEDIT.asm(72):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $08, nA6, $10, nC8, $08, nB6, $10, nC8, $08, nB6, $10
> > >       ~~~
(1)   72/    1411 :                     	dc.b	nC8, $08, nA6, $10, nC8, $08, nB6, $10, nC8, $08, nB6, $10
> > > A4 - S1GHZEDIT.asm(73):32: error #1010: symbol undefined
> > > nD8
> > >  dc.b nG6, $30, nA6, $08, nE7, nD8, $10, nC8, $08, nB6, $10, nC8
> > >                                ~~~
(1)   73/    1411 :                     	dc.b	nG6, $30, nA6, $08, nE7, nD8, $10, nC8, $08, nB6, $10, nC8
> > > A4 - S1GHZEDIT.asm(74):32: error #1010: symbol undefined
> > > nC8
> > >  dc.b $08, nB6, $10, nG6, $38, nC8, $08, nA6, $10, nC8, $08, nB6
> > >                                ~~~
(1)   74/    1411 :                     	dc.b	$08, nB6, $10, nG6, $38, nC8, $08, nA6, $10, nC8, $08, nB6
> > > A4 - S1GHZEDIT.asm(75):12: error #1010: symbol undefined
> > > nC8
> > >  dc.b $10, nC8, $08, nB6, $10, nG6, $30, nA6, $08, $08, nF6, $10
> > >            ~~~
(1)   75/    1411 :                     	dc.b	$10, nC8, $08, nB6, $10, nG6, $30, nA6, $08, $08, nF6, $10
(1)   76/    1411 : D208 D010 D208      	dc.b	nA6, $08, nG6, $10, nA6, $08, nG6, $10
             1417 : D010             
(1)   77/    1419 : (MACRO)              	smpsReturn
(1)   77/    1419 : =>FALSE                      if SonicDriverVer>=3
(1)   77/    1419 :                                     dc.b    $F9
(1)   77/    1419 : =>TRUE                       else
(1)   77/    1419 : E3                                  dc.b    $E3
(1)   77/    141A : [77]                         endif
(1)   78/    141A :                     
(1)   79/    141A :                     ; FM2 Data
(1)   80/    141A :                     Mus81_GHZ_FM2:
(1)   81/    141A : (MACRO)              	smpsSetvoice        $00
(1)   81/    141A :  (MACRO-2)                   smpsFMvoice $00
(1)   81/    141A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   81/    141A :                                     dc.b    $EF,$00|$80,+$81
(1)   81/    141A : =>TRUE                       else
(1)   81/    141A : EF00                                dc.b    $EF,$00
(1)   81/    141C : [81]                         endif
(1)   82/    141C : (MACRO)              	smpsNop             $01
(1)   82/    141C : =>TRUE                       if SonicDriverVer<3
(1)   82/    141C : E201                                dc.b    $E2,$01
(1)   82/    141E : [82]                         endif
(1)   83/    141E : 8008 A2AE A2A3      	dc.b	nRst, $08, nA2, nA3, nA2, nBb2, nBb3, nB2, nB3
             1424 : AFA4 B0          
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 26 - 01/15/2025 07:33:10 PM


(1)   84/    1427 : (MACRO)              	smpsNoteFill        $04
(1)   84/    1427 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   84/    1427 :                                     ; Unique to Flamewing's modified driver
(1)   84/    1427 :                                     dc.b    $FF,$0A,$04
(1)   84/    1427 : =>TRUE                       else
(1)   84/    1427 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   84/    1427 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   84/    1427 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   84/    1427 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   84/    1427 : [84]                                 endif
(1)   84/    1427 : E804                                dc.b    $E8,$04
(1)   84/    1429 : [84]                         endif
(1)   85/    1429 : (MACRO)              	smpsSetvoice        $01
(1)   85/    1429 :  (MACRO-2)                   smpsFMvoice $01
(1)   85/    1429 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   85/    1429 :                                     dc.b    $EF,$01|$80,+$81
(1)   85/    1429 : =>TRUE                       else
(1)   85/    1429 : EF01                                dc.b    $EF,$01
(1)   85/    142B : [85]                         endif
(1)   86/    142B :                     
(1)   87/    142B :                     Mus81_GHZ_Loop0C:
(1)   88/    142B : A508                	dc.b	nC3, $08
(1)   89/    142D : (MACRO)              	smpsLoop            $00, $18, Mus81_GHZ_Loop0C
(1)   89/    142D : F7                          dc.b    $F7
(1)   89/    142E : 0018                        dc.b    $00,$18
(1)   89/    1430 : =>TRUE                       if SonicDriverVer<>1
(1)   89/    1430 : 2B14                                dc.w    z80_ptr(Mus81_GHZ_Loop0C)
(1)   89/    1432 : =>FALSE                      else
(1)   89/    1432 :                                     dc.w    Mus81_GHZ_Loop0C-*-1
(1)   89/    1432 : [89]                         endif
(1)   90/    1432 : (MACRO)              	smpsNoteFill        $00
(1)   90/    1432 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   90/    1432 :                                     ; Unique to Flamewing's modified driver
(1)   90/    1432 :                                     dc.b    $FF,$0A,$00
(1)   90/    1432 : =>TRUE                       else
(1)   90/    1432 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   90/    1432 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   90/    1432 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   90/    1432 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   90/    1432 : [90]                                 endif
(1)   90/    1432 : E800                                dc.b    $E8,$00
(1)   90/    1434 : [90]                         endif
(1)   91/    1434 : A504 80A5 08A2      	dc.b	nC3, $04, nRst, nC3, $08, nA2, $04, nRst, nA2, $08, nBb2, $04
             143A : 0480 A208 A304    
(1)   92/    1440 : 80A3 08A4 0480      	dc.b	nRst, nBb2, $08, nB2, $04, nRst, nB2, $08
             1446 : A408             
(1)   93/    1448 : (MACRO)              	smpsNoteFill        $04
(1)   93/    1448 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   93/    1448 :                                     ; Unique to Flamewing's modified driver
(1)   93/    1448 :                                     dc.b    $FF,$0A,$04
(1)   93/    1448 : =>TRUE                       else
(1)   93/    1448 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   93/    1448 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   93/    1448 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   93/    1448 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   93/    1448 : [93]                                 endif
(1)   93/    1448 : E804                                dc.b    $E8,$04
(1)   93/    144A : [93]                         endif
(1)   94/    144A :                     
(1)   95/    144A :                     Mus81_GHZ_Loop0D:
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 27 - 01/15/2025 07:33:10 PM


(1)   96/    144A : A508                	dc.b	nC3, $08
(1)   97/    144C : (MACRO)              	smpsLoop            $00, $1D, Mus81_GHZ_Loop0D
(1)   97/    144C : F7                          dc.b    $F7
(1)   97/    144D : 001D                        dc.b    $00,$1D
(1)   97/    144F : =>TRUE                       if SonicDriverVer<>1
(1)   97/    144F : 4A14                                dc.w    z80_ptr(Mus81_GHZ_Loop0D)
(1)   97/    1451 : =>FALSE                      else
(1)   97/    1451 :                                     dc.w    Mus81_GHZ_Loop0D-*-1
(1)   97/    1451 : [97]                         endif
(1)   98/    1451 : (MACRO)              	smpsNoteFill        $00
(1)   98/    1451 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)   98/    1451 :                                     ; Unique to Flamewing's modified driver
(1)   98/    1451 :                                     dc.b    $FF,$0A,$00
(1)   98/    1451 : =>TRUE                       else
(1)   98/    1451 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   98/    1451 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   98/    1451 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   98/    1451 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)   98/    1451 : [98]                                 endif
(1)   98/    1451 : E800                                dc.b    $E8,$00
(1)   98/    1453 : [98]                         endif
(1)   99/    1453 : A5A7 A9             	dc.b	nC3, nD3, nE3
(1)  100/    1456 :                     
(1)  101/    1456 :                     Mus81_GHZ_Jump03:
(1)  102/    1456 : (MACRO)              	smpsSetvoice        $01
(1)  102/    1456 :  (MACRO-2)                   smpsFMvoice $01
(1)  102/    1456 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  102/    1456 :                                     dc.b    $EF,$01|$80,+$81
(1)  102/    1456 : =>TRUE                       else
(1)  102/    1456 : EF01                                dc.b    $EF,$01
(1)  102/    1458 : [102]                        endif
(1)  103/    1458 : (MACRO)              	smpsCall            Mus81_GHZ_Call05
(1)  103/    1458 : F8                          dc.b    $F8
(1)  103/    1459 : =>TRUE                       if SonicDriverVer<>1
(1)  103/    1459 : 0315                                dc.w    z80_ptr(Mus81_GHZ_Call05)
(1)  103/    145B : =>FALSE                      else
(1)  103/    145B :                                     dc.w    Mus81_GHZ_Call05-*-1
(1)  103/    145B : [103]                        endif
(1)  104/    145B : (MACRO)              	smpsCall            Mus81_GHZ_Call06
(1)  104/    145B : F8                          dc.b    $F8
(1)  104/    145C : =>TRUE                       if SonicDriverVer<>1
(1)  104/    145C : 3515                                dc.w    z80_ptr(Mus81_GHZ_Call06)
(1)  104/    145E : =>FALSE                      else
(1)  104/    145E :                                     dc.w    Mus81_GHZ_Call06-*-1
(1)  104/    145E : [104]                        endif
(1)  105/    145E : (MACRO)              	smpsNoteFill        $00
(1)  105/    145E : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  105/    145E :                                     ; Unique to Flamewing's modified driver
(1)  105/    145E :                                     dc.b    $FF,$0A,$00
(1)  105/    145E : =>TRUE                       else
(1)  105/    145E : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  105/    145E :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  105/    145E : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  105/    145E :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  105/    145E : [105]                                endif
(1)  105/    145E : E800                                dc.b    $E8,$00
(1)  105/    1460 : [105]                        endif
(1)  106/    1460 : A5A7 A9             	dc.b	nC3, nD3, nE3
(1)  107/    1463 : (MACRO)              	smpsCall            Mus81_GHZ_Call05
(1)  107/    1463 : F8                          dc.b    $F8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 28 - 01/15/2025 07:33:10 PM


(1)  107/    1464 : =>TRUE                       if SonicDriverVer<>1
(1)  107/    1464 : 0315                                dc.w    z80_ptr(Mus81_GHZ_Call05)
(1)  107/    1466 : =>FALSE                      else
(1)  107/    1466 :                                     dc.w    Mus81_GHZ_Call05-*-1
(1)  107/    1466 : [107]                        endif
(1)  108/    1466 : (MACRO)              	smpsCall            Mus81_GHZ_Call06
(1)  108/    1466 : F8                          dc.b    $F8
(1)  108/    1467 : =>TRUE                       if SonicDriverVer<>1
(1)  108/    1467 : 3515                                dc.w    z80_ptr(Mus81_GHZ_Call06)
(1)  108/    1469 : =>FALSE                      else
(1)  108/    1469 :                                     dc.w    Mus81_GHZ_Call06-*-1
(1)  108/    1469 : [108]                        endif
(1)  109/    1469 : A5A5 A5             	dc.b	nC3, nC3, nC3
(1)  110/    146C : (MACRO)              	smpsNoteFill        $00
(1)  110/    146C : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  110/    146C :                                     ; Unique to Flamewing's modified driver
(1)  110/    146C :                                     dc.b    $FF,$0A,$00
(1)  110/    146C : =>TRUE                       else
(1)  110/    146C : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  110/    146C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  110/    146C : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  110/    146C :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  110/    146C : [110]                                endif
(1)  110/    146C : E800                                dc.b    $E8,$00
(1)  110/    146E : [110]                        endif
(1)  111/    146E : (MACRO)              	smpsSetvoice        $00
(1)  111/    146E :  (MACRO-2)                   smpsFMvoice $00
(1)  111/    146E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  111/    146E :                                     dc.b    $EF,$00|$80,+$81
(1)  111/    146E : =>TRUE                       else
(1)  111/    146E : EF00                                dc.b    $EF,$00
(1)  111/    1470 : [111]                        endif
(1)  112/    1470 : A318 A2A0 9E9D      	dc.b	nBb2, $18, nA2, nG2, nF2, nE2, $08, nRst, nD2, nRst, nA2, $18
             1476 : 0880 9B80 A218    
(1)  113/    147C : A4A5 A7A9 0880      	dc.b	nB2, nC3, nD3, nE3, $08, nRst, nA3, nRst, nAb3, $18, nG3, nF3
             1482 : AE80 AD18 ACAA    
(1)  114/    1488 : A8A7 0880 A580      	dc.b	nEb3, nD3, $08, nRst, nC3, nRst, nG2, $18, nD3, nG2, nG3, $08
             148E : A018 A7A0 AC08    
(1)  115/    1494 : 9DA9 9EAA A0AC      	dc.b	nE2, nE3, nF2, nF3, nG2, nG3
(1)  116/    149A : (MACRO)              	smpsNoteFill        $04
(1)  116/    149A : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  116/    149A :                                     ; Unique to Flamewing's modified driver
(1)  116/    149A :                                     dc.b    $FF,$0A,$04
(1)  116/    149A : =>TRUE                       else
(1)  116/    149A : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  116/    149A :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  116/    149A : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  116/    149A :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  116/    149A : [116]                                endif
(1)  116/    149A : E804                                dc.b    $E8,$04
(1)  116/    149C : [116]                        endif
(1)  117/    149C : (MACRO)              	smpsNop             $01
(1)  117/    149C : =>TRUE                       if SonicDriverVer<3
(1)  117/    149C : E201                                dc.b    $E2,$01
(1)  117/    149E : [117]                        endif
(1)  118/    149E : (MACRO)              	smpsJump            Mus81_GHZ_Jump03
(1)  118/    149E : F6                          dc.b    $F6
(1)  118/    149F : =>TRUE                       if SonicDriverVer<>1
(1)  118/    149F : 5614                                dc.w    z80_ptr(Mus81_GHZ_Jump03)
(1)  118/    14A1 : =>FALSE                      else
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 29 - 01/15/2025 07:33:10 PM


(1)  118/    14A1 :                                     dc.w    Mus81_GHZ_Jump03-*-1
(1)  118/    14A1 : [118]                        endif
(1)  119/    14A1 :                     
(1)  120/    14A1 :                     Mus81_GHZ_Call05:
(1)  121/    14A1 : (MACRO)              	smpsNoteFill        $04
(1)  121/    14A1 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  121/    14A1 :                                     ; Unique to Flamewing's modified driver
(1)  121/    14A1 :                                     dc.b    $FF,$0A,$04
(1)  121/    14A1 : =>TRUE                       else
(1)  121/    14A1 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  121/    14A1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  121/    14A1 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  121/    14A1 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  121/    14A1 : [121]                                endif
(1)  121/    14A1 : E804                                dc.b    $E8,$04
(1)  121/    14A3 : [121]                        endif
(1)  122/    14A3 : AA08 AAAA AAAA      	dc.b	nF3, $08, nF3, nF3, nF3, nF3, nF3, nF3
             14A9 : AAAA             
(1)  123/    14AB : (MACRO)              	smpsNoteFill        $00
(1)  123/    14AB : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  123/    14AB :                                     ; Unique to Flamewing's modified driver
(1)  123/    14AB :                                     dc.b    $FF,$0A,$00
(1)  123/    14AB : =>TRUE                       else
(1)  123/    14AB : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  123/    14AB :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  123/    14AB : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  123/    14AB :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  123/    14AB : [123]                                endif
(1)  123/    14AB : E800                                dc.b    $E8,$00
(1)  123/    14AD : [123]                        endif
(1)  124/    14AD : AA                  	dc.b	nF3
(1)  125/    14AE : (MACRO)              	smpsNoteFill        $04
(1)  125/    14AE : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  125/    14AE :                                     ; Unique to Flamewing's modified driver
(1)  125/    14AE :                                     dc.b    $FF,$0A,$04
(1)  125/    14AE : =>TRUE                       else
(1)  125/    14AE : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  125/    14AE :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  125/    14AE : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  125/    14AE :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  125/    14AE : [125]                                endif
(1)  125/    14AE : E804                                dc.b    $E8,$04
(1)  125/    14B0 : [125]                        endif
(1)  126/    14B0 : A9A9 A9A9 A9        	dc.b	nE3, nE3, nE3, nE3, nE3
(1)  127/    14B5 : (MACRO)              	smpsNoteFill        $00
(1)  127/    14B5 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  127/    14B5 :                                     ; Unique to Flamewing's modified driver
(1)  127/    14B5 :                                     dc.b    $FF,$0A,$00
(1)  127/    14B5 : =>TRUE                       else
(1)  127/    14B5 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  127/    14B5 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  127/    14B5 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  127/    14B5 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  127/    14B5 : [127]                                endif
(1)  127/    14B5 : E800                                dc.b    $E8,$00
(1)  127/    14B7 : [127]                        endif
(1)  128/    14B7 : A5A7 A9             	dc.b	nC3, nD3, nE3
(1)  129/    14BA : (MACRO)              	smpsNoteFill        $04
(1)  129/    14BA : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  129/    14BA :                                     ; Unique to Flamewing's modified driver
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 30 - 01/15/2025 07:33:10 PM


(1)  129/    14BA :                                     dc.b    $FF,$0A,$04
(1)  129/    14BA : =>TRUE                       else
(1)  129/    14BA : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  129/    14BA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  129/    14BA : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  129/    14BA :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  129/    14BA : [129]                                endif
(1)  129/    14BA : E804                                dc.b    $E8,$04
(1)  129/    14BC : [129]                        endif
(1)  130/    14BC : AAAA AAAA AAAA AA   	dc.b	nF3, nF3, nF3, nF3, nF3, nF3, nF3
(1)  131/    14C3 : (MACRO)              	smpsNoteFill        $00
(1)  131/    14C3 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  131/    14C3 :                                     ; Unique to Flamewing's modified driver
(1)  131/    14C3 :                                     dc.b    $FF,$0A,$00
(1)  131/    14C3 : =>TRUE                       else
(1)  131/    14C3 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  131/    14C3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  131/    14C3 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  131/    14C3 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  131/    14C3 : [131]                                endif
(1)  131/    14C3 : E800                                dc.b    $E8,$00
(1)  131/    14C5 : [131]                        endif
(1)  132/    14C5 : AA                  	dc.b	nF3
(1)  133/    14C6 : (MACRO)              	smpsNoteFill        $04
(1)  133/    14C6 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  133/    14C6 :                                     ; Unique to Flamewing's modified driver
(1)  133/    14C6 :                                     dc.b    $FF,$0A,$04
(1)  133/    14C6 : =>TRUE                       else
(1)  133/    14C6 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  133/    14C6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  133/    14C6 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  133/    14C6 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  133/    14C6 : [133]                                endif
(1)  133/    14C6 : E804                                dc.b    $E8,$04
(1)  133/    14C8 : [133]                        endif
(1)  134/    14C8 : A9A9 A9A9 A9        	dc.b	nE3, nE3, nE3, nE3, nE3
(1)  135/    14CD : (MACRO)              	smpsNoteFill        $00
(1)  135/    14CD : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  135/    14CD :                                     ; Unique to Flamewing's modified driver
(1)  135/    14CD :                                     dc.b    $FF,$0A,$00
(1)  135/    14CD : =>TRUE                       else
(1)  135/    14CD : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  135/    14CD :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  135/    14CD : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  135/    14CD :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  135/    14CD : [135]                                endif
(1)  135/    14CD : E800                                dc.b    $E8,$00
(1)  135/    14CF : [135]                        endif
(1)  136/    14CF : A5A7 A9             	dc.b	nC3, nD3, nE3
(1)  137/    14D2 : (MACRO)              	smpsReturn
(1)  137/    14D2 : =>FALSE                      if SonicDriverVer>=3
(1)  137/    14D2 :                                     dc.b    $F9
(1)  137/    14D2 : =>TRUE                       else
(1)  137/    14D2 : E3                                  dc.b    $E3
(1)  137/    14D3 : [137]                        endif
(1)  138/    14D3 :                     
(1)  139/    14D3 :                     Mus81_GHZ_Call06:
(1)  140/    14D3 : (MACRO)              	smpsNoteFill        $04
(1)  140/    14D3 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  140/    14D3 :                                     ; Unique to Flamewing's modified driver
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 31 - 01/15/2025 07:33:10 PM


(1)  140/    14D3 :                                     dc.b    $FF,$0A,$04
(1)  140/    14D3 : =>TRUE                       else
(1)  140/    14D3 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  140/    14D3 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  140/    14D3 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  140/    14D3 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  140/    14D3 : [140]                                endif
(1)  140/    14D3 : E804                                dc.b    $E8,$04
(1)  140/    14D5 : [140]                        endif
(1)  141/    14D5 : AAAA AAAA AAAA AA   	dc.b	nF3, nF3, nF3, nF3, nF3, nF3, nF3
(1)  142/    14DC : (MACRO)              	smpsNoteFill        $00
(1)  142/    14DC : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  142/    14DC :                                     ; Unique to Flamewing's modified driver
(1)  142/    14DC :                                     dc.b    $FF,$0A,$00
(1)  142/    14DC : =>TRUE                       else
(1)  142/    14DC : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  142/    14DC :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  142/    14DC : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  142/    14DC :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  142/    14DC : [142]                                endif
(1)  142/    14DC : E800                                dc.b    $E8,$00
(1)  142/    14DE : [142]                        endif
(1)  143/    14DE : AA                  	dc.b	nF3
(1)  144/    14DF : (MACRO)              	smpsNoteFill        $04
(1)  144/    14DF : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  144/    14DF :                                     ; Unique to Flamewing's modified driver
(1)  144/    14DF :                                     dc.b    $FF,$0A,$04
(1)  144/    14DF : =>TRUE                       else
(1)  144/    14DF : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  144/    14DF :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  144/    14DF : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  144/    14DF :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  144/    14DF : [144]                                endif
(1)  144/    14DF : E804                                dc.b    $E8,$04
(1)  144/    14E1 : [144]                        endif
(1)  145/    14E1 : A9A9 A9A9 A9A9 A9   	dc.b	nE3, nE3, nE3, nE3, nE3, nE3, nE3
(1)  146/    14E8 : (MACRO)              	smpsNoteFill        $00
(1)  146/    14E8 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  146/    14E8 :                                     ; Unique to Flamewing's modified driver
(1)  146/    14E8 :                                     dc.b    $FF,$0A,$00
(1)  146/    14E8 : =>TRUE                       else
(1)  146/    14E8 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  146/    14E8 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  146/    14E8 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  146/    14E8 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  146/    14E8 : [146]                                endif
(1)  146/    14E8 : E800                                dc.b    $E8,$00
(1)  146/    14EA : [146]                        endif
(1)  147/    14EA : A9                  	dc.b	nE3
(1)  148/    14EB : (MACRO)              	smpsNoteFill        $04
(1)  148/    14EB : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  148/    14EB :                                     ; Unique to Flamewing's modified driver
(1)  148/    14EB :                                     dc.b    $FF,$0A,$04
(1)  148/    14EB : =>TRUE                       else
(1)  148/    14EB : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  148/    14EB :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  148/    14EB : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  148/    14EB :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  148/    14EB : [148]                                endif
(1)  148/    14EB : E804                                dc.b    $E8,$04
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 32 - 01/15/2025 07:33:10 PM


(1)  148/    14ED : [148]                        endif
(1)  149/    14ED : A7A7 A7A7 A7A7 A7   	dc.b	nD3, nD3, nD3, nD3, nD3, nD3, nD3
(1)  150/    14F4 : (MACRO)              	smpsNoteFill        $00
(1)  150/    14F4 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  150/    14F4 :                                     ; Unique to Flamewing's modified driver
(1)  150/    14F4 :                                     dc.b    $FF,$0A,$00
(1)  150/    14F4 : =>TRUE                       else
(1)  150/    14F4 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  150/    14F4 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  150/    14F4 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  150/    14F4 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  150/    14F4 : [150]                                endif
(1)  150/    14F4 : E800                                dc.b    $E8,$00
(1)  150/    14F6 : [150]                        endif
(1)  151/    14F6 : A7                  	dc.b	nD3
(1)  152/    14F7 : (MACRO)              	smpsNoteFill        $04
(1)  152/    14F7 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  152/    14F7 :                                     ; Unique to Flamewing's modified driver
(1)  152/    14F7 :                                     dc.b    $FF,$0A,$04
(1)  152/    14F7 : =>TRUE                       else
(1)  152/    14F7 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  152/    14F7 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  152/    14F7 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  152/    14F7 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  152/    14F7 : [152]                                endif
(1)  152/    14F7 : E804                                dc.b    $E8,$04
(1)  152/    14F9 : [152]                        endif
(1)  153/    14F9 : A5A5 A5A5 A5        	dc.b	nC3, nC3, nC3, nC3, nC3
(1)  154/    14FE : (MACRO)              	smpsReturn
(1)  154/    14FE : =>FALSE                      if SonicDriverVer>=3
(1)  154/    14FE :                                     dc.b    $F9
(1)  154/    14FE : =>TRUE                       else
(1)  154/    14FE : E3                                  dc.b    $E3
(1)  154/    14FF : [154]                        endif
(1)  155/    14FF :                     
(1)  156/    14FF :                     ; FM3 Data
(1)  157/    14FF :                     Mus81_GHZ_FM3:
(1)  158/    14FF : (MACRO)              	smpsSetvoice        $02
(1)  158/    14FF :  (MACRO-2)                   smpsFMvoice $02
(1)  158/    14FF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  158/    14FF :                                     dc.b    $EF,$02|$80,+$81
(1)  158/    14FF : =>TRUE                       else
(1)  158/    14FF : EF02                                dc.b    $EF,$02
(1)  158/    1501 : [158]                        endif
(1)  159/    1501 : (MACRO)              	smpsPan             panLeft, $00
(1)  159/    1501 : =$0                  panNone set $00
(1)  159/    1501 : =$40                 panRight set $40
(1)  159/    1501 : =$80                 panLeft set $80
(1)  159/    1501 : =$C0                 panCentre set $C0
(1)  159/    1501 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  159/    1501 : E080                        dc.b $E0,panLeft+$00
(1)  160/    1503 : (MACRO)              	smpsCall            Mus81_GHZ_Call02
(1)  160/    1503 : F8                          dc.b    $F8
(1)  160/    1504 : =>TRUE                       if SonicDriverVer<>1
(1)  160/    1504 : 1014                                dc.w    z80_ptr(Mus81_GHZ_Call02)
(1)  160/    1506 : =>FALSE                      else
(1)  160/    1506 :                                     dc.w    Mus81_GHZ_Call02-*-1
(1)  160/    1506 : [160]                        endif
(1)  161/    1506 : (MACRO)              	smpsSetvoice        $08
(1)  161/    1506 :  (MACRO-2)                   smpsFMvoice $08
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 33 - 01/15/2025 07:33:10 PM


(1)  161/    1506 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  161/    1506 :                                     dc.b    $EF,$08|$80,+$81
(1)  161/    1506 : =>TRUE                       else
(1)  161/    1506 : EF08                                dc.b    $EF,$08
(1)  161/    1508 : [161]                        endif
(1)  162/    1508 : (MACRO)              	smpsPan             panCenter, $00
(1)  162/    1508 : =$0                  panNone set $00
(1)  162/    1508 : =$40                 panRight set $40
(1)  162/    1508 : =$80                 panLeft set $80
(1)  162/    1508 : =$C0                 panCentre set $C0
(1)  162/    1508 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  162/    1508 : E0C0                        dc.b $E0,panCenter+$00
(1)  163/    150A : (MACRO)              	smpsAlterPitch      $E8
(1)  163/    150A :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  163/    150A : =>FALSE                      if SonicDriverVer>=3
(1)  163/    150A :                                     dc.b    $FB,$E8
(1)  163/    150A : =>TRUE                       else
(1)  163/    150A : E9E8                                dc.b    $E9,$E8
(1)  163/    150C : [163]                        endif
(1)  164/    150C : (MACRO)              	smpsAlterVol        $FE
(1)  164/    150C : E6FE                        dc.b    $E6,$FE
(1)  165/    150E : 8001                	dc.b	nRst, $01
(1)  166/    1510 :                     
(1)  167/    1510 :                     Mus81_GHZ_Loop0A:
> > > A4 - S1GHZEDIT.asm(168):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $01, smpsNoAttack, nB5, $0F, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $0F
> > >       ~~~
(1)  168/    1510 :                     	dc.b	nC8, $01, smpsNoAttack, nB5, $0F, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $0F
(1)  169/    1510 : 8008                	dc.b	nRst, $08
(1)  170/    1512 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop0A
(1)  170/    1512 : F7                          dc.b    $F7
(1)  170/    1513 : 0002                        dc.b    $00,$02
(1)  170/    1515 : =>TRUE                       if SonicDriverVer<>1
(1)  170/    1515 : 1015                                dc.w    z80_ptr(Mus81_GHZ_Loop0A)
(1)  170/    1517 : =>FALSE                      else
(1)  170/    1517 :                                     dc.w    Mus81_GHZ_Loop0A-*-1
(1)  170/    1517 : [170]                        endif
> > > A4 - S1GHZEDIT.asm(171):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $01, smpsNoAttack, nB5, $07, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $07
> > >       ~~~
(1)  171/    1517 :                     	dc.b	nC8, $01, smpsNoAttack, nB5, $07, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $07
> > > A4 - S1GHZEDIT.asm(172):43: error #1010: symbol undefined
> > > nC8
> > >  dc.b nRst, $08, nCs6, $01, smpsNoAttack, nC8, $0F, nRst, $08, nC8, $01, smpsNoAttack
> > >                                           ~~~
(1)  172/    1517 :                     	dc.b	nRst, $08, nCs6, $01, smpsNoAttack, nC8, $0F, nRst, $08, nC8, $01, smpsNoAttack
(1)  173/    1517 : C80F 8008 C701      	dc.b	nB5, $0F, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $10, smpsNoAttack, $3B, nRst
             151D : E7C6 10E7 3B80    
(1)  174/    1523 : 04                  	dc.b	$04
(1)  175/    1524 :                     
(1)  176/    1524 :                     Mus81_GHZ_Loop0B:
> > > A4 - S1GHZEDIT.asm(177):53: error #1010: symbol undefined
> > > nC8
> > >  dc.b nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nC8, $01, smpsNoAttack, nB5, $0F
> > >                                                     ~~~
(1)  177/    1524 :                     	dc.b	nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nC8, $01, smpsNoAttack, nB5, $0F
> > > A4 - S1GHZEDIT.asm(178):43: error #1010: symbol undefined
> > > nC8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 34 - 01/15/2025 07:33:10 PM


> > >  dc.b nRst, $08, nCs6, $01, smpsNoAttack, nC8, $07, nRst, $08
> > >                                           ~~~
(1)  178/    1524 :                     	dc.b	nRst, $08, nCs6, $01, smpsNoAttack, nC8, $07, nRst, $08
(1)  179/    1524 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop0B
(1)  179/    1524 : F7                          dc.b    $F7
(1)  179/    1525 : 0002                        dc.b    $00,$02
(1)  179/    1527 : =>TRUE                       if SonicDriverVer<>1
(1)  179/    1527 : 2415                                dc.w    z80_ptr(Mus81_GHZ_Loop0B)
(1)  179/    1529 : =>FALSE                      else
(1)  179/    1529 :                                     dc.w    Mus81_GHZ_Loop0B-*-1
(1)  179/    1529 : [179]                        endif
> > > A4 - S1GHZEDIT.asm(180):32: error #1010: symbol undefined
> > > nC8
> > >  dc.b nCs6, $01, smpsNoAttack, nC8, $0F, nRst, $08, nC8, $01, smpsNoAttack, nB5, $28
> > >                                ~~~
(1)  180/    1529 :                     	dc.b	nCs6, $01, smpsNoAttack, nC8, $0F, nRst, $08, nC8, $01, smpsNoAttack, nB5, $28
(1)  181/    1529 : E73E                	dc.b	smpsNoAttack, $3E
(1)  182/    152B : (MACRO)              	smpsAlterVol        $02
(1)  182/    152B : E602                        dc.b    $E6,$02
(1)  183/    152D : (MACRO)              	smpsAlterPitch      $18
(1)  183/    152D :  (MACRO-2)                   smpsChangeTransposition $18
(1)  183/    152D : =>FALSE                      if SonicDriverVer>=3
(1)  183/    152D :                                     dc.b    $FB,$18
(1)  183/    152D : =>TRUE                       else
(1)  183/    152D : E918                                dc.b    $E9,$18
(1)  183/    152F : [183]                        endif
(1)  184/    152F :                     
(1)  185/    152F :                     Mus81_GHZ_Jump02:
(1)  186/    152F : (MACRO)              	smpsSetvoice        $05
(1)  186/    152F :  (MACRO-2)                   smpsFMvoice $05
(1)  186/    152F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  186/    152F :                                     dc.b    $EF,$05|$80,+$81
(1)  186/    152F : =>TRUE                       else
(1)  186/    152F : EF05                                dc.b    $EF,$05
(1)  186/    1531 : [186]                        endif
(1)  187/    1531 : (MACRO)              	smpsAlterPitch      $E8
(1)  187/    1531 :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  187/    1531 : =>FALSE                      if SonicDriverVer>=3
(1)  187/    1531 :                                     dc.b    $FB,$E8
(1)  187/    1531 : =>TRUE                       else
(1)  187/    1531 : E9E8                                dc.b    $E9,$E8
(1)  187/    1533 : [187]                        endif
(1)  188/    1533 : (MACRO)              	smpsCall            Mus81_GHZ_Call03
(1)  188/    1533 : F8                          dc.b    $F8
(1)  188/    1534 : =>TRUE                       if SonicDriverVer<>1
(1)  188/    1534 : 6116                                dc.w    z80_ptr(Mus81_GHZ_Call03)
(1)  188/    1536 : =>FALSE                      else
(1)  188/    1536 :                                     dc.w    Mus81_GHZ_Call03-*-1
(1)  188/    1536 : [188]                        endif
(1)  189/    1536 : D2                  	dc.b	nA6
(1)  190/    1537 : (MACRO)              	smpsCall            Mus81_GHZ_Call03
(1)  190/    1537 : F8                          dc.b    $F8
(1)  190/    1538 : =>TRUE                       if SonicDriverVer<>1
(1)  190/    1538 : 6116                                dc.w    z80_ptr(Mus81_GHZ_Call03)
(1)  190/    153A : =>FALSE                      else
(1)  190/    153A :                                     dc.w    Mus81_GHZ_Call03-*-1
(1)  190/    153A : [190]                        endif
(1)  191/    153A : D9                  	dc.b	nE7
(1)  192/    153B : (MACRO)              	smpsCall            Mus81_GHZ_Call03
(1)  192/    153B : F8                          dc.b    $F8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 35 - 01/15/2025 07:33:10 PM


(1)  192/    153C : =>TRUE                       if SonicDriverVer<>1
(1)  192/    153C : 6116                                dc.w    z80_ptr(Mus81_GHZ_Call03)
(1)  192/    153E : =>FALSE                      else
(1)  192/    153E :                                     dc.w    Mus81_GHZ_Call03-*-1
(1)  192/    153E : [192]                        endif
> > > A4 - S1GHZEDIT.asm(193):29: error #1010: symbol undefined
> > > nC8
> > >  dc.b nA6, nRst, $24, nRst, nC8, $04, nRst, $10, nA6, $10, nG6, $04
> > >                             ~~~
(1)  193/    153E :                     	dc.b	nA6, nRst, $24, nRst, nC8, $04, nRst, $10, nA6, $10, nG6, $04
> > > A4 - S1GHZEDIT.asm(194):24: error #1010: symbol undefined
> > > nC8
> > >  dc.b nRst, nA6, nRst, nC8, nRst
> > >                        ~~~
(1)  194/    153E :                     	dc.b	nRst, nA6, nRst, nC8, nRst
(1)  195/    153E : (MACRO)              	smpsModOff
(1)  195/    153E : =>FALSE                      if SonicDriverVer>=3
(1)  195/    153E :                                     dc.b    $FA
(1)  195/    153E : =>TRUE                       else
(1)  195/    153E : F4                                  dc.b    $F4
(1)  195/    153F : [195]                        endif
(1)  196/    153F : (MACRO)              	smpsSetvoice        $05
(1)  196/    153F :  (MACRO-2)                   smpsFMvoice $05
(1)  196/    153F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  196/    153F :                                     dc.b    $EF,$05|$80,+$81
(1)  196/    153F : =>TRUE                       else
(1)  196/    153F : EF05                                dc.b    $EF,$05
(1)  196/    1541 : [196]                        endif
(1)  197/    1541 : (MACRO)              	smpsCall            Mus81_GHZ_Call04
(1)  197/    1541 : F8                          dc.b    $F8
(1)  197/    1542 : =>TRUE                       if SonicDriverVer<>1
(1)  197/    1542 : 6A16                                dc.w    z80_ptr(Mus81_GHZ_Call04)
(1)  197/    1544 : =>FALSE                      else
(1)  197/    1544 :                                     dc.w    Mus81_GHZ_Call04-*-1
(1)  197/    1544 : [197]                        endif
> > > A4 - S1GHZEDIT.asm(198):22: error #1010: symbol undefined
> > > nC8
> > >  dc.b nG6, $04, nA6, nC8, $08, nA6
> > >                      ~~~
(1)  198/    1544 :                     	dc.b	nG6, $04, nA6, nC8, $08, nA6
(1)  199/    1544 : (MACRO)              	smpsCall            Mus81_GHZ_Call04
(1)  199/    1544 : F8                          dc.b    $F8
(1)  199/    1545 : =>TRUE                       if SonicDriverVer<>1
(1)  199/    1545 : 6A16                                dc.w    z80_ptr(Mus81_GHZ_Call04)
(1)  199/    1547 : =>FALSE                      else
(1)  199/    1547 :                                     dc.w    Mus81_GHZ_Call04-*-1
(1)  199/    1547 : [199]                        endif
> > > A4 - S1GHZEDIT.asm(200):22: error #1010: symbol undefined
> > > nC8
> > >  dc.b nG6, $04, nA6, nC8, $08, nE7
> > >                      ~~~
(1)  200/    1547 :                     	dc.b	nG6, $04, nA6, nC8, $08, nE7
(1)  201/    1547 : (MACRO)              	smpsCall            Mus81_GHZ_Call04
(1)  201/    1547 : F8                          dc.b    $F8
(1)  201/    1548 : =>TRUE                       if SonicDriverVer<>1
(1)  201/    1548 : 6A16                                dc.w    z80_ptr(Mus81_GHZ_Call04)
(1)  201/    154A : =>FALSE                      else
(1)  201/    154A :                                     dc.w    Mus81_GHZ_Call04-*-1
(1)  201/    154A : [201]                        endif
> > > A4 - S1GHZEDIT.asm(202):22: error #1010: symbol undefined
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 36 - 01/15/2025 07:33:10 PM


> > > nC8
> > >  dc.b nG6, $04, nA6, nC8, $08, nA6
> > >                      ~~~
(1)  202/    154A :                     	dc.b	nG6, $04, nA6, nC8, $08, nA6
(1)  203/    154A : (MACRO)              	smpsAlterVol        $06
(1)  203/    154A : E606                        dc.b    $E6,$06
(1)  204/    154C : BDBA 0480 1680      	dc.b	nC5, nA4, $04, nRst, $16, nRst
(1)  205/    1552 : (MACRO)              	smpsAlterVol        $FA
(1)  205/    1552 : E6FA                        dc.b    $E6,$FA
> > > A4 - S1GHZEDIT.asm(206):23: error #1010: symbol undefined
> > > nC8
> > >  dc.b nE7, $08, nRst, nC8, nRst, nA6, nA6, nA6, $04, nRst, nC8, nRst
> > >                       ~~~
(1)  206/    1554 :                     	dc.b	nE7, $08, nRst, nC8, nRst, nA6, nA6, nA6, $04, nRst, nC8, nRst
(1)  207/    1554 : D980                	dc.b	nE7, nRst
(1)  208/    1556 : (MACRO)              	smpsAlterPitch      $18
(1)  208/    1556 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  208/    1556 : =>FALSE                      if SonicDriverVer>=3
(1)  208/    1556 :                                     dc.b    $FB,$18
(1)  208/    1556 : =>TRUE                       else
(1)  208/    1556 : E918                                dc.b    $E9,$18
(1)  208/    1558 : [208]                        endif
(1)  209/    1558 : (MACRO)              	smpsSetvoice        $07
(1)  209/    1558 :  (MACRO-2)                   smpsFMvoice $07
(1)  209/    1558 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  209/    1558 :                                     dc.b    $EF,$07|$80,+$81
(1)  209/    1558 : =>TRUE                       else
(1)  209/    1558 : EF07                                dc.b    $EF,$07
(1)  209/    155A : [209]                        endif
(1)  210/    155A : (MACRO)              	smpsPan             panCenter, $00
(1)  210/    155A : =$0                  panNone set $00
(1)  210/    155A : =$40                 panRight set $40
(1)  210/    155A : =$80                 panLeft set $80
(1)  210/    155A : =$C0                 panCentre set $C0
(1)  210/    155A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  210/    155A : E0C0                        dc.b $E0,panCenter+$00
(1)  211/    155C : (MACRO)              	smpsNoteFill        $1E
(1)  211/    155C : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  211/    155C :                                     ; Unique to Flamewing's modified driver
(1)  211/    155C :                                     dc.b    $FF,$0A,$1E
(1)  211/    155C : =>TRUE                       else
(1)  211/    155C : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  211/    155C :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  211/    155C : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  211/    155C :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  211/    155C : [211]                                endif
(1)  211/    155C : E81E                                dc.b    $E8,$1E
(1)  211/    155E : [211]                        endif
(1)  212/    155E : (MACRO)              	smpsAlterVol        $06
(1)  212/    155E : E606                        dc.b    $E6,$06
(1)  213/    1560 : C218 1818 1808      	dc.b	nF5, $18, $18, $18, $18, $08, nRst, nF5, nRst, nE5, $18, $18
             1566 : 80C2 80C1 1818    
(1)  214/    156C : 1818 0880 C180      	dc.b	$18, $18, $08, nRst, nE5, nRst, nEb5, $18, $18, $18, $18, $08
             1572 : C018 1818 1808    
(1)  215/    1578 : 80C0 80C6 1818      	dc.b	nRst, nEb5, nRst, nA5, $18, $18, $18, $18, $08, nRst, nA5, nRst
             157E : 1818 0880 C680    
(1)  216/    1584 : (MACRO)              	smpsAlterVol        $FA
(1)  216/    1584 : E6FA                        dc.b    $E6,$FA
(1)  217/    1586 : (MACRO)              	smpsNoteFill        $00
(1)  217/    1586 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 37 - 01/15/2025 07:33:10 PM


(1)  217/    1586 :                                     ; Unique to Flamewing's modified driver
(1)  217/    1586 :                                     dc.b    $FF,$0A,$00
(1)  217/    1586 : =>TRUE                       else
(1)  217/    1586 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  217/    1586 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  217/    1586 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  217/    1586 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  217/    1586 : [217]                                endif
(1)  217/    1586 : E800                                dc.b    $E8,$00
(1)  217/    1588 : [217]                        endif
(1)  218/    1588 : (MACRO)              	smpsJump            Mus81_GHZ_Jump02
(1)  218/    1588 : F6                          dc.b    $F6
(1)  218/    1589 : =>TRUE                       if SonicDriverVer<>1
(1)  218/    1589 : 2F15                                dc.w    z80_ptr(Mus81_GHZ_Jump02)
(1)  218/    158B : =>FALSE                      else
(1)  218/    158B :                                     dc.w    Mus81_GHZ_Jump02-*-1
(1)  218/    158B : [218]                        endif
(1)  219/    158B :                     
(1)  220/    158B :                     Mus81_GHZ_Call03:
> > > A4 - S1GHZEDIT.asm(221):39: error #1010: symbol undefined
> > > nC8
> > >  dc.b nRst, $34, nRst, nG6, $04, nA6, nC8, $08
> > >                                       ~~~
(1)  221/    158B :                     	dc.b	nRst, $34, nRst, nG6, $04, nA6, nC8, $08
(1)  222/    158B : (MACRO)              	smpsReturn
(1)  222/    158B : =>FALSE                      if SonicDriverVer>=3
(1)  222/    158B :                                     dc.b    $F9
(1)  222/    158B : =>TRUE                       else
(1)  222/    158B : E3                                  dc.b    $E3
(1)  222/    158C : [222]                        endif
(1)  223/    158C :                     
(1)  224/    158C :                     Mus81_GHZ_Call04:
(1)  225/    158C : (MACRO)              	smpsAlterVol        $06
(1)  225/    158C : E606                        dc.b    $E6,$06
(1)  226/    158E : C108 BD04 8012      	dc.b	nE5, $08, nC5, $04, nRst, $12, nRst, nE5, $08, nC5, $04, nRst
             1594 : 80C1 08BD 0480    
(1)  227/    159A : BF08 BC04 800E 80   	dc.b	nD5, $08, nB4, $04, nRst, $0E, nRst
(1)  228/    15A1 : (MACRO)              	smpsAlterVol        $FA
(1)  228/    15A1 : E6FA                        dc.b    $E6,$FA
(1)  229/    15A3 : (MACRO)              	smpsReturn
(1)  229/    15A3 : =>FALSE                      if SonicDriverVer>=3
(1)  229/    15A3 :                                     dc.b    $F9
(1)  229/    15A3 : =>TRUE                       else
(1)  229/    15A3 : E3                                  dc.b    $E3
(1)  229/    15A4 : [229]                        endif
(1)  230/    15A4 :                     
(1)  231/    15A4 :                     ; FM4 Data
(1)  232/    15A4 :                     Mus81_GHZ_FM4:
(1)  233/    15A4 : (MACRO)              	smpsSetvoice        $08
(1)  233/    15A4 :  (MACRO-2)                   smpsFMvoice $08
(1)  233/    15A4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  233/    15A4 :                                     dc.b    $EF,$08|$80,+$81
(1)  233/    15A4 : =>TRUE                       else
(1)  233/    15A4 : EF08                                dc.b    $EF,$08
(1)  233/    15A6 : [233]                        endif
(1)  234/    15A6 : 8020 80             	dc.b	nRst, $20, nRst
(1)  235/    15A9 : (MACRO)              	smpsPan             panLeft, $00
(1)  235/    15A9 : =$0                  panNone set $00
(1)  235/    15A9 : =$40                 panRight set $40
(1)  235/    15A9 : =$80                 panLeft set $80
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 38 - 01/15/2025 07:33:10 PM


(1)  235/    15A9 : =$C0                 panCentre set $C0
(1)  235/    15A9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  235/    15A9 : E080                        dc.b $E0,panLeft+$00
(1)  236/    15AB : (MACRO)              	smpsAlterPitch      $E8
(1)  236/    15AB :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  236/    15AB : =>FALSE                      if SonicDriverVer>=3
(1)  236/    15AB :                                     dc.b    $FB,$E8
(1)  236/    15AB : =>TRUE                       else
(1)  236/    15AB : E9E8                                dc.b    $E9,$E8
(1)  236/    15AD : [236]                        endif
(1)  237/    15AD : (MACRO)              	smpsAlterVol        $0A
(1)  237/    15AD : E60A                        dc.b    $E6,$0A
(1)  238/    15AF :                     
(1)  239/    15AF :                     Mus81_GHZ_Loop08:
(1)  240/    15AF : C501 E7C4 0F80      	dc.b	nAb5, $01, smpsNoAttack, nG5, $0F, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $0F
             15B5 : 08C3 01E7 C20F    
(1)  241/    15BB : 8008                	dc.b	nRst, $08
(1)  242/    15BD : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop08
(1)  242/    15BD : F7                          dc.b    $F7
(1)  242/    15BE : 0002                        dc.b    $00,$02
(1)  242/    15C0 : =>TRUE                       if SonicDriverVer<>1
(1)  242/    15C0 : AF15                                dc.w    z80_ptr(Mus81_GHZ_Loop08)
(1)  242/    15C2 : =>FALSE                      else
(1)  242/    15C2 :                                     dc.w    Mus81_GHZ_Loop08-*-1
(1)  242/    15C2 : [242]                        endif
(1)  243/    15C2 : C501 E7C4 0780      	dc.b	nAb5, $01, smpsNoAttack, nG5, $07, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $07
             15C8 : 08C3 01E7 C207    
(1)  244/    15CE : 8008 C701 E7C6      	dc.b	nRst, $08, nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nAb5, $01, smpsNoAttack
             15D4 : 0F80 08C5 01E7    
(1)  245/    15DA : C40F 8008 C301      	dc.b	nG5, $0F, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $10, smpsNoAttack, $3C, nRst
             15E0 : E7C2 10E7 3C80    
(1)  246/    15E6 : 04                  	dc.b	$04
(1)  247/    15E7 :                     
(1)  248/    15E7 :                     Mus81_GHZ_Loop09:
(1)  249/    15E7 : C301 E7C2 0F80      	dc.b	nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nAb5, $01, smpsNoAttack, nG5, $0F
             15ED : 08C5 01E7 C40F    
(1)  250/    15F3 : 8008 C701 E7C6      	dc.b	nRst, $08, nBb5, $01, smpsNoAttack, nA5, $07, nRst, $08
             15F9 : 0780 08          
(1)  251/    15FC : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop09
(1)  251/    15FC : F7                          dc.b    $F7
(1)  251/    15FD : 0002                        dc.b    $00,$02
(1)  251/    15FF : =>TRUE                       if SonicDriverVer<>1
(1)  251/    15FF : E715                                dc.w    z80_ptr(Mus81_GHZ_Loop09)
(1)  251/    1601 : =>FALSE                      else
(1)  251/    1601 :                                     dc.w    Mus81_GHZ_Loop09-*-1
(1)  251/    1601 : [251]                        endif
(1)  252/    1601 : C701 E7C6 0F80      	dc.b	nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nAb5, $01, smpsNoAttack, nG5, $28
             1607 : 08C5 01E7 C428    
(1)  253/    160D : E73F                	dc.b	smpsNoAttack, $3F
(1)  254/    160F : (MACRO)              	smpsAlterVol        $F6
(1)  254/    160F : E6F6                        dc.b    $E6,$F6
(1)  255/    1611 : (MACRO)              	smpsAlterPitch      $18
(1)  255/    1611 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  255/    1611 : =>FALSE                      if SonicDriverVer>=3
(1)  255/    1611 :                                     dc.b    $FB,$18
(1)  255/    1611 : =>TRUE                       else
(1)  255/    1611 : E918                                dc.b    $E9,$18
(1)  255/    1613 : [255]                        endif
(1)  256/    1613 : (MACRO)              	smpsModOff
(1)  256/    1613 : =>FALSE                      if SonicDriverVer>=3
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 39 - 01/15/2025 07:33:10 PM


(1)  256/    1613 :                                     dc.b    $FA
(1)  256/    1613 : =>TRUE                       else
(1)  256/    1613 : F4                                  dc.b    $F4
(1)  256/    1614 : [256]                        endif
(1)  257/    1614 :                     
(1)  258/    1614 :                     Mus81_GHZ_Jump01:
(1)  259/    1614 : (MACRO)              	smpsSetvoice        $05
(1)  259/    1614 :  (MACRO-2)                   smpsFMvoice $05
(1)  259/    1614 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  259/    1614 :                                     dc.b    $EF,$05|$80,+$81
(1)  259/    1614 : =>TRUE                       else
(1)  259/    1614 : EF05                                dc.b    $EF,$05
(1)  259/    1616 : [259]                        endif
(1)  260/    1616 : (MACRO)              	smpsAlterPitch      $E8
(1)  260/    1616 :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  260/    1616 : =>FALSE                      if SonicDriverVer>=3
(1)  260/    1616 :                                     dc.b    $FB,$E8
(1)  260/    1616 : =>TRUE                       else
(1)  260/    1616 : E9E8                                dc.b    $E9,$E8
(1)  260/    1618 : [260]                        endif
(1)  261/    1618 : (MACRO)              	smpsAlterVol        $18
(1)  261/    1618 : E618                        dc.b    $E6,$18
(1)  262/    161A : (MACRO)              	smpsPan             panLeft, $00
(1)  262/    161A : =$0                  panNone set $00
(1)  262/    161A : =$40                 panRight set $40
(1)  262/    161A : =$80                 panLeft set $80
(1)  262/    161A : =$C0                 panCentre set $C0
(1)  262/    161A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  262/    161A : E080                        dc.b $E0,panLeft+$00
(1)  263/    161C : (MACRO)              	smpsAlterVol        $FD
(1)  263/    161C : E6FD                        dc.b    $E6,$FD
(1)  264/    161E : (MACRO)              	smpsCall            Mus81_GHZ_Call01
(1)  264/    161E : F8                          dc.b    $F8
(1)  264/    161F : =>TRUE                       if SonicDriverVer<>1
(1)  264/    161F : 8317                                dc.w    z80_ptr(Mus81_GHZ_Call01)
(1)  264/    1621 : =>FALSE                      else
(1)  264/    1621 :                                     dc.w    Mus81_GHZ_Call01-*-1
(1)  264/    1621 : [264]                        endif
(1)  265/    1621 : BFBF C1C1 BDBD      	dc.b	nD5, nD5, nE5, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5
             1627 : BABA B6B6 BFBF    
(1)  266/    162D : BCBC B8B8 BFBF      	dc.b	nB4, nB4, nG4, nG4, nD5, nD5
(1)  267/    1633 : (MACRO)              	smpsCall            Mus81_GHZ_Call01
(1)  267/    1633 : F8                          dc.b    $F8
(1)  267/    1634 : =>TRUE                       if SonicDriverVer<>1
(1)  267/    1634 : 8317                                dc.w    z80_ptr(Mus81_GHZ_Call01)
(1)  267/    1636 : =>FALSE                      else
(1)  267/    1636 :                                     dc.w    Mus81_GHZ_Call01-*-1
(1)  267/    1636 : [267]                        endif
(1)  268/    1636 : B5B5 BDBD BABA      	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
             163C : B6B6 B3B3 BCBC    
(1)  269/    1642 : (MACRO)              	smpsAlterVol        $03
(1)  269/    1642 : E603                        dc.b    $E6,$03
(1)  270/    1644 : (MACRO)              	smpsAlterPitch      $18
(1)  270/    1644 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  270/    1644 : =>FALSE                      if SonicDriverVer>=3
(1)  270/    1644 :                                     dc.b    $FB,$18
(1)  270/    1644 : =>TRUE                       else
(1)  270/    1644 : E918                                dc.b    $E9,$18
(1)  270/    1646 : [270]                        endif
(1)  271/    1646 : (MACRO)              	smpsAlterPitch      $F8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 40 - 01/15/2025 07:33:10 PM


(1)  271/    1646 :  (MACRO-2)                   smpsChangeTransposition $F8
(1)  271/    1646 : =>FALSE                      if SonicDriverVer>=3
(1)  271/    1646 :                                     dc.b    $FB,$F8
(1)  271/    1646 : =>TRUE                       else
(1)  271/    1646 : E9F8                                dc.b    $E9,$F8
(1)  271/    1648 : [271]                        endif
(1)  272/    1648 : (MACRO)              	smpsSetvoice        $04
(1)  272/    1648 :  (MACRO-2)                   smpsFMvoice $04
(1)  272/    1648 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  272/    1648 :                                     dc.b    $EF,$04|$80,+$81
(1)  272/    1648 : =>TRUE                       else
(1)  272/    1648 : EF04                                dc.b    $EF,$04
(1)  272/    164A : [272]                        endif
(1)  273/    164A : D010 D2D4           	dc.b	nG6, $10, nA6, nB6
(1)  274/    164E : (MACRO)              	smpsAlterVol        $F9
(1)  274/    164E : E6F9                        dc.b    $E6,$F9
> > > A4 - S1GHZEDIT.asm(275):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6, nC8, $28, smpsNoAttack, $28
> > >       ~~~
(1)  275/    1650 :                     	dc.b	nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6, nC8, $28, smpsNoAttack, $28
> > > A4 - S1GHZEDIT.asm(276):27: error #1010: symbol undefined
> > > nC8
> > >  dc.b nB6, $10, nG6, nB6, nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6
> > >                           ~~~
(1)  276/    1650 :                     	dc.b	nB6, $10, nG6, nB6, nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6
> > > A4 - S1GHZEDIT.asm(277):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $40, smpsNoAttack, $40
> > >       ~~~
(1)  277/    1650 :                     	dc.b	nC8, $40, smpsNoAttack, $40
(1)  278/    1650 : (MACRO)              	smpsAlterPitch      $10
(1)  278/    1650 :  (MACRO-2)                   smpsChangeTransposition $10
(1)  278/    1650 : =>FALSE                      if SonicDriverVer>=3
(1)  278/    1650 :                                     dc.b    $FB,$10
(1)  278/    1650 : =>TRUE                       else
(1)  278/    1650 : E910                                dc.b    $E9,$10
(1)  278/    1652 : [278]                        endif
(1)  279/    1652 : (MACRO)              	smpsAlterVol        $07
(1)  279/    1652 : E607                        dc.b    $E6,$07
(1)  280/    1654 : (MACRO)              	smpsAlterVol        $E8
(1)  280/    1654 : E6E8                        dc.b    $E6,$E8
(1)  281/    1656 : (MACRO)              	smpsSetvoice        $07
(1)  281/    1656 :  (MACRO-2)                   smpsFMvoice $07
(1)  281/    1656 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  281/    1656 :                                     dc.b    $EF,$07|$80,+$81
(1)  281/    1656 : =>TRUE                       else
(1)  281/    1656 : EF07                                dc.b    $EF,$07
(1)  281/    1658 : [281]                        endif
(1)  282/    1658 : (MACRO)              	smpsNoteFill        $1E
(1)  282/    1658 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  282/    1658 :                                     ; Unique to Flamewing's modified driver
(1)  282/    1658 :                                     dc.b    $FF,$0A,$1E
(1)  282/    1658 : =>TRUE                       else
(1)  282/    1658 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  282/    1658 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  282/    1658 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  282/    1658 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  282/    1658 : [282]                                endif
(1)  282/    1658 : E81E                                dc.b    $E8,$1E
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 41 - 01/15/2025 07:33:10 PM


(1)  282/    165A : [282]                        endif
(1)  283/    165A : (MACRO)              	smpsPan             panCenter, $00
(1)  283/    165A : =$0                  panNone set $00
(1)  283/    165A : =$40                 panRight set $40
(1)  283/    165A : =$80                 panLeft set $80
(1)  283/    165A : =$C0                 panCentre set $C0
(1)  283/    165A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  283/    165A : E0C0                        dc.b $E0,panCenter+$00
(1)  284/    165C : (MACRO)              	smpsAlterVol        $12
(1)  284/    165C : E612                        dc.b    $E6,$12
(1)  285/    165E : BF18 1818 1808      	dc.b	nD5, $18, $18, $18, $18, $08, nRst, nD5, nRst, nC5, $18, $18
             1664 : 80BF 80BD 1818    
(1)  286/    166A : 1818 0880 BD80      	dc.b	$18, $18, $08, nRst, nC5, nRst, nC5, $18, $18, $18, $18, $08
             1670 : BD18 1818 1808    
(1)  287/    1676 : 80BD 80C2 1818      	dc.b	nRst, nC5, nRst, nF5, $18, $18, $18, $18, $08, nRst, nF5, nRst
             167C : 1818 0880 C280    
(1)  288/    1682 : (MACRO)              	smpsAlterVol        $EE
(1)  288/    1682 : E6EE                        dc.b    $E6,$EE
(1)  289/    1684 : (MACRO)              	smpsNoteFill        $00
(1)  289/    1684 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  289/    1684 :                                     ; Unique to Flamewing's modified driver
(1)  289/    1684 :                                     dc.b    $FF,$0A,$00
(1)  289/    1684 : =>TRUE                       else
(1)  289/    1684 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  289/    1684 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  289/    1684 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  289/    1684 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  289/    1684 : [289]                                endif
(1)  289/    1684 : E800                                dc.b    $E8,$00
(1)  289/    1686 : [289]                        endif
(1)  290/    1686 : (MACRO)              	smpsJump            Mus81_GHZ_Jump01
(1)  290/    1686 : F6                          dc.b    $F6
(1)  290/    1687 : =>TRUE                       if SonicDriverVer<>1
(1)  290/    1687 : 1416                                dc.w    z80_ptr(Mus81_GHZ_Jump01)
(1)  290/    1689 : =>FALSE                      else
(1)  290/    1689 :                                     dc.w    Mus81_GHZ_Jump01-*-1
(1)  290/    1689 : [290]                        endif
(1)  291/    1689 :                     
(1)  292/    1689 :                     Mus81_GHZ_Call01:
(1)  293/    1689 : C108 C1BD BDBA      	dc.b	nE5, $08, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
             168F : BAB6 B6BF BFBC    
(1)  294/    1695 : BCB8 B8             	dc.b	nB4, nG4, nG4
(1)  295/    1698 : (MACRO)              	smpsReturn
(1)  295/    1698 : =>FALSE                      if SonicDriverVer>=3
(1)  295/    1698 :                                     dc.b    $F9
(1)  295/    1698 : =>TRUE                       else
(1)  295/    1698 : E3                                  dc.b    $E3
(1)  295/    1699 : [295]                        endif
(1)  296/    1699 :                     
(1)  297/    1699 :                     ; FM5 Data
(1)  298/    1699 :                     Mus81_GHZ_FM5:
(1)  299/    1699 : (MACRO)              	smpsSetvoice        $03
(1)  299/    1699 :  (MACRO-2)                   smpsFMvoice $03
(1)  299/    1699 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  299/    1699 :                                     dc.b    $EF,$03|$80,+$81
(1)  299/    1699 : =>TRUE                       else
(1)  299/    1699 : EF03                                dc.b    $EF,$03
(1)  299/    169B : [299]                        endif
(1)  300/    169B : 8020 80             	dc.b	nRst, $20, nRst
(1)  301/    169E : (MACRO)              	smpsSetvoice        $08
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 42 - 01/15/2025 07:33:10 PM


(1)  301/    169E :  (MACRO-2)                   smpsFMvoice $08
(1)  301/    169E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  301/    169E :                                     dc.b    $EF,$08|$80,+$81
(1)  301/    169E : =>TRUE                       else
(1)  301/    169E : EF08                                dc.b    $EF,$08
(1)  301/    16A0 : [301]                        endif
(1)  302/    16A0 : (MACRO)              	smpsPan             panRight, $00
(1)  302/    16A0 : =$0                  panNone set $00
(1)  302/    16A0 : =$40                 panRight set $40
(1)  302/    16A0 : =$80                 panLeft set $80
(1)  302/    16A0 : =$C0                 panCentre set $C0
(1)  302/    16A0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  302/    16A0 : E040                        dc.b $E0,panRight+$00
(1)  303/    16A2 : (MACRO)              	smpsAlterPitch      $E8
(1)  303/    16A2 :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  303/    16A2 : =>FALSE                      if SonicDriverVer>=3
(1)  303/    16A2 :                                     dc.b    $FB,$E8
(1)  303/    16A2 : =>TRUE                       else
(1)  303/    16A2 : E9E8                                dc.b    $E9,$E8
(1)  303/    16A4 : [303]                        endif
(1)  304/    16A4 : (MACRO)              	smpsAlterVol        $F2
(1)  304/    16A4 : E6F2                        dc.b    $E6,$F2
(1)  305/    16A6 :                     
(1)  306/    16A6 :                     Mus81_GHZ_Loop02:
(1)  307/    16A6 : C201 E7C1 0F80      	dc.b	nF5, $01, smpsNoAttack, nE5, $0F, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $0F
             16AC : 08C0 01E7 BF0F    
(1)  308/    16B2 : 8008                	dc.b	nRst, $08
(1)  309/    16B4 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop02
(1)  309/    16B4 : F7                          dc.b    $F7
(1)  309/    16B5 : 0002                        dc.b    $00,$02
(1)  309/    16B7 : =>TRUE                       if SonicDriverVer<>1
(1)  309/    16B7 : A616                                dc.w    z80_ptr(Mus81_GHZ_Loop02)
(1)  309/    16B9 : =>FALSE                      else
(1)  309/    16B9 :                                     dc.w    Mus81_GHZ_Loop02-*-1
(1)  309/    16B9 : [309]                        endif
(1)  310/    16B9 : C201 E7C1 0780      	dc.b	nF5, $01, smpsNoAttack, nE5, $07, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $07
             16BF : 08C0 01E7 BF07    
(1)  311/    16C5 : 8008 C301 E7C2      	dc.b	nRst, $08, nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nF5, $01, smpsNoAttack
             16CB : 0F80 08C2 01E7    
(1)  312/    16D1 : C10F 8008 C001      	dc.b	nE5, $0F, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $10, smpsNoAttack, $3C, nRst
             16D7 : E7BF 10E7 3C80    
(1)  313/    16DD : 04                  	dc.b	$04
(1)  314/    16DE :                     
(1)  315/    16DE :                     Mus81_GHZ_Loop03:
(1)  316/    16DE : C001 E7BF 0F80      	dc.b	nEb5, $01, smpsNoAttack, nD5, $0F, nRst, $08, nF5, $01, smpsNoAttack, nE5, $0F
             16E4 : 08C2 01E7 C10F    
(1)  317/    16EA : 8008 C301 E7C2      	dc.b	nRst, $08, nFs5, $01, smpsNoAttack, nF5, $07, nRst, $08
             16F0 : 0780 08          
(1)  318/    16F3 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop03
(1)  318/    16F3 : F7                          dc.b    $F7
(1)  318/    16F4 : 0002                        dc.b    $00,$02
(1)  318/    16F6 : =>TRUE                       if SonicDriverVer<>1
(1)  318/    16F6 : DE16                                dc.w    z80_ptr(Mus81_GHZ_Loop03)
(1)  318/    16F8 : =>FALSE                      else
(1)  318/    16F8 :                                     dc.w    Mus81_GHZ_Loop03-*-1
(1)  318/    16F8 : [318]                        endif
(1)  319/    16F8 : C301 E7C2 0F80      	dc.b	nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nF5, $01, smpsNoAttack, nE5, $28
             16FE : 08C2 01E7 C128    
(1)  320/    1704 : E73F                	dc.b	smpsNoAttack, $3F
(1)  321/    1706 : (MACRO)              	smpsAlterPitch      $18
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 43 - 01/15/2025 07:33:10 PM


(1)  321/    1706 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  321/    1706 : =>FALSE                      if SonicDriverVer>=3
(1)  321/    1706 :                                     dc.b    $FB,$18
(1)  321/    1706 : =>TRUE                       else
(1)  321/    1706 : E918                                dc.b    $E9,$18
(1)  321/    1708 : [321]                        endif
(1)  322/    1708 : (MACRO)              	smpsAlterVol        $0E
(1)  322/    1708 : E60E                        dc.b    $E6,$0E
(1)  323/    170A :                     
(1)  324/    170A :                     Mus81_GHZ_Jump00:
(1)  325/    170A : (MACRO)              	smpsSetvoice        $05
(1)  325/    170A :  (MACRO-2)                   smpsFMvoice $05
(1)  325/    170A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  325/    170A :                                     dc.b    $EF,$05|$80,+$81
(1)  325/    170A : =>TRUE                       else
(1)  325/    170A : EF05                                dc.b    $EF,$05
(1)  325/    170C : [325]                        endif
(1)  326/    170C : (MACRO)              	smpsAlterPitch      $E8
(1)  326/    170C :  (MACRO-2)                   smpsChangeTransposition $E8
(1)  326/    170C : =>FALSE                      if SonicDriverVer>=3
(1)  326/    170C :                                     dc.b    $FB,$E8
(1)  326/    170C : =>TRUE                       else
(1)  326/    170C : E9E8                                dc.b    $E9,$E8
(1)  326/    170E : [326]                        endif
(1)  327/    170E : (MACRO)              	smpsPan             panRight, $00
(1)  327/    170E : =$0                  panNone set $00
(1)  327/    170E : =$40                 panRight set $40
(1)  327/    170E : =$80                 panLeft set $80
(1)  327/    170E : =$C0                 panCentre set $C0
(1)  327/    170E : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  327/    170E : E040                        dc.b $E0,panRight+$00
(1)  328/    1710 : (MACRO)              	smpsAlterVol        $FD
(1)  328/    1710 : E6FD                        dc.b    $E6,$FD
(1)  329/    1712 : (MACRO)              	smpsCall            Mus81_GHZ_Call00
(1)  329/    1712 : F8                          dc.b    $F8
(1)  329/    1713 : =>TRUE                       if SonicDriverVer<>1
(1)  329/    1713 : A218                                dc.w    z80_ptr(Mus81_GHZ_Call00)
(1)  329/    1715 : =>FALSE                      else
(1)  329/    1715 :                                     dc.w    Mus81_GHZ_Call00-*-1
(1)  329/    1715 : [329]                        endif
(1)  330/    1715 : BFBF C1C1 BDBD      	dc.b	nD5, nD5, nE5, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5
             171B : BABA B6B6 BFBF    
(1)  331/    1721 : BCBC B8B8 BFBF      	dc.b	nB4, nB4, nG4, nG4, nD5, nD5
(1)  332/    1727 : (MACRO)              	smpsCall            Mus81_GHZ_Call00
(1)  332/    1727 : F8                          dc.b    $F8
(1)  332/    1728 : =>TRUE                       if SonicDriverVer<>1
(1)  332/    1728 : A218                                dc.w    z80_ptr(Mus81_GHZ_Call00)
(1)  332/    172A : =>FALSE                      else
(1)  332/    172A :                                     dc.w    Mus81_GHZ_Call00-*-1
(1)  332/    172A : [332]                        endif
(1)  333/    172A : B5B5 BDBD BABA      	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
             1730 : B6B6 B3B3 BCBC    
(1)  334/    1736 : (MACRO)              	smpsAlterPitch      $18
(1)  334/    1736 :  (MACRO-2)                   smpsChangeTransposition $18
(1)  334/    1736 : =>FALSE                      if SonicDriverVer>=3
(1)  334/    1736 :                                     dc.b    $FB,$18
(1)  334/    1736 : =>TRUE                       else
(1)  334/    1736 : E918                                dc.b    $E9,$18
(1)  334/    1738 : [334]                        endif
(1)  335/    1738 : (MACRO)              	smpsAlterVol        $03
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 44 - 01/15/2025 07:33:10 PM


(1)  335/    1738 : E603                        dc.b    $E6,$03
(1)  336/    173A : (MACRO)              	smpsAlterPitch      $F8
(1)  336/    173A :  (MACRO-2)                   smpsChangeTransposition $F8
(1)  336/    173A : =>FALSE                      if SonicDriverVer>=3
(1)  336/    173A :                                     dc.b    $FB,$F8
(1)  336/    173A : =>TRUE                       else
(1)  336/    173A : E9F8                                dc.b    $E9,$F8
(1)  336/    173C : [336]                        endif
(1)  337/    173C : (MACRO)              	smpsSetvoice        $04
(1)  337/    173C :  (MACRO-2)                   smpsFMvoice $04
(1)  337/    173C : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  337/    173C :                                     dc.b    $EF,$04|$80,+$81
(1)  337/    173C : =>TRUE                       else
(1)  337/    173C : EF04                                dc.b    $EF,$04
(1)  337/    173E : [337]                        endif
(1)  338/    173E : (MACRO)              	smpsAlterNote       $02
(1)  338/    173E :  (MACRO-2)                   smpsDetune      $02
(1)  338/    173E : E102                        dc.b    $E1,$02
(1)  339/    1740 : D010 D2D4           	dc.b	nG6, $10, nA6, nB6
(1)  340/    1744 : (MACRO)              	smpsAlterVol        $F9
(1)  340/    1744 : E6F9                        dc.b    $E6,$F9
> > > A4 - S1GHZEDIT.asm(341):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6, nC8, $28, smpsNoAttack, $28
> > >       ~~~
(1)  341/    1746 :                     	dc.b	nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6, nC8, $28, smpsNoAttack, $28
> > > A4 - S1GHZEDIT.asm(342):27: error #1010: symbol undefined
> > > nC8
> > >  dc.b nB6, $10, nG6, nB6, nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6
> > >                           ~~~
(1)  342/    1746 :                     	dc.b	nB6, $10, nG6, nB6, nC8, $28, smpsNoAttack, $28, nD8, $10, nB6, nG6
> > > A4 - S1GHZEDIT.asm(343):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $40, smpsNoAttack, $40
> > >       ~~~
(1)  343/    1746 :                     	dc.b	nC8, $40, smpsNoAttack, $40
(1)  344/    1746 : (MACRO)              	smpsAlterPitch      $10
(1)  344/    1746 :  (MACRO-2)                   smpsChangeTransposition $10
(1)  344/    1746 : =>FALSE                      if SonicDriverVer>=3
(1)  344/    1746 :                                     dc.b    $FB,$10
(1)  344/    1746 : =>TRUE                       else
(1)  344/    1746 : E910                                dc.b    $E9,$10
(1)  344/    1748 : [344]                        endif
(1)  345/    1748 : (MACRO)              	smpsAlterNote       $00
(1)  345/    1748 :  (MACRO-2)                   smpsDetune      $00
(1)  345/    1748 : E100                        dc.b    $E1,$00
(1)  346/    174A : (MACRO)              	smpsSetvoice        $04
(1)  346/    174A :  (MACRO-2)                   smpsFMvoice $04
(1)  346/    174A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  346/    174A :                                     dc.b    $EF,$04|$80,+$81
(1)  346/    174A : =>TRUE                       else
(1)  346/    174A : EF04                                dc.b    $EF,$04
(1)  346/    174C : [346]                        endif
(1)  347/    174C : (MACRO)              	smpsAlterPitch      $F8
(1)  347/    174C :  (MACRO-2)                   smpsChangeTransposition $F8
(1)  347/    174C : =>FALSE                      if SonicDriverVer>=3
(1)  347/    174C :                                     dc.b    $FB,$F8
(1)  347/    174C : =>TRUE                       else
(1)  347/    174C : E9F8                                dc.b    $E9,$F8
(1)  347/    174E : [347]                        endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 45 - 01/15/2025 07:33:10 PM


(1)  348/    174E : (MACRO)              	smpsAlterVol        $FA
(1)  348/    174E : E6FA                        dc.b    $E6,$FA
(1)  349/    1750 :                     
(1)  350/    1750 :                     Mus81_GHZ_Loop04:
> > > A4 - S1GHZEDIT.asm(351):23: error #1010: symbol undefined
> > > nD8
> > >  dc.b nBb6, $08, nF6, nD8, nF6, nBb6, nF6, nD8, nF6
> > >                       ~~~
(1)  351/    1750 :                     	dc.b	nBb6, $08, nF6, nD8, nF6, nBb6, nF6, nD8, nF6
(1)  352/    1750 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop04
(1)  352/    1750 : F7                          dc.b    $F7
(1)  352/    1751 : 0002                        dc.b    $00,$02
(1)  352/    1753 : =>TRUE                       if SonicDriverVer<>1
(1)  352/    1753 : 5017                                dc.w    z80_ptr(Mus81_GHZ_Loop04)
(1)  352/    1755 : =>FALSE                      else
(1)  352/    1755 :                                     dc.w    Mus81_GHZ_Loop04-*-1
(1)  352/    1755 : [352]                        endif
(1)  353/    1755 :                     
(1)  354/    1755 :                     Mus81_GHZ_Loop05:
> > > A4 - S1GHZEDIT.asm(355):17: error #1010: symbol undefined
> > > nC8
> > >  dc.b nA6, nE7, nC8, nE7, nA6, nE7, nC8, nE7
> > >                 ~~~
(1)  355/    1755 :                     	dc.b	nA6, nE7, nC8, nE7, nA6, nE7, nC8, nE7
(1)  356/    1755 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop05
(1)  356/    1755 : F7                          dc.b    $F7
(1)  356/    1756 : 0002                        dc.b    $00,$02
(1)  356/    1758 : =>TRUE                       if SonicDriverVer<>1
(1)  356/    1758 : 5517                                dc.w    z80_ptr(Mus81_GHZ_Loop05)
(1)  356/    175A : =>FALSE                      else
(1)  356/    175A :                                     dc.w    Mus81_GHZ_Loop05-*-1
(1)  356/    175A : [356]                        endif
(1)  357/    175A :                     
(1)  358/    175A :                     Mus81_GHZ_Loop06:
> > > A4 - S1GHZEDIT.asm(359):19: error #1010: symbol undefined
> > > nC8
> > >  dc.b nAb6, nEb6, nC8, nEb6, nAb6, nEb6, nC8, nEb6
> > >                   ~~~
(1)  359/    175A :                     	dc.b	nAb6, nEb6, nC8, nEb6, nAb6, nEb6, nC8, nEb6
(1)  360/    175A : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop06
(1)  360/    175A : F7                          dc.b    $F7
(1)  360/    175B : 0002                        dc.b    $00,$02
(1)  360/    175D : =>TRUE                       if SonicDriverVer<>1
(1)  360/    175D : 5A17                                dc.w    z80_ptr(Mus81_GHZ_Loop06)
(1)  360/    175F : =>FALSE                      else
(1)  360/    175F :                                     dc.w    Mus81_GHZ_Loop06-*-1
(1)  360/    175F : [360]                        endif
(1)  361/    175F :                     
(1)  362/    175F :                     Mus81_GHZ_Loop07:
> > > A4 - S1GHZEDIT.asm(363):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, nA6, nE7, nA6, nC8, nA6, nE7, nA6
> > >       ~~~
(1)  363/    175F :                     	dc.b	nC8, nA6, nE7, nA6, nC8, nA6, nE7, nA6
(1)  364/    175F : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop07
(1)  364/    175F : F7                          dc.b    $F7
(1)  364/    1760 : 0002                        dc.b    $00,$02
(1)  364/    1762 : =>TRUE                       if SonicDriverVer<>1
(1)  364/    1762 : 5F17                                dc.w    z80_ptr(Mus81_GHZ_Loop07)
(1)  364/    1764 : =>FALSE                      else
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 46 - 01/15/2025 07:33:10 PM


(1)  364/    1764 :                                     dc.w    Mus81_GHZ_Loop07-*-1
(1)  364/    1764 : [364]                        endif
(1)  365/    1764 : (MACRO)              	smpsAlterVol        $0D
(1)  365/    1764 : E60D                        dc.b    $E6,$0D
(1)  366/    1766 : (MACRO)              	smpsAlterPitch      $10
(1)  366/    1766 :  (MACRO-2)                   smpsChangeTransposition $10
(1)  366/    1766 : =>FALSE                      if SonicDriverVer>=3
(1)  366/    1766 :                                     dc.b    $FB,$10
(1)  366/    1766 : =>TRUE                       else
(1)  366/    1766 : E910                                dc.b    $E9,$10
(1)  366/    1768 : [366]                        endif
(1)  367/    1768 : (MACRO)              	smpsJump            Mus81_GHZ_Jump00
(1)  367/    1768 : F6                          dc.b    $F6
(1)  367/    1769 : =>TRUE                       if SonicDriverVer<>1
(1)  367/    1769 : 0A17                                dc.w    z80_ptr(Mus81_GHZ_Jump00)
(1)  367/    176B : =>FALSE                      else
(1)  367/    176B :                                     dc.w    Mus81_GHZ_Jump00-*-1
(1)  367/    176B : [367]                        endif
(1)  368/    176B :                     
(1)  369/    176B :                     Mus81_GHZ_Call00:
(1)  370/    176B : C108 C1BD BDBA      	dc.b	nE5, $08, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
             1771 : BAB6 B6BF BFBC    
(1)  371/    1777 : BCB8 B8             	dc.b	nB4, nG4, nG4
(1)  372/    177A : (MACRO)              	smpsReturn
(1)  372/    177A : =>FALSE                      if SonicDriverVer>=3
(1)  372/    177A :                                     dc.b    $F9
(1)  372/    177A : =>TRUE                       else
(1)  372/    177A : E3                                  dc.b    $E3
(1)  372/    177B : [372]                        endif
(1)  373/    177B :                     
(1)  374/    177B :                     ; PSG1 Data
(1)  375/    177B :                     Mus81_GHZ_PSG1:
(1)  376/    177B : (MACRO)              	smpsPSGvoice        fTone_05
(1)  376/    177B : F505                        dc.b    $F5,fTone_05
(1)  377/    177D : (MACRO)              	smpsModSet          $0E, $01, $01, $03
(1)  377/    177D : F0                          dc.b    $F0
(1)  377/    177E : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  377/    177E :                                     dc.b    $0E+1,$01,$01,(($03+1) * $01) & $FF
(1)  377/    177E : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  377/    177E :                                     dc.b    $0E-1,$01,$01,conv0To256($03)/conv0To256($01)-1
(1)  377/    177E : =>TRUE                       else
(1)  377/    177E : 0E01 0103                           dc.b    $0E,$01,$01,$03
(1)  377/    1782 : [377]                        endif
(1)  377/    1782 :                             ;dc.b   $01,$01,$03
(1)  378/    1782 : 8040                	dc.b	nRst, $40
(1)  379/    1784 : (MACRO)              	smpsNoteFill        $10
(1)  379/    1784 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  379/    1784 :                                     ; Unique to Flamewing's modified driver
(1)  379/    1784 :                                     dc.b    $FF,$0A,$10
(1)  379/    1784 : =>TRUE                       else
(1)  379/    1784 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  379/    1784 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  379/    1784 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  379/    1784 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  379/    1784 : [379]                                endif
(1)  379/    1784 : E810                                dc.b    $E8,$10
(1)  379/    1786 : [379]                        endif
(1)  380/    1786 : C118 BFC1 BFC1      	dc.b	nE5, $18, nD5, nE5, nD5, nE5, $08, nRst, nD5, nRst, nF5, $18
             178C : 0880 BF80 C218    
(1)  381/    1792 : C1                  	dc.b	nE5
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 47 - 01/15/2025 07:33:10 PM


(1)  382/    1793 : (MACRO)              	smpsNoteFill        $00
(1)  382/    1793 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  382/    1793 :                                     ; Unique to Flamewing's modified driver
(1)  382/    1793 :                                     dc.b    $FF,$0A,$00
(1)  382/    1793 : =>TRUE                       else
(1)  382/    1793 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  382/    1793 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  382/    1793 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  382/    1793 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  382/    1793 : [382]                                endif
(1)  382/    1793 : E800                                dc.b    $E8,$00
(1)  382/    1795 : [382]                        endif
(1)  383/    1795 : BF28 E728           	dc.b	nD5, $28, smpsNoAttack, $28
(1)  384/    1799 : (MACRO)              	smpsNoteFill        $10
(1)  384/    1799 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  384/    1799 :                                     ; Unique to Flamewing's modified driver
(1)  384/    1799 :                                     dc.b    $FF,$0A,$10
(1)  384/    1799 : =>TRUE                       else
(1)  384/    1799 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  384/    1799 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  384/    1799 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  384/    1799 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  384/    1799 : [384]                                endif
(1)  384/    1799 : E810                                dc.b    $E8,$10
(1)  384/    179B : [384]                        endif
(1)  385/    179B : BF18 C1C2 10BF      	dc.b	nD5, $18, nE5, nF5, $10, nD5, $18, nE5, nF5, $10, $18
             17A1 : 18C1 C210 18       
(1)  386/    17A6 : (MACRO)              	smpsNoteFill        $00
(1)  386/    17A6 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  386/    17A6 :                                     ; Unique to Flamewing's modified driver
(1)  386/    17A6 :                                     dc.b    $FF,$0A,$00
(1)  386/    17A6 : =>TRUE                       else
(1)  386/    17A6 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  386/    17A6 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  386/    17A6 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  386/    17A6 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  386/    17A6 : [386]                                endif
(1)  386/    17A6 : E800                                dc.b    $E8,$00
(1)  386/    17A8 : [386]                        endif
(1)  387/    17A8 : C134 E734           	dc.b	nE5, $34, smpsNoAttack, $34
(1)  388/    17AC : (MACRO)              	smpsModOff
(1)  388/    17AC : =>FALSE                      if SonicDriverVer>=3
(1)  388/    17AC :                                     dc.b    $FA
(1)  388/    17AC : =>TRUE                       else
(1)  388/    17AC : F4                                  dc.b    $F4
(1)  388/    17AD : [388]                        endif
(1)  389/    17AD :                     
(1)  390/    17AD :                     Mus81_GHZ_Loop13:
(1)  391/    17AD : (MACRO)              	smpsPSGvoice        fTone_01
(1)  391/    17AD : F501                        dc.b    $F5,fTone_01
(1)  392/    17AF :                     
(1)  393/    17AF :                     Mus81_GHZ_Loop12:
> > > A4 - S1GHZEDIT.asm(394):18: error #1010: symbol undefined
> > > nC8
> > >  dc.b nRst, $10, nC8, $04, nRst, $14, nC8, $08, nRst, $20, nB5, $04
> > >                  ~~~
(1)  394/    17AF :                     	dc.b	nRst, $10, nC8, $04, nRst, $14, nC8, $08, nRst, $20, nB5, $04
(1)  395/    17AF : 8014 C808 8010      	dc.b	nRst, $14, nB5, $08, nRst, $10
(1)  396/    17B5 : (MACRO)              	smpsLoop            $01, $03, Mus81_GHZ_Loop12
(1)  396/    17B5 : F7                          dc.b    $F7
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 48 - 01/15/2025 07:33:10 PM


(1)  396/    17B6 : 0103                        dc.b    $01,$03
(1)  396/    17B8 : =>TRUE                       if SonicDriverVer<>1
(1)  396/    17B8 : AF17                                dc.w    z80_ptr(Mus81_GHZ_Loop12)
(1)  396/    17BA : =>FALSE                      else
(1)  396/    17BA :                                     dc.w    Mus81_GHZ_Loop12-*-1
(1)  396/    17BA : [396]                        endif
(1)  397/    17BA : 8010 C604 8014      	dc.b	nRst, $10, nA5, $04, nRst, $14, nA5, $08, nRst, $20, nG5, $04
             17C0 : C608 8020 C404    
(1)  398/    17C6 : 8014 C408 8010      	dc.b	nRst, $14, nG5, $08, nRst, $10
(1)  399/    17CC : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop13
(1)  399/    17CC : F7                          dc.b    $F7
(1)  399/    17CD : 0002                        dc.b    $00,$02
(1)  399/    17CF : =>TRUE                       if SonicDriverVer<>1
(1)  399/    17CF : AD17                                dc.w    z80_ptr(Mus81_GHZ_Loop13)
(1)  399/    17D1 : =>FALSE                      else
(1)  399/    17D1 :                                     dc.w    Mus81_GHZ_Loop13-*-1
(1)  399/    17D1 : [399]                        endif
(1)  400/    17D1 : (MACRO)              	smpsPSGvoice        fTone_05
(1)  400/    17D1 : F505                        dc.b    $F5,fTone_05
> > > A4 - S1GHZEDIT.asm(401):49: error #1010: symbol undefined
> > > nD8
> > >  dc.b nBb6, $18, nA6, nG6, nF6, nE7, $08, nRst, nD8, nRst, nA5, $18
> > >                                                 ~~~
(1)  401/    17D3 :                     	dc.b	nBb6, $18, nA6, nG6, nF6, nE7, $08, nRst, nD8, nRst, nA5, $18
> > > A4 - S1GHZEDIT.asm(402):12: error #1010: symbol undefined
> > > nC8
> > >  dc.b nB5, nC8, nD8, nE7, $08, nRst, nA6, nRst, nAb6, $18, nG6, nF6
> > >            ~~~
(1)  402/    17D3 :                     	dc.b	nB5, nC8, nD8, nE7, $08, nRst, nA6, nRst, nAb6, $18, nG6, nF6
> > > A4 - S1GHZEDIT.asm(403):13: error #1010: symbol undefined
> > > nD8
> > >  dc.b nEb6, nD8, $10, nC8, $08, nRst, nRst, $08, nG6, nA6, nG6, $10
> > >             ~~~
(1)  403/    17D3 :                     	dc.b	nEb6, nD8, $10, nC8, $08, nRst, nRst, $08, nG6, nA6, nG6, $10
(1)  404/    17D3 : 08D2 8010           	dc.b	$08, nA6, nRst, $10
(1)  405/    17D7 : (MACRO)              	smpsPSGAlterVol     $01
(1)  405/    17D7 : EC01                        dc.b    $EC,$01
(1)  406/    17D9 : C618 0880 C680      	dc.b	nA5, $18, $08, nRst, nA5, nRst
(1)  407/    17DF : (MACRO)              	smpsPSGAlterVol     $FF
(1)  407/    17DF : ECFF                        dc.b    $EC,$FF
(1)  408/    17E1 : (MACRO)              	smpsPSGvoice        fTone_03
(1)  408/    17E1 : F503                        dc.b    $F5,fTone_03
(1)  409/    17E3 : (MACRO)              	smpsJump            Mus81_GHZ_Loop13
(1)  409/    17E3 : F6                          dc.b    $F6
(1)  409/    17E4 : =>TRUE                       if SonicDriverVer<>1
(1)  409/    17E4 : AD17                                dc.w    z80_ptr(Mus81_GHZ_Loop13)
(1)  409/    17E6 : =>FALSE                      else
(1)  409/    17E6 :                                     dc.w    Mus81_GHZ_Loop13-*-1
(1)  409/    17E6 : [409]                        endif
(1)  410/    17E6 :                     
(1)  411/    17E6 :                     ; PSG2 Data
(1)  412/    17E6 :                     Mus81_GHZ_PSG2:
(1)  413/    17E6 : 8040                	dc.b	nRst, $40
(1)  414/    17E8 : (MACRO)              	smpsPSGAlterVol     $FE
(1)  414/    17E8 : ECFE                        dc.b    $EC,$FE
(1)  415/    17EA :                     
(1)  416/    17EA :                     Mus81_GHZ_Loop0F:
(1)  417/    17EA : (MACRO)              	smpsNoteFill        $06
(1)  417/    17EA : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  417/    17EA :                                     ; Unique to Flamewing's modified driver
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 49 - 01/15/2025 07:33:10 PM


(1)  417/    17EA :                                     dc.b    $FF,$0A,$06
(1)  417/    17EA : =>TRUE                       else
(1)  417/    17EA : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  417/    17EA :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  417/    17EA : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  417/    17EA :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  417/    17EA : [417]                                endif
(1)  417/    17EA : E806                                dc.b    $E8,$06
(1)  417/    17EC : [417]                        endif
> > > A4 - S1GHZEDIT.asm(418):7: error #1010: symbol undefined
> > > nC8
> > >  dc.b nC8, $08, nB6, nA6, nG6, nC8, nB6, nA6, nG6
> > >       ~~~
(1)  418/    17EC :                     	dc.b	nC8, $08, nB6, nA6, nG6, nC8, nB6, nA6, nG6
(1)  419/    17EC : (MACRO)              	smpsLoop            $00, $08, Mus81_GHZ_Loop0F
(1)  419/    17EC : F7                          dc.b    $F7
(1)  419/    17ED : 0008                        dc.b    $00,$08
(1)  419/    17EF : =>TRUE                       if SonicDriverVer<>1
(1)  419/    17EF : EA17                                dc.w    z80_ptr(Mus81_GHZ_Loop0F)
(1)  419/    17F1 : =>FALSE                      else
(1)  419/    17F1 :                                     dc.w    Mus81_GHZ_Loop0F-*-1
(1)  419/    17F1 : [419]                        endif
(1)  420/    17F1 : (MACRO)              	smpsNoteFill        $00
(1)  420/    17F1 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  420/    17F1 :                                     ; Unique to Flamewing's modified driver
(1)  420/    17F1 :                                     dc.b    $FF,$0A,$00
(1)  420/    17F1 : =>TRUE                       else
(1)  420/    17F1 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  420/    17F1 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  420/    17F1 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  420/    17F1 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  420/    17F1 : [420]                                endif
(1)  420/    17F1 : E800                                dc.b    $E8,$00
(1)  420/    17F3 : [420]                        endif
(1)  421/    17F3 :                     
(1)  422/    17F3 :                     Mus81_GHZ_Loop11:
(1)  423/    17F3 : (MACRO)              	smpsPSGvoice        fTone_01
(1)  423/    17F3 : F501                        dc.b    $F5,fTone_01
(1)  424/    17F5 :                     
(1)  425/    17F5 :                     Mus81_GHZ_Loop10:
> > > A4 - S1GHZEDIT.asm(426):60: error #1010: symbol undefined
> > > nD8
> > >  dc.b nRst, $10, nE7, $04, nRst, $14, nE7, $08, nRst, $20, nD8, $04
> > >                                                            ~~~
(1)  426/    17F5 :                     	dc.b	nRst, $10, nE7, $04, nRst, $14, nE7, $08, nRst, $20, nD8, $04
> > > A4 - S1GHZEDIT.asm(427):18: error #1010: symbol undefined
> > > nD8
> > >  dc.b nRst, $14, nD8, $08, nRst, $10
> > >                  ~~~
(1)  427/    17F5 :                     	dc.b	nRst, $14, nD8, $08, nRst, $10
(1)  428/    17F5 : (MACRO)              	smpsLoop            $01, $03, Mus81_GHZ_Loop10
(1)  428/    17F5 : F7                          dc.b    $F7
(1)  428/    17F6 : 0103                        dc.b    $01,$03
(1)  428/    17F8 : =>TRUE                       if SonicDriverVer<>1
(1)  428/    17F8 : F517                                dc.w    z80_ptr(Mus81_GHZ_Loop10)
(1)  428/    17FA : =>FALSE                      else
(1)  428/    17FA :                                     dc.w    Mus81_GHZ_Loop10-*-1
(1)  428/    17FA : [428]                        endif
> > > A4 - S1GHZEDIT.asm(429):18: error #1010: symbol undefined
> > > nC8
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 50 - 01/15/2025 07:33:10 PM


> > >  dc.b nRst, $10, nC8, $04, nRst, $14, nC8, $08, nRst, $20, nB5, $04
> > >                  ~~~
(1)  429/    17FA :                     	dc.b	nRst, $10, nC8, $04, nRst, $14, nC8, $08, nRst, $20, nB5, $04
(1)  430/    17FA : 8014 C808 8010      	dc.b	nRst, $14, nB5, $08, nRst, $10
(1)  431/    1800 : (MACRO)              	smpsLoop            $00, $02, Mus81_GHZ_Loop11
(1)  431/    1800 : F7                          dc.b    $F7
(1)  431/    1801 : 0002                        dc.b    $00,$02
(1)  431/    1803 : =>TRUE                       if SonicDriverVer<>1
(1)  431/    1803 : F317                                dc.w    z80_ptr(Mus81_GHZ_Loop11)
(1)  431/    1805 : =>FALSE                      else
(1)  431/    1805 :                                     dc.w    Mus81_GHZ_Loop11-*-1
(1)  431/    1805 : [431]                        endif
> > > A4 - S1GHZEDIT.asm(432):7: error #1010: symbol undefined
> > > nD8
> > >  dc.b nD8, $34, smpsNoAttack, $34, nC8, $08, nD8, nE7, $38, smpsNoAttack, $38, nC8
> > >       ~~~
(1)  432/    1805 :                     	dc.b	nD8, $34, smpsNoAttack, $34, nC8, $08, nD8, nE7, $38, smpsNoAttack, $38, nC8
> > > A4 - S1GHZEDIT.asm(433):12: error #1010: symbol undefined
> > > nC8
> > >  dc.b $08, nC8, nE7, nEb6, $34, smpsNoAttack, $34, nC8, $08, nEb6, nD8
> > >            ~~~
(1)  433/    1805 :                     	dc.b	$08, nC8, nE7, nEb6, $34, smpsNoAttack, $34, nC8, $08, nEb6, nD8
(1)  434/    1805 : (MACRO)              	smpsPSGvoice        fTone_05
(1)  434/    1805 : F505                        dc.b    $F5,fTone_05
(1)  435/    1807 : BD18 1818 1808      	dc.b	nC5, $18, $18, $18, $18, $08, nRst, nC5, nRst
             180D : 80BD 80          
(1)  436/    1810 : (MACRO)              	smpsPSGvoice        fTone_03
(1)  436/    1810 : F503                        dc.b    $F5,fTone_03
(1)  437/    1812 : (MACRO)              	smpsJump            Mus81_GHZ_Loop11
(1)  437/    1812 : F6                          dc.b    $F6
(1)  437/    1813 : =>TRUE                       if SonicDriverVer<>1
(1)  437/    1813 : F317                                dc.w    z80_ptr(Mus81_GHZ_Loop11)
(1)  437/    1815 : =>FALSE                      else
(1)  437/    1815 :                                     dc.w    Mus81_GHZ_Loop11-*-1
(1)  437/    1815 : [437]                        endif
(1)  438/    1815 :                     
(1)  439/    1815 :                     ; PSG3 Data
(1)  440/    1815 :                     Mus81_GHZ_PSG3:
(1)  441/    1815 : (MACRO)              	smpsPSGform         $E7
(1)  441/    1815 : F3E7                        dc.b    $F3,$E7
(1)  442/    1817 : (MACRO)              	smpsNoteFill        $06
(1)  442/    1817 : =>FALSE                      if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  442/    1817 :                                     ; Unique to Flamewing's modified driver
(1)  442/    1817 :                                     dc.b    $FF,$0A,$06
(1)  442/    1817 : =>TRUE                       else
(1)  442/    1817 : =>FALSE                              if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  442/    1817 :                                             message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  442/    1817 : =>FALSE                              elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  442/    1817 :                                             message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  442/    1817 : [442]                                endif
(1)  442/    1817 : E806                                dc.b    $E8,$06
(1)  442/    1819 : [442]                        endif
(1)  443/    1819 : C610 1010           	dc.b	nMaxPSG, $10, $10, $10
(1)  444/    181D :                     
(1)  445/    181D :                     Mus81_GHZ_Jump05:
(1)  446/    181D : 08                  	dc.b	$08
(1)  447/    181E : (MACRO)              	smpsJump            Mus81_GHZ_Jump05
(1)  447/    181E : F6                          dc.b    $F6
(1)  447/    181F : =>TRUE                       if SonicDriverVer<>1
(1)  447/    181F : 1D18                                dc.w    z80_ptr(Mus81_GHZ_Jump05)
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 51 - 01/15/2025 07:33:10 PM


(1)  447/    1821 : =>FALSE                      else
(1)  447/    1821 :                                     dc.w    Mus81_GHZ_Jump05-*-1
(1)  447/    1821 : [447]                        endif
(1)  448/    1821 :                     
(1)  449/    1821 :                     ; DAC Data
(1)  450/    1821 :                     Mus81_GHZ_DAC:
(1)  451/    1821 : 8008 8182 8181      	dc.b	nRst, $08, dKick, dSnare, dKick, dKick, dSnare, dSnare, dSnare
             1827 : 8282 82          
(1)  452/    182A :                     
(1)  453/    182A :                     Mus81_GHZ_Loop00:
(1)  454/    182A : 8110 8208 8110      	dc.b	dKick, $10, dSnare, $08, dKick, $10, $08, dSnare, $10
             1830 : 0882 10          
(1)  455/    1833 : (MACRO)              	smpsLoop            $00, $07, Mus81_GHZ_Loop00
(1)  455/    1833 : F7                          dc.b    $F7
(1)  455/    1834 : 0007                        dc.b    $00,$07
(1)  455/    1836 : =>TRUE                       if SonicDriverVer<>1
(1)  455/    1836 : 2A18                                dc.w    z80_ptr(Mus81_GHZ_Loop00)
(1)  455/    1838 : =>FALSE                      else
(1)  455/    1838 :                                     dc.w    Mus81_GHZ_Loop00-*-1
(1)  455/    1838 : [455]                        endif
(1)  456/    1838 : 8110 8208 8110      	dc.b	dKick, $10, dSnare, $08, dKick, $10, dSnare, $08, $08, $08
             183E : 8208 0808          
(1)  457/    1842 :                     
(1)  458/    1842 :                     Mus81_GHZ_Loop01:
(1)  459/    1842 : 8110 8208 8110      	dc.b	dKick, $10, dSnare, $08, dKick, $10, $08, dSnare, $10
             1848 : 0882 10          
(1)  460/    184B : (MACRO)              	smpsLoop            $00, $07, Mus81_GHZ_Loop01
(1)  460/    184B : F7                          dc.b    $F7
(1)  460/    184C : 0007                        dc.b    $00,$07
(1)  460/    184E : =>TRUE                       if SonicDriverVer<>1
(1)  460/    184E : 4218                                dc.w    z80_ptr(Mus81_GHZ_Loop01)
(1)  460/    1850 : =>FALSE                      else
(1)  460/    1850 :                                     dc.w    Mus81_GHZ_Loop01-*-1
(1)  460/    1850 : [460]                        endif
(1)  461/    1850 : 8110 8208 8110      	dc.b	dKick, $10, dSnare, $08, dKick, $10, dSnare, $08, $08, $08
             1856 : 8208 0808          
(1)  462/    185A : (MACRO)              	smpsLoop            $01, $02, Mus81_GHZ_Loop01
(1)  462/    185A : F7                          dc.b    $F7
(1)  462/    185B : 0102                        dc.b    $01,$02
(1)  462/    185D : =>TRUE                       if SonicDriverVer<>1
(1)  462/    185D : 4218                                dc.w    z80_ptr(Mus81_GHZ_Loop01)
(1)  462/    185F : =>FALSE                      else
(1)  462/    185F :                                     dc.w    Mus81_GHZ_Loop01-*-1
(1)  462/    185F : [462]                        endif
(1)  463/    185F : (MACRO)              	smpsJump            Mus81_GHZ_Loop01
(1)  463/    185F : F6                          dc.b    $F6
(1)  463/    1860 : =>TRUE                       if SonicDriverVer<>1
(1)  463/    1860 : 4218                                dc.w    z80_ptr(Mus81_GHZ_Loop01)
(1)  463/    1862 : =>FALSE                      else
(1)  463/    1862 :                                     dc.w    Mus81_GHZ_Loop01-*-1
(1)  463/    1862 : [463]                        endif
(1)  464/    1862 :                     
(1)  465/    1862 :                     Mus81_GHZ_Voices:
(1)  466/    1862 :                     ;	Voice $00
(1)  467/    1862 :                     ;	$08
(1)  468/    1862 :                     ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
(1)  469/    1862 :                     ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
(1)  470/    1862 : (MACRO)              	smpsVcAlgorithm     $00
(1)  470/    1862 : =$0                  vcAlgorithm set $00
(1)  471/    1862 : (MACRO)              	smpsVcFeedback      $01
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 52 - 01/15/2025 07:33:10 PM


(1)  471/    1862 : =$1                  vcFeedback set $01
(1)  472/    1862 : (MACRO)              	smpsVcUnusedBits    $00
(1)  472/    1862 : =$0                  vcUnusedBits set $00
(1)  472/    1862 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  472/    1862 :                                     set vcD1R1Unk,<<5
(1)  472/    1862 :                                     set vcD1R2Unk,<<5
(1)  472/    1862 :                                     set vcD1R3Unk,<<5
(1)  472/    1862 :                                     set vcD1R4Unk,<<5
(1)  472/    1862 : =>TRUE                       else
(1)  472/    1862 : =$0                                  set vcD1R1Unk,0
(1)  472/    1862 : =$0                                  set vcD1R2Unk,0
(1)  472/    1862 : =$0                                  set vcD1R3Unk,0
(1)  472/    1862 : =$0                                  set vcD1R4Unk,0
(1)  472/    1862 : [472]                        endif
(1)  473/    1862 : (MACRO)              	smpsVcDetune        $00, $03, $07, $00
(1)  473/    1862 : =$0                          set vcDT1,$00
(1)  473/    1862 : =$3                          set vcDT2,$03
(1)  473/    1862 : =$7                          set vcDT3,$07
(1)  473/    1862 : =$0                          set vcDT4,$00
(1)  474/    1862 : (MACRO)              	smpsVcCoarseFreq    $00, $00, $00, $0A
(1)  474/    1862 : =$0                          set vcCF1,$00
(1)  474/    1862 : =$0                          set vcCF2,$00
(1)  474/    1862 : =$0                          set vcCF3,$00
(1)  474/    1862 : =$A                          set vcCF4,$0A
(1)  475/    1862 : (MACRO)              	smpsVcRateScale     $01, $01, $00, $00
(1)  475/    1862 : =$1                          set vcRS1,$01
(1)  475/    1862 : =$1                          set vcRS2,$01
(1)  475/    1862 : =$0                          set vcRS3,$00
(1)  475/    1862 : =$0                          set vcRS4,$00
(1)  476/    1862 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  476/    1862 : =$1F                         set vcAR1,$1F
(1)  476/    1862 : =$1F                         set vcAR2,$1F
(1)  476/    1862 : =$1F                         set vcAR3,$1F
(1)  476/    1862 : =$1F                         set vcAR4,$1F
(1)  477/    1862 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  477/    1862 : =>TRUE                       if SourceSMPS2ASM==0
(1)  477/    1862 : =$0                                  set vcAM1,$00<<5
(1)  477/    1862 : =$0                                  set vcAM2,$00<<5
(1)  477/    1862 : =$0                                  set vcAM3,$00<<5
(1)  477/    1862 : =$0                                  set vcAM4,$00<<5
(1)  477/    1862 : =>FALSE                      else
(1)  477/    1862 :                                     set vcAM1,$00<<7
(1)  477/    1862 :                                     set vcAM2,$00<<7
(1)  477/    1862 :                                     set vcAM3,$00<<7
(1)  477/    1862 :                                     set vcAM4,$00<<7
(1)  477/    1862 : [477]                        endif
(1)  478/    1862 : (MACRO)              	smpsVcDecayRate1    $0A, $0A, $0E, $12
(1)  478/    1862 : =$A                          set vcD1R1,$0A
(1)  478/    1862 : =$A                          set vcD1R2,$0A
(1)  478/    1862 : =$E                          set vcD1R3,$0E
(1)  478/    1862 : =$12                         set vcD1R4,$12
(1)  479/    1862 : (MACRO)              	smpsVcDecayRate2    $03, $04, $04, $00
(1)  479/    1862 : =$3                          set vcD2R1,$03
(1)  479/    1862 : =$4                          set vcD2R2,$04
(1)  479/    1862 : =$4                          set vcD2R3,$04
(1)  479/    1862 : =$0                          set vcD2R4,$00
(1)  480/    1862 : (MACRO)              	smpsVcDecayLevel    $02, $02, $02, $02
(1)  480/    1862 : =$2                          set vcDL1,$02
(1)  480/    1862 : =$2                          set vcDL2,$02
(1)  480/    1862 : =$2                          set vcDL3,$02
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 53 - 01/15/2025 07:33:10 PM


(1)  480/    1862 : =$2                          set vcDL4,$02
(1)  481/    1862 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  481/    1862 : =$F                          set vcRR1,$0F
(1)  481/    1862 : =$F                          set vcRR2,$0F
(1)  481/    1862 : =$F                          set vcRR3,$0F
(1)  481/    1862 : =$F                          set vcRR4,$0F
(1)  482/    1862 : (MACRO)              	smpsVcTotalLevel    $00, $13, $2D, $24
(1)  482/    1862 : =$0                          set vcTL1,$00
(1)  482/    1862 : =$13                         set vcTL2,$13
(1)  482/    1862 : =$2D                         set vcTL3,$2D
(1)  482/    1862 : =$24                         set vcTL4,$24
(1)  482/    1862 : 08                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  482/    1863 :                     ;   0     1     2     3     4     5     6     7
(1)  482/    1863 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  482/    1863 : =>TRUE                       if SourceSMPS2ASM==0
(1)  482/    1863 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  482/    1863 : =$0                                  set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  482/    1863 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  482/    1863 : =$80                                 set vcTLMask1,$80
(1)  482/    1863 : =>FALSE                      else
(1)  482/    1863 :                                     set vcTLMask4,0
(1)  482/    1863 :                                     set vcTLMask3,0
(1)  482/    1863 :                                     set vcTLMask2,0
(1)  482/    1863 :                                     set vcTLMask1,0
(1)  482/    1863 : [482]                        endif
(1)  482/    1863 :                     
(1)  482/    1863 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  482/    1863 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  482/    1863 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  482/    1863 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  482/    1863 :                                     set vcTLMask1,$80
(1)  482/    1863 :                                     set vcTL1,vcTL1&$7F
(1)  482/    1863 :                                     set vcTL2,vcTL2&$7F
(1)  482/    1863 :                                     set vcTL3,vcTL3&$7F
(1)  482/    1863 :                                     set vcTL4,vcTL4&$7F
(1)  482/    1863 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  482/    1863 :                                     if MOMPASS=1
(1)  482/    1863 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  482/    1863 : [482]                                endif
(1)  482/    1863 : [482]                        endif
(1)  482/    1863 :                     
(1)  482/    1863 : =>TRUE                       if SonicDriverVer==2
(1)  482/    1863 : 0A30 7000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  482/    1867 : 1F5F 1F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  482/    186B : 120A 0E0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  482/    186F : 0004 0403                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  482/    1873 : 2F2F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  482/    1877 : 2413 2D80                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  482/    187B : =>FALSE                      else
(1)  482/    187B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  482/    187B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  482/    187B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  482/    187B :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  482/    187B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  482/    187B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  482/    187B : [482]                        endif
(1)  483/    187B :                     
(1)  484/    187B :                     ;	Voice $01
(1)  485/    187B :                     ;	$20
(1)  486/    187B :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 54 - 01/15/2025 07:33:10 PM


(1)  487/    187B :                     ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
(1)  488/    187B : (MACRO)              	smpsVcAlgorithm     $00
(1)  488/    187B : =$0                  vcAlgorithm set $00
(1)  489/    187B : (MACRO)              	smpsVcFeedback      $04
(1)  489/    187B : =$4                  vcFeedback set $04
(1)  490/    187B : (MACRO)              	smpsVcUnusedBits    $00
(1)  490/    187B : =$0                  vcUnusedBits set $00
(1)  490/    187B : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  490/    187B :                                     set vcD1R1Unk,<<5
(1)  490/    187B :                                     set vcD1R2Unk,<<5
(1)  490/    187B :                                     set vcD1R3Unk,<<5
(1)  490/    187B :                                     set vcD1R4Unk,<<5
(1)  490/    187B : =>TRUE                       else
(1)  490/    187B : =$0                                  set vcD1R1Unk,0
(1)  490/    187B : =$0                                  set vcD1R2Unk,0
(1)  490/    187B : =$0                                  set vcD1R3Unk,0
(1)  490/    187B : =$0                                  set vcD1R4Unk,0
(1)  490/    187B : [490]                        endif
(1)  491/    187B : (MACRO)              	smpsVcDetune        $03, $03, $03, $03
(1)  491/    187B : =$3                          set vcDT1,$03
(1)  491/    187B : =$3                          set vcDT2,$03
(1)  491/    187B : =$3                          set vcDT3,$03
(1)  491/    187B : =$3                          set vcDT4,$03
(1)  492/    187B : (MACRO)              	smpsVcCoarseFreq    $01, $00, $05, $06
(1)  492/    187B : =$1                          set vcCF1,$01
(1)  492/    187B : =$0                          set vcCF2,$00
(1)  492/    187B : =$5                          set vcCF3,$05
(1)  492/    187B : =$6                          set vcCF4,$06
(1)  493/    187B : (MACRO)              	smpsVcRateScale     $02, $02, $03, $03
(1)  493/    187B : =$2                          set vcRS1,$02
(1)  493/    187B : =$2                          set vcRS2,$02
(1)  493/    187B : =$3                          set vcRS3,$03
(1)  493/    187B : =$3                          set vcRS4,$03
(1)  494/    187B : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  494/    187B : =$1F                         set vcAR1,$1F
(1)  494/    187B : =$1F                         set vcAR2,$1F
(1)  494/    187B : =$1F                         set vcAR3,$1F
(1)  494/    187B : =$1F                         set vcAR4,$1F
(1)  495/    187B : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  495/    187B : =>TRUE                       if SourceSMPS2ASM==0
(1)  495/    187B : =$0                                  set vcAM1,$00<<5
(1)  495/    187B : =$0                                  set vcAM2,$00<<5
(1)  495/    187B : =$0                                  set vcAM3,$00<<5
(1)  495/    187B : =$0                                  set vcAM4,$00<<5
(1)  495/    187B : =>FALSE                      else
(1)  495/    187B :                                     set vcAM1,$00<<7
(1)  495/    187B :                                     set vcAM2,$00<<7
(1)  495/    187B :                                     set vcAM3,$00<<7
(1)  495/    187B :                                     set vcAM4,$00<<7
(1)  495/    187B : [495]                        endif
(1)  496/    187B : (MACRO)              	smpsVcDecayRate1    $06, $09, $06, $07
(1)  496/    187B : =$6                          set vcD1R1,$06
(1)  496/    187B : =$9                          set vcD1R2,$09
(1)  496/    187B : =$6                          set vcD1R3,$06
(1)  496/    187B : =$7                          set vcD1R4,$07
(1)  497/    187B : (MACRO)              	smpsVcDecayRate2    $08, $06, $06, $07
(1)  497/    187B : =$8                          set vcD2R1,$08
(1)  497/    187B : =$6                          set vcD2R2,$06
(1)  497/    187B : =$6                          set vcD2R3,$06
(1)  497/    187B : =$7                          set vcD2R4,$07
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 55 - 01/15/2025 07:33:10 PM


(1)  498/    187B : (MACRO)              	smpsVcDecayLevel    $0F, $01, $01, $02
(1)  498/    187B : =$F                          set vcDL1,$0F
(1)  498/    187B : =$1                          set vcDL2,$01
(1)  498/    187B : =$1                          set vcDL3,$01
(1)  498/    187B : =$2                          set vcDL4,$02
(1)  499/    187B : (MACRO)              	smpsVcReleaseRate   $08, $00, $00, $00
(1)  499/    187B : =$8                          set vcRR1,$08
(1)  499/    187B : =$0                          set vcRR2,$00
(1)  499/    187B : =$0                          set vcRR3,$00
(1)  499/    187B : =$0                          set vcRR4,$00
(1)  500/    187B : (MACRO)              	smpsVcTotalLevel    $00, $13, $37, $19
(1)  500/    187B : =$0                          set vcTL1,$00
(1)  500/    187B : =$13                         set vcTL2,$13
(1)  500/    187B : =$37                         set vcTL3,$37
(1)  500/    187B : =$19                         set vcTL4,$19
(1)  500/    187B : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  500/    187C :                     ;   0     1     2     3     4     5     6     7
(1)  500/    187C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  500/    187C : =>TRUE                       if SourceSMPS2ASM==0
(1)  500/    187C : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  500/    187C : =$0                                  set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  500/    187C : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  500/    187C : =$80                                 set vcTLMask1,$80
(1)  500/    187C : =>FALSE                      else
(1)  500/    187C :                                     set vcTLMask4,0
(1)  500/    187C :                                     set vcTLMask3,0
(1)  500/    187C :                                     set vcTLMask2,0
(1)  500/    187C :                                     set vcTLMask1,0
(1)  500/    187C : [500]                        endif
(1)  500/    187C :                     
(1)  500/    187C : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  500/    187C :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  500/    187C :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  500/    187C :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  500/    187C :                                     set vcTLMask1,$80
(1)  500/    187C :                                     set vcTL1,vcTL1&$7F
(1)  500/    187C :                                     set vcTL2,vcTL2&$7F
(1)  500/    187C :                                     set vcTL3,vcTL3&$7F
(1)  500/    187C :                                     set vcTL4,vcTL4&$7F
(1)  500/    187C : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  500/    187C :                                     if MOMPASS=1
(1)  500/    187C :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  500/    187C : [500]                                endif
(1)  500/    187C : [500]                        endif
(1)  500/    187C :                     
(1)  500/    187C : =>TRUE                       if SonicDriverVer==2
(1)  500/    187C : 3630 3531                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  500/    1880 : DF9F DF9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  500/    1884 : 0709 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  500/    1888 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  500/    188C : 2010 10F8                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  500/    1890 : 1913 3780                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  500/    1894 : =>FALSE                      else
(1)  500/    1894 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  500/    1894 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  500/    1894 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  500/    1894 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  500/    1894 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  500/    1894 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  500/    1894 : [500]                        endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 56 - 01/15/2025 07:33:10 PM


(1)  501/    1894 :                     
(1)  502/    1894 :                     ;	Voice $02
(1)  503/    1894 :                     ;	$36
(1)  504/    1894 :                     ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
(1)  505/    1894 :                     ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
(1)  506/    1894 : (MACRO)              	smpsVcAlgorithm     $06
(1)  506/    1894 : =$6                  vcAlgorithm set $06
(1)  507/    1894 : (MACRO)              	smpsVcFeedback      $06
(1)  507/    1894 : =$6                  vcFeedback set $06
(1)  508/    1894 : (MACRO)              	smpsVcUnusedBits    $00
(1)  508/    1894 : =$0                  vcUnusedBits set $00
(1)  508/    1894 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  508/    1894 :                                     set vcD1R1Unk,<<5
(1)  508/    1894 :                                     set vcD1R2Unk,<<5
(1)  508/    1894 :                                     set vcD1R3Unk,<<5
(1)  508/    1894 :                                     set vcD1R4Unk,<<5
(1)  508/    1894 : =>TRUE                       else
(1)  508/    1894 : =$0                                  set vcD1R1Unk,0
(1)  508/    1894 : =$0                                  set vcD1R2Unk,0
(1)  508/    1894 : =$0                                  set vcD1R3Unk,0
(1)  508/    1894 : =$0                                  set vcD1R4Unk,0
(1)  508/    1894 : [508]                        endif
(1)  509/    1894 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  509/    1894 : =$0                          set vcDT1,$00
(1)  509/    1894 : =$0                          set vcDT2,$00
(1)  509/    1894 : =$0                          set vcDT3,$00
(1)  509/    1894 : =$0                          set vcDT4,$00
(1)  510/    1894 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $0F
(1)  510/    1894 : =$1                          set vcCF1,$01
(1)  510/    1894 : =$1                          set vcCF2,$01
(1)  510/    1894 : =$1                          set vcCF3,$01
(1)  510/    1894 : =$F                          set vcCF4,$0F
(1)  511/    1894 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  511/    1894 : =$0                          set vcRS1,$00
(1)  511/    1894 : =$0                          set vcRS2,$00
(1)  511/    1894 : =$0                          set vcRS3,$00
(1)  511/    1894 : =$0                          set vcRS4,$00
(1)  512/    1894 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  512/    1894 : =$1F                         set vcAR1,$1F
(1)  512/    1894 : =$1F                         set vcAR2,$1F
(1)  512/    1894 : =$1F                         set vcAR3,$1F
(1)  512/    1894 : =$1F                         set vcAR4,$1F
(1)  513/    1894 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  513/    1894 : =>TRUE                       if SourceSMPS2ASM==0
(1)  513/    1894 : =$0                                  set vcAM1,$00<<5
(1)  513/    1894 : =$0                                  set vcAM2,$00<<5
(1)  513/    1894 : =$0                                  set vcAM3,$00<<5
(1)  513/    1894 : =$0                                  set vcAM4,$00<<5
(1)  513/    1894 : =>FALSE                      else
(1)  513/    1894 :                                     set vcAM1,$00<<7
(1)  513/    1894 :                                     set vcAM2,$00<<7
(1)  513/    1894 :                                     set vcAM3,$00<<7
(1)  513/    1894 :                                     set vcAM4,$00<<7
(1)  513/    1894 : [513]                        endif
(1)  514/    1894 : (MACRO)              	smpsVcDecayRate1    $00, $0E, $11, $12
(1)  514/    1894 : =$0                          set vcD1R1,$00
(1)  514/    1894 : =$E                          set vcD1R2,$0E
(1)  514/    1894 : =$11                         set vcD1R3,$11
(1)  514/    1894 : =$12                         set vcD1R4,$12
(1)  515/    1894 : (MACRO)              	smpsVcDecayRate2    $09, $07, $0A, $00
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 57 - 01/15/2025 07:33:10 PM


(1)  515/    1894 : =$9                          set vcD2R1,$09
(1)  515/    1894 : =$7                          set vcD2R2,$07
(1)  515/    1894 : =$A                          set vcD2R3,$0A
(1)  515/    1894 : =$0                          set vcD2R4,$00
(1)  516/    1894 : (MACRO)              	smpsVcDecayLevel    $00, $01, $00, $0F
(1)  516/    1894 : =$0                          set vcDL1,$00
(1)  516/    1894 : =$1                          set vcDL2,$01
(1)  516/    1894 : =$0                          set vcDL3,$00
(1)  516/    1894 : =$F                          set vcDL4,$0F
(1)  517/    1894 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  517/    1894 : =$F                          set vcRR1,$0F
(1)  517/    1894 : =$F                          set vcRR2,$0F
(1)  517/    1894 : =$F                          set vcRR3,$0F
(1)  517/    1894 : =$F                          set vcRR4,$0F
(1)  518/    1894 : (MACRO)              	smpsVcTotalLevel    $00, $00, $00, $18
(1)  518/    1894 : =$0                          set vcTL1,$00
(1)  518/    1894 : =$0                          set vcTL2,$00
(1)  518/    1894 : =$0                          set vcTL3,$00
(1)  518/    1894 : =$18                         set vcTL4,$18
(1)  518/    1894 : 36                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  518/    1895 :                     ;   0     1     2     3     4     5     6     7
(1)  518/    1895 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  518/    1895 : =>TRUE                       if SourceSMPS2ASM==0
(1)  518/    1895 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  518/    1895 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  518/    1895 : =$80                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  518/    1895 : =$80                                 set vcTLMask1,$80
(1)  518/    1895 : =>FALSE                      else
(1)  518/    1895 :                                     set vcTLMask4,0
(1)  518/    1895 :                                     set vcTLMask3,0
(1)  518/    1895 :                                     set vcTLMask2,0
(1)  518/    1895 :                                     set vcTLMask1,0
(1)  518/    1895 : [518]                        endif
(1)  518/    1895 :                     
(1)  518/    1895 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  518/    1895 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  518/    1895 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  518/    1895 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  518/    1895 :                                     set vcTLMask1,$80
(1)  518/    1895 :                                     set vcTL1,vcTL1&$7F
(1)  518/    1895 :                                     set vcTL2,vcTL2&$7F
(1)  518/    1895 :                                     set vcTL3,vcTL3&$7F
(1)  518/    1895 :                                     set vcTL4,vcTL4&$7F
(1)  518/    1895 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  518/    1895 :                                     if MOMPASS=1
(1)  518/    1895 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  518/    1895 : [518]                                endif
(1)  518/    1895 : [518]                        endif
(1)  518/    1895 :                     
(1)  518/    1895 : =>TRUE                       if SonicDriverVer==2
(1)  518/    1895 : 0F01 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  518/    1899 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  518/    189D : 120E 1100                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  518/    18A1 : 0007 0A09                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  518/    18A5 : FF1F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  518/    18A9 : 1880 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  518/    18AD : =>FALSE                      else
(1)  518/    18AD :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  518/    18AD :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  518/    18AD :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 58 - 01/15/2025 07:33:10 PM


(1)  518/    18AD :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  518/    18AD :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  518/    18AD :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  518/    18AD : [518]                        endif
(1)  519/    18AD :                     
(1)  520/    18AD :                     ;	Voice $03
(1)  521/    18AD :                     ;	$3D
(1)  522/    18AD :                     ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
(1)  523/    18AD :                     ;	$00, $0D, $0D, $0D, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
(1)  524/    18AD : (MACRO)              	smpsVcAlgorithm     $05
(1)  524/    18AD : =$5                  vcAlgorithm set $05
(1)  525/    18AD : (MACRO)              	smpsVcFeedback      $07
(1)  525/    18AD : =$7                  vcFeedback set $07
(1)  526/    18AD : (MACRO)              	smpsVcUnusedBits    $00
(1)  526/    18AD : =$0                  vcUnusedBits set $00
(1)  526/    18AD : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  526/    18AD :                                     set vcD1R1Unk,<<5
(1)  526/    18AD :                                     set vcD1R2Unk,<<5
(1)  526/    18AD :                                     set vcD1R3Unk,<<5
(1)  526/    18AD :                                     set vcD1R4Unk,<<5
(1)  526/    18AD : =>TRUE                       else
(1)  526/    18AD : =$0                                  set vcD1R1Unk,0
(1)  526/    18AD : =$0                                  set vcD1R2Unk,0
(1)  526/    18AD : =$0                                  set vcD1R3Unk,0
(1)  526/    18AD : =$0                                  set vcD1R4Unk,0
(1)  526/    18AD : [526]                        endif
(1)  527/    18AD : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  527/    18AD : =$0                          set vcDT1,$00
(1)  527/    18AD : =$0                          set vcDT2,$00
(1)  527/    18AD : =$0                          set vcDT3,$00
(1)  527/    18AD : =$0                          set vcDT4,$00
(1)  528/    18AD : (MACRO)              	smpsVcCoarseFreq    $02, $02, $02, $01
(1)  528/    18AD : =$2                          set vcCF1,$02
(1)  528/    18AD : =$2                          set vcCF2,$02
(1)  528/    18AD : =$2                          set vcCF3,$02
(1)  528/    18AD : =$1                          set vcCF4,$01
(1)  529/    18AD : (MACRO)              	smpsVcRateScale     $00, $02, $00, $00
(1)  529/    18AD : =$0                          set vcRS1,$00
(1)  529/    18AD : =$2                          set vcRS2,$02
(1)  529/    18AD : =$0                          set vcRS3,$00
(1)  529/    18AD : =$0                          set vcRS4,$00
(1)  530/    18AD : (MACRO)              	smpsVcAttackRate    $0E, $10, $0E, $14
(1)  530/    18AD : =$E                          set vcAR1,$0E
(1)  530/    18AD : =$10                         set vcAR2,$10
(1)  530/    18AD : =$E                          set vcAR3,$0E
(1)  530/    18AD : =$14                         set vcAR4,$14
(1)  531/    18AD : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  531/    18AD : =>TRUE                       if SourceSMPS2ASM==0
(1)  531/    18AD : =$0                                  set vcAM1,$00<<5
(1)  531/    18AD : =$0                                  set vcAM2,$00<<5
(1)  531/    18AD : =$0                                  set vcAM3,$00<<5
(1)  531/    18AD : =$0                                  set vcAM4,$00<<5
(1)  531/    18AD : =>FALSE                      else
(1)  531/    18AD :                                     set vcAM1,$00<<7
(1)  531/    18AD :                                     set vcAM2,$00<<7
(1)  531/    18AD :                                     set vcAM3,$00<<7
(1)  531/    18AD :                                     set vcAM4,$00<<7
(1)  531/    18AD : [531]                        endif
(1)  532/    18AD : (MACRO)              	smpsVcDecayRate1    $05, $02, $05, $08
(1)  532/    18AD : =$5                          set vcD1R1,$05
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 59 - 01/15/2025 07:33:10 PM


(1)  532/    18AD : =$2                          set vcD1R2,$02
(1)  532/    18AD : =$5                          set vcD1R3,$05
(1)  532/    18AD : =$8                          set vcD1R4,$08
(1)  533/    18AD : (MACRO)              	smpsVcDecayRate2    $0D, $0D, $0D, $00
(1)  533/    18AD : =$D                          set vcD2R1,$0D
(1)  533/    18AD : =$D                          set vcD2R2,$0D
(1)  533/    18AD : =$D                          set vcD2R3,$0D
(1)  533/    18AD : =$0                          set vcD2R4,$00
(1)  534/    18AD : (MACRO)              	smpsVcDecayLevel    $01, $01, $01, $01
(1)  534/    18AD : =$1                          set vcDL1,$01
(1)  534/    18AD : =$1                          set vcDL2,$01
(1)  534/    18AD : =$1                          set vcDL3,$01
(1)  534/    18AD : =$1                          set vcDL4,$01
(1)  535/    18AD : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  535/    18AD : =$F                          set vcRR1,$0F
(1)  535/    18AD : =$F                          set vcRR2,$0F
(1)  535/    18AD : =$F                          set vcRR3,$0F
(1)  535/    18AD : =$F                          set vcRR4,$0F
(1)  536/    18AD : (MACRO)              	smpsVcTotalLevel    $00, $00, $00, $1A
(1)  536/    18AD : =$0                          set vcTL1,$00
(1)  536/    18AD : =$0                          set vcTL2,$00
(1)  536/    18AD : =$0                          set vcTL3,$00
(1)  536/    18AD : =$1A                         set vcTL4,$1A
(1)  536/    18AD : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  536/    18AE :                     ;   0     1     2     3     4     5     6     7
(1)  536/    18AE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  536/    18AE : =>TRUE                       if SourceSMPS2ASM==0
(1)  536/    18AE : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  536/    18AE : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  536/    18AE : =$80                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  536/    18AE : =$80                                 set vcTLMask1,$80
(1)  536/    18AE : =>FALSE                      else
(1)  536/    18AE :                                     set vcTLMask4,0
(1)  536/    18AE :                                     set vcTLMask3,0
(1)  536/    18AE :                                     set vcTLMask2,0
(1)  536/    18AE :                                     set vcTLMask1,0
(1)  536/    18AE : [536]                        endif
(1)  536/    18AE :                     
(1)  536/    18AE : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  536/    18AE :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  536/    18AE :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  536/    18AE :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  536/    18AE :                                     set vcTLMask1,$80
(1)  536/    18AE :                                     set vcTL1,vcTL1&$7F
(1)  536/    18AE :                                     set vcTL2,vcTL2&$7F
(1)  536/    18AE :                                     set vcTL3,vcTL3&$7F
(1)  536/    18AE :                                     set vcTL4,vcTL4&$7F
(1)  536/    18AE : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  536/    18AE :                                     if MOMPASS=1
(1)  536/    18AE :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  536/    18AE : [536]                                endif
(1)  536/    18AE : [536]                        endif
(1)  536/    18AE :                     
(1)  536/    18AE : =>TRUE                       if SonicDriverVer==2
(1)  536/    18AE : 0102 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  536/    18B2 : 1490 0E0E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  536/    18B6 : 0802 0505                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  536/    18BA : 000D 0D0D                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  536/    18BE : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  536/    18C2 : 1A80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 60 - 01/15/2025 07:33:10 PM


(1)  536/    18C6 : =>FALSE                      else
(1)  536/    18C6 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  536/    18C6 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  536/    18C6 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  536/    18C6 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  536/    18C6 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  536/    18C6 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  536/    18C6 : [536]                        endif
(1)  537/    18C6 :                     
(1)  538/    18C6 :                     ;	Voice $04
(1)  539/    18C6 :                     ;	$2C
(1)  540/    18C6 :                     ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
(1)  541/    18C6 :                     ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
(1)  542/    18C6 : (MACRO)              	smpsVcAlgorithm     $04
(1)  542/    18C6 : =$4                  vcAlgorithm set $04
(1)  543/    18C6 : (MACRO)              	smpsVcFeedback      $05
(1)  543/    18C6 : =$5                  vcFeedback set $05
(1)  544/    18C6 : (MACRO)              	smpsVcUnusedBits    $00
(1)  544/    18C6 : =$0                  vcUnusedBits set $00
(1)  544/    18C6 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  544/    18C6 :                                     set vcD1R1Unk,<<5
(1)  544/    18C6 :                                     set vcD1R2Unk,<<5
(1)  544/    18C6 :                                     set vcD1R3Unk,<<5
(1)  544/    18C6 :                                     set vcD1R4Unk,<<5
(1)  544/    18C6 : =>TRUE                       else
(1)  544/    18C6 : =$0                                  set vcD1R1Unk,0
(1)  544/    18C6 : =$0                                  set vcD1R2Unk,0
(1)  544/    18C6 : =$0                                  set vcD1R3Unk,0
(1)  544/    18C6 : =$0                                  set vcD1R4Unk,0
(1)  544/    18C6 : [544]                        endif
(1)  545/    18C6 : (MACRO)              	smpsVcDetune        $03, $03, $07, $07
(1)  545/    18C6 : =$3                          set vcDT1,$03
(1)  545/    18C6 : =$3                          set vcDT2,$03
(1)  545/    18C6 : =$7                          set vcDT3,$07
(1)  545/    18C6 : =$7                          set vcDT4,$07
(1)  546/    18C6 : (MACRO)              	smpsVcCoarseFreq    $04, $04, $08, $02
(1)  546/    18C6 : =$4                          set vcCF1,$04
(1)  546/    18C6 : =$4                          set vcCF2,$04
(1)  546/    18C6 : =$8                          set vcCF3,$08
(1)  546/    18C6 : =$2                          set vcCF4,$02
(1)  547/    18C6 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  547/    18C6 : =$0                          set vcRS1,$00
(1)  547/    18C6 : =$0                          set vcRS2,$00
(1)  547/    18C6 : =$0                          set vcRS3,$00
(1)  547/    18C6 : =$0                          set vcRS4,$00
(1)  548/    18C6 : (MACRO)              	smpsVcAttackRate    $12, $1F, $12, $1F
(1)  548/    18C6 : =$12                         set vcAR1,$12
(1)  548/    18C6 : =$1F                         set vcAR2,$1F
(1)  548/    18C6 : =$12                         set vcAR3,$12
(1)  548/    18C6 : =$1F                         set vcAR4,$1F
(1)  549/    18C6 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  549/    18C6 : =>TRUE                       if SourceSMPS2ASM==0
(1)  549/    18C6 : =$0                                  set vcAM1,$00<<5
(1)  549/    18C6 : =$0                                  set vcAM2,$00<<5
(1)  549/    18C6 : =$0                                  set vcAM3,$00<<5
(1)  549/    18C6 : =$0                                  set vcAM4,$00<<5
(1)  549/    18C6 : =>FALSE                      else
(1)  549/    18C6 :                                     set vcAM1,$00<<7
(1)  549/    18C6 :                                     set vcAM2,$00<<7
(1)  549/    18C6 :                                     set vcAM3,$00<<7
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 61 - 01/15/2025 07:33:10 PM


(1)  549/    18C6 :                                     set vcAM4,$00<<7
(1)  549/    18C6 : [549]                        endif
(1)  550/    18C6 : (MACRO)              	smpsVcDecayRate1    $0A, $00, $0A, $00
(1)  550/    18C6 : =$A                          set vcD1R1,$0A
(1)  550/    18C6 : =$0                          set vcD1R2,$00
(1)  550/    18C6 : =$A                          set vcD1R3,$0A
(1)  550/    18C6 : =$0                          set vcD1R4,$00
(1)  551/    18C6 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)  551/    18C6 : =$0                          set vcD2R1,$00
(1)  551/    18C6 : =$0                          set vcD2R2,$00
(1)  551/    18C6 : =$0                          set vcD2R3,$00
(1)  551/    18C6 : =$0                          set vcD2R4,$00
(1)  552/    18C6 : (MACRO)              	smpsVcDecayLevel    $01, $00, $01, $00
(1)  552/    18C6 : =$1                          set vcDL1,$01
(1)  552/    18C6 : =$0                          set vcDL2,$00
(1)  552/    18C6 : =$1                          set vcDL3,$01
(1)  552/    18C6 : =$0                          set vcDL4,$00
(1)  553/    18C6 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  553/    18C6 : =$F                          set vcRR1,$0F
(1)  553/    18C6 : =$F                          set vcRR2,$0F
(1)  553/    18C6 : =$F                          set vcRR3,$0F
(1)  553/    18C6 : =$F                          set vcRR4,$0F
(1)  554/    18C6 : (MACRO)              	smpsVcTotalLevel    $00, $17, $00, $16
(1)  554/    18C6 : =$0                          set vcTL1,$00
(1)  554/    18C6 : =$17                         set vcTL2,$17
(1)  554/    18C6 : =$0                          set vcTL3,$00
(1)  554/    18C6 : =$16                         set vcTL4,$16
(1)  554/    18C6 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  554/    18C7 :                     ;   0     1     2     3     4     5     6     7
(1)  554/    18C7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  554/    18C7 : =>TRUE                       if SourceSMPS2ASM==0
(1)  554/    18C7 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  554/    18C7 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  554/    18C7 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  554/    18C7 : =$80                                 set vcTLMask1,$80
(1)  554/    18C7 : =>FALSE                      else
(1)  554/    18C7 :                                     set vcTLMask4,0
(1)  554/    18C7 :                                     set vcTLMask3,0
(1)  554/    18C7 :                                     set vcTLMask2,0
(1)  554/    18C7 :                                     set vcTLMask1,0
(1)  554/    18C7 : [554]                        endif
(1)  554/    18C7 :                     
(1)  554/    18C7 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  554/    18C7 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  554/    18C7 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  554/    18C7 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  554/    18C7 :                                     set vcTLMask1,$80
(1)  554/    18C7 :                                     set vcTL1,vcTL1&$7F
(1)  554/    18C7 :                                     set vcTL2,vcTL2&$7F
(1)  554/    18C7 :                                     set vcTL3,vcTL3&$7F
(1)  554/    18C7 :                                     set vcTL4,vcTL4&$7F
(1)  554/    18C7 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  554/    18C7 :                                     if MOMPASS=1
(1)  554/    18C7 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  554/    18C7 : [554]                                endif
(1)  554/    18C7 : [554]                        endif
(1)  554/    18C7 :                     
(1)  554/    18C7 : =>TRUE                       if SonicDriverVer==2
(1)  554/    18C7 : 7234 7834                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  554/    18CB : 1F1F 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 62 - 01/15/2025 07:33:10 PM


(1)  554/    18CF : 0000 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  554/    18D3 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  554/    18D7 : 0F0F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  554/    18DB : 1617 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  554/    18DF : =>FALSE                      else
(1)  554/    18DF :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  554/    18DF :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  554/    18DF :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  554/    18DF :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  554/    18DF :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  554/    18DF :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  554/    18DF : [554]                        endif
(1)  555/    18DF :                     
(1)  556/    18DF :                     ;	Voice $05
(1)  557/    18DF :                     ;	$2C
(1)  558/    18DF :                     ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
(1)  559/    18DF :                     ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
(1)  560/    18DF : (MACRO)              	smpsVcAlgorithm     $04
(1)  560/    18DF : =$4                  vcAlgorithm set $04
(1)  561/    18DF : (MACRO)              	smpsVcFeedback      $05
(1)  561/    18DF : =$5                  vcFeedback set $05
(1)  562/    18DF : (MACRO)              	smpsVcUnusedBits    $00
(1)  562/    18DF : =$0                  vcUnusedBits set $00
(1)  562/    18DF : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  562/    18DF :                                     set vcD1R1Unk,<<5
(1)  562/    18DF :                                     set vcD1R2Unk,<<5
(1)  562/    18DF :                                     set vcD1R3Unk,<<5
(1)  562/    18DF :                                     set vcD1R4Unk,<<5
(1)  562/    18DF : =>TRUE                       else
(1)  562/    18DF : =$0                                  set vcD1R1Unk,0
(1)  562/    18DF : =$0                                  set vcD1R2Unk,0
(1)  562/    18DF : =$0                                  set vcD1R3Unk,0
(1)  562/    18DF : =$0                                  set vcD1R4Unk,0
(1)  562/    18DF : [562]                        endif
(1)  563/    18DF : (MACRO)              	smpsVcDetune        $03, $03, $07, $07
(1)  563/    18DF : =$3                          set vcDT1,$03
(1)  563/    18DF : =$3                          set vcDT2,$03
(1)  563/    18DF : =$7                          set vcDT3,$07
(1)  563/    18DF : =$7                          set vcDT4,$07
(1)  564/    18DF : (MACRO)              	smpsVcCoarseFreq    $04, $04, $04, $04
(1)  564/    18DF : =$4                          set vcCF1,$04
(1)  564/    18DF : =$4                          set vcCF2,$04
(1)  564/    18DF : =$4                          set vcCF3,$04
(1)  564/    18DF : =$4                          set vcCF4,$04
(1)  565/    18DF : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  565/    18DF : =$0                          set vcRS1,$00
(1)  565/    18DF : =$0                          set vcRS2,$00
(1)  565/    18DF : =$0                          set vcRS3,$00
(1)  565/    18DF : =$0                          set vcRS4,$00
(1)  566/    18DF : (MACRO)              	smpsVcAttackRate    $1F, $1F, $12, $1F
(1)  566/    18DF : =$1F                         set vcAR1,$1F
(1)  566/    18DF : =$1F                         set vcAR2,$1F
(1)  566/    18DF : =$12                         set vcAR3,$12
(1)  566/    18DF : =$1F                         set vcAR4,$1F
(1)  567/    18DF : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  567/    18DF : =>TRUE                       if SourceSMPS2ASM==0
(1)  567/    18DF : =$0                                  set vcAM1,$00<<5
(1)  567/    18DF : =$0                                  set vcAM2,$00<<5
(1)  567/    18DF : =$0                                  set vcAM3,$00<<5
(1)  567/    18DF : =$0                                  set vcAM4,$00<<5
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 63 - 01/15/2025 07:33:10 PM


(1)  567/    18DF : =>FALSE                      else
(1)  567/    18DF :                                     set vcAM1,$00<<7
(1)  567/    18DF :                                     set vcAM2,$00<<7
(1)  567/    18DF :                                     set vcAM3,$00<<7
(1)  567/    18DF :                                     set vcAM4,$00<<7
(1)  567/    18DF : [567]                        endif
(1)  568/    18DF : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)  568/    18DF : =$0                          set vcD1R1,$00
(1)  568/    18DF : =$0                          set vcD1R2,$00
(1)  568/    18DF : =$0                          set vcD1R3,$00
(1)  568/    18DF : =$0                          set vcD1R4,$00
(1)  569/    18DF : (MACRO)              	smpsVcDecayRate2    $01, $00, $01, $00
(1)  569/    18DF : =$1                          set vcD2R1,$01
(1)  569/    18DF : =$0                          set vcD2R2,$00
(1)  569/    18DF : =$1                          set vcD2R3,$01
(1)  569/    18DF : =$0                          set vcD2R4,$00
(1)  570/    18DF : (MACRO)              	smpsVcDecayLevel    $03, $00, $03, $00
(1)  570/    18DF : =$3                          set vcDL1,$03
(1)  570/    18DF : =$0                          set vcDL2,$00
(1)  570/    18DF : =$3                          set vcDL3,$03
(1)  570/    18DF : =$0                          set vcDL4,$00
(1)  571/    18DF : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  571/    18DF : =$F                          set vcRR1,$0F
(1)  571/    18DF : =$F                          set vcRR2,$0F
(1)  571/    18DF : =$F                          set vcRR3,$0F
(1)  571/    18DF : =$F                          set vcRR4,$0F
(1)  572/    18DF : (MACRO)              	smpsVcTotalLevel    $00, $17, $00, $16
(1)  572/    18DF : =$0                          set vcTL1,$00
(1)  572/    18DF : =$17                         set vcTL2,$17
(1)  572/    18DF : =$0                          set vcTL3,$00
(1)  572/    18DF : =$16                         set vcTL4,$16
(1)  572/    18DF : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  572/    18E0 :                     ;   0     1     2     3     4     5     6     7
(1)  572/    18E0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  572/    18E0 : =>TRUE                       if SourceSMPS2ASM==0
(1)  572/    18E0 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  572/    18E0 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  572/    18E0 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  572/    18E0 : =$80                                 set vcTLMask1,$80
(1)  572/    18E0 : =>FALSE                      else
(1)  572/    18E0 :                                     set vcTLMask4,0
(1)  572/    18E0 :                                     set vcTLMask3,0
(1)  572/    18E0 :                                     set vcTLMask2,0
(1)  572/    18E0 :                                     set vcTLMask1,0
(1)  572/    18E0 : [572]                        endif
(1)  572/    18E0 :                     
(1)  572/    18E0 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  572/    18E0 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  572/    18E0 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  572/    18E0 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  572/    18E0 :                                     set vcTLMask1,$80
(1)  572/    18E0 :                                     set vcTL1,vcTL1&$7F
(1)  572/    18E0 :                                     set vcTL2,vcTL2&$7F
(1)  572/    18E0 :                                     set vcTL3,vcTL3&$7F
(1)  572/    18E0 :                                     set vcTL4,vcTL4&$7F
(1)  572/    18E0 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  572/    18E0 :                                     if MOMPASS=1
(1)  572/    18E0 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  572/    18E0 : [572]                                endif
(1)  572/    18E0 : [572]                        endif
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 64 - 01/15/2025 07:33:10 PM


(1)  572/    18E0 :                     
(1)  572/    18E0 : =>TRUE                       if SonicDriverVer==2
(1)  572/    18E0 : 7434 7434                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  572/    18E4 : 1F1F 121F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  572/    18E8 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  572/    18EC : 0000 0101                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  572/    18F0 : 0F0F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  572/    18F4 : 1617 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  572/    18F8 : =>FALSE                      else
(1)  572/    18F8 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  572/    18F8 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  572/    18F8 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  572/    18F8 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  572/    18F8 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  572/    18F8 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  572/    18F8 : [572]                        endif
(1)  573/    18F8 :                     
(1)  574/    18F8 :                     ;	Voice $06
(1)  575/    18F8 :                     ;	$04
(1)  576/    18F8 :                     ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
(1)  577/    18F8 :                     ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
(1)  578/    18F8 : (MACRO)              	smpsVcAlgorithm     $04
(1)  578/    18F8 : =$4                  vcAlgorithm set $04
(1)  579/    18F8 : (MACRO)              	smpsVcFeedback      $00
(1)  579/    18F8 : =$0                  vcFeedback set $00
(1)  580/    18F8 : (MACRO)              	smpsVcUnusedBits    $00
(1)  580/    18F8 : =$0                  vcUnusedBits set $00
(1)  580/    18F8 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  580/    18F8 :                                     set vcD1R1Unk,<<5
(1)  580/    18F8 :                                     set vcD1R2Unk,<<5
(1)  580/    18F8 :                                     set vcD1R3Unk,<<5
(1)  580/    18F8 :                                     set vcD1R4Unk,<<5
(1)  580/    18F8 : =>TRUE                       else
(1)  580/    18F8 : =$0                                  set vcD1R1Unk,0
(1)  580/    18F8 : =$0                                  set vcD1R2Unk,0
(1)  580/    18F8 : =$0                                  set vcD1R3Unk,0
(1)  580/    18F8 : =$0                                  set vcD1R4Unk,0
(1)  580/    18F8 : [580]                        endif
(1)  581/    18F8 : (MACRO)              	smpsVcDetune        $03, $03, $04, $07
(1)  581/    18F8 : =$3                          set vcDT1,$03
(1)  581/    18F8 : =$3                          set vcDT2,$03
(1)  581/    18F8 : =$4                          set vcDT3,$04
(1)  581/    18F8 : =$7                          set vcDT4,$07
(1)  582/    18F8 : (MACRO)              	smpsVcCoarseFreq    $02, $02, $02, $02
(1)  582/    18F8 : =$2                          set vcCF1,$02
(1)  582/    18F8 : =$2                          set vcCF2,$02
(1)  582/    18F8 : =$2                          set vcCF3,$02
(1)  582/    18F8 : =$2                          set vcCF4,$02
(1)  583/    18F8 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  583/    18F8 : =$0                          set vcRS1,$00
(1)  583/    18F8 : =$0                          set vcRS2,$00
(1)  583/    18F8 : =$0                          set vcRS3,$00
(1)  583/    18F8 : =$0                          set vcRS4,$00
(1)  584/    18F8 : (MACRO)              	smpsVcAttackRate    $12, $12, $12, $12
(1)  584/    18F8 : =$12                         set vcAR1,$12
(1)  584/    18F8 : =$12                         set vcAR2,$12
(1)  584/    18F8 : =$12                         set vcAR3,$12
(1)  584/    18F8 : =$12                         set vcAR4,$12
(1)  585/    18F8 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  585/    18F8 : =>TRUE                       if SourceSMPS2ASM==0
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 65 - 01/15/2025 07:33:10 PM


(1)  585/    18F8 : =$0                                  set vcAM1,$00<<5
(1)  585/    18F8 : =$0                                  set vcAM2,$00<<5
(1)  585/    18F8 : =$0                                  set vcAM3,$00<<5
(1)  585/    18F8 : =$0                                  set vcAM4,$00<<5
(1)  585/    18F8 : =>FALSE                      else
(1)  585/    18F8 :                                     set vcAM1,$00<<7
(1)  585/    18F8 :                                     set vcAM2,$00<<7
(1)  585/    18F8 :                                     set vcAM3,$00<<7
(1)  585/    18F8 :                                     set vcAM4,$00<<7
(1)  585/    18F8 : [585]                        endif
(1)  586/    18F8 : (MACRO)              	smpsVcDecayRate1    $08, $00, $08, $00
(1)  586/    18F8 : =$8                          set vcD1R1,$08
(1)  586/    18F8 : =$0                          set vcD1R2,$00
(1)  586/    18F8 : =$8                          set vcD1R3,$08
(1)  586/    18F8 : =$0                          set vcD1R4,$00
(1)  587/    18F8 : (MACRO)              	smpsVcDecayRate2    $08, $00, $08, $00
(1)  587/    18F8 : =$8                          set vcD2R1,$08
(1)  587/    18F8 : =$0                          set vcD2R2,$00
(1)  587/    18F8 : =$8                          set vcD2R3,$08
(1)  587/    18F8 : =$0                          set vcD2R4,$00
(1)  588/    18F8 : (MACRO)              	smpsVcDecayLevel    $01, $00, $01, $00
(1)  588/    18F8 : =$1                          set vcDL1,$01
(1)  588/    18F8 : =$0                          set vcDL2,$00
(1)  588/    18F8 : =$1                          set vcDL3,$01
(1)  588/    18F8 : =$0                          set vcDL4,$00
(1)  589/    18F8 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  589/    18F8 : =$F                          set vcRR1,$0F
(1)  589/    18F8 : =$F                          set vcRR2,$0F
(1)  589/    18F8 : =$F                          set vcRR3,$0F
(1)  589/    18F8 : =$F                          set vcRR4,$0F
(1)  590/    18F8 : (MACRO)              	smpsVcTotalLevel    $00, $23, $00, $23
(1)  590/    18F8 : =$0                          set vcTL1,$00
(1)  590/    18F8 : =$23                         set vcTL2,$23
(1)  590/    18F8 : =$0                          set vcTL3,$00
(1)  590/    18F8 : =$23                         set vcTL4,$23
(1)  590/    18F8 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  590/    18F9 :                     ;   0     1     2     3     4     5     6     7
(1)  590/    18F9 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  590/    18F9 : =>TRUE                       if SourceSMPS2ASM==0
(1)  590/    18F9 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  590/    18F9 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  590/    18F9 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  590/    18F9 : =$80                                 set vcTLMask1,$80
(1)  590/    18F9 : =>FALSE                      else
(1)  590/    18F9 :                                     set vcTLMask4,0
(1)  590/    18F9 :                                     set vcTLMask3,0
(1)  590/    18F9 :                                     set vcTLMask2,0
(1)  590/    18F9 :                                     set vcTLMask1,0
(1)  590/    18F9 : [590]                        endif
(1)  590/    18F9 :                     
(1)  590/    18F9 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  590/    18F9 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  590/    18F9 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  590/    18F9 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  590/    18F9 :                                     set vcTLMask1,$80
(1)  590/    18F9 :                                     set vcTL1,vcTL1&$7F
(1)  590/    18F9 :                                     set vcTL2,vcTL2&$7F
(1)  590/    18F9 :                                     set vcTL3,vcTL3&$7F
(1)  590/    18F9 :                                     set vcTL4,vcTL4&$7F
(1)  590/    18F9 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 66 - 01/15/2025 07:33:10 PM


(1)  590/    18F9 :                                     if MOMPASS=1
(1)  590/    18F9 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  590/    18F9 : [590]                                endif
(1)  590/    18F9 : [590]                        endif
(1)  590/    18F9 :                     
(1)  590/    18F9 : =>TRUE                       if SonicDriverVer==2
(1)  590/    18F9 : 7232 4232                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  590/    18FD : 1212 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  590/    1901 : 0000 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  590/    1905 : 0000 0808                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  590/    1909 : 0F0F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  590/    190D : 2323 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  590/    1911 : =>FALSE                      else
(1)  590/    1911 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  590/    1911 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  590/    1911 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  590/    1911 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  590/    1911 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  590/    1911 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  590/    1911 : [590]                        endif
(1)  591/    1911 :                     
(1)  592/    1911 :                     ;	Voice $07
(1)  593/    1911 :                     ;	$3D
(1)  594/    1911 :                     ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
(1)  595/    1911 :                     ;	$01, $00, $00, $00, 	$20, $17, $17, $17, 	$1C, $80, $80, $80
(1)  596/    1911 : (MACRO)              	smpsVcAlgorithm     $05
(1)  596/    1911 : =$5                  vcAlgorithm set $05
(1)  597/    1911 : (MACRO)              	smpsVcFeedback      $07
(1)  597/    1911 : =$7                  vcFeedback set $07
(1)  598/    1911 : (MACRO)              	smpsVcUnusedBits    $00
(1)  598/    1911 : =$0                  vcUnusedBits set $00
(1)  598/    1911 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  598/    1911 :                                     set vcD1R1Unk,<<5
(1)  598/    1911 :                                     set vcD1R2Unk,<<5
(1)  598/    1911 :                                     set vcD1R3Unk,<<5
(1)  598/    1911 :                                     set vcD1R4Unk,<<5
(1)  598/    1911 : =>TRUE                       else
(1)  598/    1911 : =$0                                  set vcD1R1Unk,0
(1)  598/    1911 : =$0                                  set vcD1R2Unk,0
(1)  598/    1911 : =$0                                  set vcD1R3Unk,0
(1)  598/    1911 : =$0                                  set vcD1R4Unk,0
(1)  598/    1911 : [598]                        endif
(1)  599/    1911 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  599/    1911 : =$0                          set vcDT1,$00
(1)  599/    1911 : =$0                          set vcDT2,$00
(1)  599/    1911 : =$0                          set vcDT3,$00
(1)  599/    1911 : =$0                          set vcDT4,$00
(1)  600/    1911 : (MACRO)              	smpsVcCoarseFreq    $02, $02, $02, $01
(1)  600/    1911 : =$2                          set vcCF1,$02
(1)  600/    1911 : =$2                          set vcCF2,$02
(1)  600/    1911 : =$2                          set vcCF3,$02
(1)  600/    1911 : =$1                          set vcCF4,$01
(1)  601/    1911 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $00
(1)  601/    1911 : =$1                          set vcRS1,$01
(1)  601/    1911 : =$1                          set vcRS2,$01
(1)  601/    1911 : =$1                          set vcRS3,$01
(1)  601/    1911 : =$0                          set vcRS4,$00
(1)  602/    1911 : (MACRO)              	smpsVcAttackRate    $10, $10, $10, $10
(1)  602/    1911 : =$10                         set vcAR1,$10
(1)  602/    1911 : =$10                         set vcAR2,$10
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 67 - 01/15/2025 07:33:10 PM


(1)  602/    1911 : =$10                         set vcAR3,$10
(1)  602/    1911 : =$10                         set vcAR4,$10
(1)  603/    1911 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  603/    1911 : =>TRUE                       if SourceSMPS2ASM==0
(1)  603/    1911 : =$0                                  set vcAM1,$00<<5
(1)  603/    1911 : =$0                                  set vcAM2,$00<<5
(1)  603/    1911 : =$0                                  set vcAM3,$00<<5
(1)  603/    1911 : =$0                                  set vcAM4,$00<<5
(1)  603/    1911 : =>FALSE                      else
(1)  603/    1911 :                                     set vcAM1,$00<<7
(1)  603/    1911 :                                     set vcAM2,$00<<7
(1)  603/    1911 :                                     set vcAM3,$00<<7
(1)  603/    1911 :                                     set vcAM4,$00<<7
(1)  603/    1911 : [603]                        endif
(1)  604/    1911 : (MACRO)              	smpsVcDecayRate1    $08, $08, $08, $07
(1)  604/    1911 : =$8                          set vcD1R1,$08
(1)  604/    1911 : =$8                          set vcD1R2,$08
(1)  604/    1911 : =$8                          set vcD1R3,$08
(1)  604/    1911 : =$7                          set vcD1R4,$07
(1)  605/    1911 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $01
(1)  605/    1911 : =$0                          set vcD2R1,$00
(1)  605/    1911 : =$0                          set vcD2R2,$00
(1)  605/    1911 : =$0                          set vcD2R3,$00
(1)  605/    1911 : =$1                          set vcD2R4,$01
(1)  606/    1911 : (MACRO)              	smpsVcDecayLevel    $01, $01, $01, $02
(1)  606/    1911 : =$1                          set vcDL1,$01
(1)  606/    1911 : =$1                          set vcDL2,$01
(1)  606/    1911 : =$1                          set vcDL3,$01
(1)  606/    1911 : =$2                          set vcDL4,$02
(1)  607/    1911 : (MACRO)              	smpsVcReleaseRate   $07, $07, $07, $00
(1)  607/    1911 : =$7                          set vcRR1,$07
(1)  607/    1911 : =$7                          set vcRR2,$07
(1)  607/    1911 : =$7                          set vcRR3,$07
(1)  607/    1911 : =$0                          set vcRR4,$00
(1)  608/    1911 : (MACRO)              	smpsVcTotalLevel    $00, $00, $00, $1C
(1)  608/    1911 : =$0                          set vcTL1,$00
(1)  608/    1911 : =$0                          set vcTL2,$00
(1)  608/    1911 : =$0                          set vcTL3,$00
(1)  608/    1911 : =$1C                         set vcTL4,$1C
(1)  608/    1911 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  608/    1912 :                     ;   0     1     2     3     4     5     6     7
(1)  608/    1912 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  608/    1912 : =>TRUE                       if SourceSMPS2ASM==0
(1)  608/    1912 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  608/    1912 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  608/    1912 : =$80                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  608/    1912 : =$80                                 set vcTLMask1,$80
(1)  608/    1912 : =>FALSE                      else
(1)  608/    1912 :                                     set vcTLMask4,0
(1)  608/    1912 :                                     set vcTLMask3,0
(1)  608/    1912 :                                     set vcTLMask2,0
(1)  608/    1912 :                                     set vcTLMask1,0
(1)  608/    1912 : [608]                        endif
(1)  608/    1912 :                     
(1)  608/    1912 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  608/    1912 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  608/    1912 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  608/    1912 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  608/    1912 :                                     set vcTLMask1,$80
(1)  608/    1912 :                                     set vcTL1,vcTL1&$7F
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 68 - 01/15/2025 07:33:10 PM


(1)  608/    1912 :                                     set vcTL2,vcTL2&$7F
(1)  608/    1912 :                                     set vcTL3,vcTL3&$7F
(1)  608/    1912 :                                     set vcTL4,vcTL4&$7F
(1)  608/    1912 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  608/    1912 :                                     if MOMPASS=1
(1)  608/    1912 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  608/    1912 : [608]                                endif
(1)  608/    1912 : [608]                        endif
(1)  608/    1912 :                     
(1)  608/    1912 : =>TRUE                       if SonicDriverVer==2
(1)  608/    1912 : 0102 0202                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  608/    1916 : 1050 5050                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  608/    191A : 0708 0808                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  608/    191E : 0100 0000                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  608/    1922 : 2017 1717                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  608/    1926 : 1C80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  608/    192A : =>FALSE                      else
(1)  608/    192A :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  608/    192A :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  608/    192A :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  608/    192A :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  608/    192A :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  608/    192A :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  608/    192A : [608]                        endif
(1)  609/    192A :                     
(1)  610/    192A :                     ;	Voice $08
(1)  611/    192A :                     ;	$2C
(1)  612/    192A :                     ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
(1)  613/    192A :                     ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
(1)  614/    192A : (MACRO)              	smpsVcAlgorithm     $04
(1)  614/    192A : =$4                  vcAlgorithm set $04
(1)  615/    192A : (MACRO)              	smpsVcFeedback      $05
(1)  615/    192A : =$5                  vcFeedback set $05
(1)  616/    192A : (MACRO)              	smpsVcUnusedBits    $00
(1)  616/    192A : =$0                  vcUnusedBits set $00
(1)  616/    192A : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  616/    192A :                                     set vcD1R1Unk,<<5
(1)  616/    192A :                                     set vcD1R2Unk,<<5
(1)  616/    192A :                                     set vcD1R3Unk,<<5
(1)  616/    192A :                                     set vcD1R4Unk,<<5
(1)  616/    192A : =>TRUE                       else
(1)  616/    192A : =$0                                  set vcD1R1Unk,0
(1)  616/    192A : =$0                                  set vcD1R2Unk,0
(1)  616/    192A : =$0                                  set vcD1R3Unk,0
(1)  616/    192A : =$0                                  set vcD1R4Unk,0
(1)  616/    192A : [616]                        endif
(1)  617/    192A : (MACRO)              	smpsVcDetune        $03, $03, $07, $07
(1)  617/    192A : =$3                          set vcDT1,$03
(1)  617/    192A : =$3                          set vcDT2,$03
(1)  617/    192A : =$7                          set vcDT3,$07
(1)  617/    192A : =$7                          set vcDT4,$07
(1)  618/    192A : (MACRO)              	smpsVcCoarseFreq    $04, $04, $04, $04
(1)  618/    192A : =$4                          set vcCF1,$04
(1)  618/    192A : =$4                          set vcCF2,$04
(1)  618/    192A : =$4                          set vcCF3,$04
(1)  618/    192A : =$4                          set vcCF4,$04
(1)  619/    192A : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  619/    192A : =$0                          set vcRS1,$00
(1)  619/    192A : =$0                          set vcRS2,$00
(1)  619/    192A : =$0                          set vcRS3,$00
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 69 - 01/15/2025 07:33:10 PM


(1)  619/    192A : =$0                          set vcRS4,$00
(1)  620/    192A : (MACRO)              	smpsVcAttackRate    $1F, $1F, $12, $1F
(1)  620/    192A : =$1F                         set vcAR1,$1F
(1)  620/    192A : =$1F                         set vcAR2,$1F
(1)  620/    192A : =$12                         set vcAR3,$12
(1)  620/    192A : =$1F                         set vcAR4,$1F
(1)  621/    192A : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  621/    192A : =>TRUE                       if SourceSMPS2ASM==0
(1)  621/    192A : =$0                                  set vcAM1,$00<<5
(1)  621/    192A : =$0                                  set vcAM2,$00<<5
(1)  621/    192A : =$0                                  set vcAM3,$00<<5
(1)  621/    192A : =$0                                  set vcAM4,$00<<5
(1)  621/    192A : =>FALSE                      else
(1)  621/    192A :                                     set vcAM1,$00<<7
(1)  621/    192A :                                     set vcAM2,$00<<7
(1)  621/    192A :                                     set vcAM3,$00<<7
(1)  621/    192A :                                     set vcAM4,$00<<7
(1)  621/    192A : [621]                        endif
(1)  622/    192A : (MACRO)              	smpsVcDecayRate1    $07, $00, $07, $00
(1)  622/    192A : =$7                          set vcD1R1,$07
(1)  622/    192A : =$0                          set vcD1R2,$00
(1)  622/    192A : =$7                          set vcD1R3,$07
(1)  622/    192A : =$0                          set vcD1R4,$00
(1)  623/    192A : (MACRO)              	smpsVcDecayRate2    $07, $00, $07, $00
(1)  623/    192A : =$7                          set vcD2R1,$07
(1)  623/    192A : =$0                          set vcD2R2,$00
(1)  623/    192A : =$7                          set vcD2R3,$07
(1)  623/    192A : =$0                          set vcD2R4,$00
(1)  624/    192A : (MACRO)              	smpsVcDecayLevel    $03, $00, $03, $00
(1)  624/    192A : =$3                          set vcDL1,$03
(1)  624/    192A : =$0                          set vcDL2,$00
(1)  624/    192A : =$3                          set vcDL3,$03
(1)  624/    192A : =$0                          set vcDL4,$00
(1)  625/    192A : (MACRO)              	smpsVcReleaseRate   $08, $00, $08, $00
(1)  625/    192A : =$8                          set vcRR1,$08
(1)  625/    192A : =$0                          set vcRR2,$00
(1)  625/    192A : =$8                          set vcRR3,$08
(1)  625/    192A : =$0                          set vcRR4,$00
(1)  626/    192A : (MACRO)              	smpsVcTotalLevel    $00, $17, $00, $16
(1)  626/    192A : =$0                          set vcTL1,$00
(1)  626/    192A : =$17                         set vcTL2,$17
(1)  626/    192A : =$0                          set vcTL3,$00
(1)  626/    192A : =$16                         set vcTL4,$16
(1)  626/    192A : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  626/    192B :                     ;   0     1     2     3     4     5     6     7
(1)  626/    192B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  626/    192B : =>TRUE                       if SourceSMPS2ASM==0
(1)  626/    192B : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  626/    192B : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  626/    192B : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  626/    192B : =$80                                 set vcTLMask1,$80
(1)  626/    192B : =>FALSE                      else
(1)  626/    192B :                                     set vcTLMask4,0
(1)  626/    192B :                                     set vcTLMask3,0
(1)  626/    192B :                                     set vcTLMask2,0
(1)  626/    192B :                                     set vcTLMask1,0
(1)  626/    192B : [626]                        endif
(1)  626/    192B :                     
(1)  626/    192B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  626/    192B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
 AS V1.42 Beta [Bld 212] - Source File song.asm(A4 - S1GHZEDIT.asm) - Page 70 - 01/15/2025 07:33:10 PM


(1)  626/    192B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  626/    192B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  626/    192B :                                     set vcTLMask1,$80
(1)  626/    192B :                                     set vcTL1,vcTL1&$7F
(1)  626/    192B :                                     set vcTL2,vcTL2&$7F
(1)  626/    192B :                                     set vcTL3,vcTL3&$7F
(1)  626/    192B :                                     set vcTL4,vcTL4&$7F
(1)  626/    192B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  626/    192B :                                     if MOMPASS=1
(1)  626/    192B :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  626/    192B : [626]                                endif
(1)  626/    192B : [626]                        endif
(1)  626/    192B :                     
(1)  626/    192B : =>TRUE                       if SonicDriverVer==2
(1)  626/    192B : 7434 7434                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  626/    192F : 1F1F 121F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  626/    1933 : 0000 0707                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  626/    1937 : 0000 0707                           dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  626/    193B : 0000 3838                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  626/    193F : 1617 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  626/    1943 : =>FALSE                      else
(1)  626/    1943 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  626/    1943 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  626/    1943 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  626/    1943 :                                     dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  626/    1943 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  626/    1943 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  626/    1943 : [626]                        endif
(1)  627/    1943 :                     
(1)  628/    1943 :                     
      12/     5C3 :                     	dephase
      13/     5C3 :                     
      14/     5C3 : =>FALSE              	if *>$7C0
      15/     5C3 :                     		error "This song is too big and will overflow the decompression buffer! It should be uncompressed instead!"
      16/     5C3 : [14]                 	endif
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 71 - 01/15/2025 07:33:10 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :      "x86_64-Linux" - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  1 - |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
*CUSTOM :                         0 - | *DATE :                "01/15/2025" - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*FixMusicAndSFXDataBugs :         0 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         7 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
 Mus81_GHZ_Call00 :            176B C |  Mus81_GHZ_Call01 :            1689 C |
 Mus81_GHZ_Call02 :            1410 C |  Mus81_GHZ_Call03 :            158B C |
 Mus81_GHZ_Call04 :            158C C |  Mus81_GHZ_Call05 :            14A1 C |
 Mus81_GHZ_Call06 :            14D3 C |  Mus81_GHZ_Call07 :            1411 C |
 Mus81_GHZ_DAC :               1821 C |  Mus81_GHZ_FM1 :               13B0 C |
 Mus81_GHZ_FM2 :               141A C |  Mus81_GHZ_FM3 :               14FF C |
 Mus81_GHZ_FM4 :               15A4 C |  Mus81_GHZ_FM5 :               1699 C |
*Mus81_GHZ_Header :            1380 C |  Mus81_GHZ_Jump00 :            170A C |
 Mus81_GHZ_Jump01 :            1614 C |  Mus81_GHZ_Jump02 :            152F C |
 Mus81_GHZ_Jump03 :            1456 C |  Mus81_GHZ_Jump04 :            13D5 C |
 Mus81_GHZ_Jump05 :            181D C |  Mus81_GHZ_Loop00 :            182A C |
 Mus81_GHZ_Loop01 :            1842 C |  Mus81_GHZ_Loop02 :            16A6 C |
 Mus81_GHZ_Loop03 :            16DE C |  Mus81_GHZ_Loop04 :            1750 C |
 Mus81_GHZ_Loop05 :            1755 C |  Mus81_GHZ_Loop06 :            175A C |
 Mus81_GHZ_Loop07 :            175F C |  Mus81_GHZ_Loop08 :            15AF C |
 Mus81_GHZ_Loop09 :            15E7 C |  Mus81_GHZ_Loop0A :            1510 C |
 Mus81_GHZ_Loop0B :            1524 C |  Mus81_GHZ_Loop0C :            142B C |
 Mus81_GHZ_Loop0D :            144A C |  Mus81_GHZ_Loop0E :            13B9 C |
 Mus81_GHZ_Loop0F :            17EA C |  Mus81_GHZ_Loop10 :            17F5 C |
 Mus81_GHZ_Loop11 :            17F3 C |  Mus81_GHZ_Loop12 :            17AF C |
 Mus81_GHZ_Loop13 :            17AD C |  Mus81_GHZ_PSG1 :              177B C |
 Mus81_GHZ_PSG2 :              17E6 C |  Mus81_GHZ_PSG3 :              1815 C |
 Mus81_GHZ_Voices :            1862 C | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*RELAXED :                        0 - | *SMPS2ASMVer :                    1 - |
 SonicDriverVer :                 2 - |  SourceDriver :                   1 - |
 SourceSMPS2ASM :                 0 - | *TIME :               "07:33:10 PM" - |
*TRUE :                           1 - | *VERSION :                     142F - |
*Z80SYNTAX :                      0 - | *cFM3 :                           2 - |
*cFM4 :                           4 - | *cFM5 :                           5 - |
*cFM6 :                           6 - | *cNoise :                        E0 - |
*cPSG1 :                         80 - | *cPSG2 :                         A0 - |
*cPSG3 :                         C0 - | *dClap :                         83 - |
*dFloorTom :                     8E - | *dHiClap :                       8F - |
*dHiTimpani :                    88 - | *dHiTom :                        86 - |
 dKick :                         81 - | *dLowClap :                      91 - |
*dLowTimpani :                   8A - | *dLowTom :                       8D - |
*dMidClap :                      90 - | *dMidTimpani :                   89 - |
*dMidTom :                       8C - | *dScratch :                      84 - |
 dSnare :                        82 - | *dTimpani :                      85 - |
*dVLowClap :                     87 - | *dVLowTimpani :                  8B - |
 fTone_01 :                       1 - | *fTone_02 :                       2 - |
 fTone_03 :                       3 - |  fTone_04 :                       4 - |
 fTone_05 :                       5 - |  fTone_06 :                       6 - |
*fTone_07 :                       7 - | *fTone_08 :                       8 - |
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 72 - 01/15/2025 07:33:10 PM


*fTone_09 :                       9 - | *fTone_0A :                       A - |
*fTone_0B :                       B - | *fTone_0C :                       C - |
*fTone_0D :                       D - | *nA0 :                           8A - |
*nA1 :                           96 - |  nA2 :                           A2 - |
 nA3 :                           AE - |  nA4 :                           BA - |
 nA5 :                           C6 - |  nA6 :                           D2 - |
*nA7 :                           DE - | *nAb0 :                          89 - |
*nAb1 :                          95 - | *nAb2 :                          A1 - |
 nAb3 :                          AD - | *nAb4 :                          B9 - |
 nAb5 :                          C5 - |  nAb6 :                          D1 - |
*nAb7 :                          DD - | *nB0 :                           8C - |
*nB1 :                           98 - |  nB2 :                           A4 - |
 nB3 :                           B0 - |  nB4 :                           BC - |
 nB5 :                           C8 - |  nB6 :                           D4 - |
*nBb0 :                          8B - | *nBb1 :                          97 - |
 nBb2 :                          A3 - |  nBb3 :                          AF - |
*nBb4 :                          BB - |  nBb5 :                          C7 - |
 nBb6 :                          D3 - | *nBb7 :                          DF - |
*nC0 :                           81 - | *nC1 :                           8D - |
*nC2 :                           99 - |  nC3 :                           A5 - |
*nC4 :                           B1 - |  nC5 :                           BD - |
*nC6 :                           C9 - | *nC7 :                           D5 - |
*nCs0 :                          82 - | *nCs1 :                          8E - |
*nCs2 :                          9A - | *nCs3 :                          A6 - |
*nCs4 :                          B2 - | *nCs5 :                          BE - |
 nCs6 :                          CA - | *nCs7 :                          D6 - |
*nD0 :                           83 - | *nD1 :                           8F - |
 nD2 :                           9B - |  nD3 :                           A7 - |
 nD4 :                           B3 - |  nD5 :                           BF - |
*nD6 :                           CB - | *nD7 :                           D7 - |
*nE0 :                           85 - | *nE1 :                           91 - |
 nE2 :                           9D - |  nE3 :                           A9 - |
 nE4 :                           B5 - |  nE5 :                           C1 - |
*nE6 :                           CD - |  nE7 :                           D9 - |
*nEb0 :                          84 - | *nEb1 :                          90 - |
*nEb2 :                          9C - |  nEb3 :                          A8 - |
*nEb4 :                          B4 - |  nEb5 :                          C0 - |
 nEb6 :                          CC - | *nEb7 :                          D8 - |
*nF0 :                           86 - | *nF1 :                           92 - |
 nF2 :                           9E - |  nF3 :                           AA - |
 nF4 :                           B6 - |  nF5 :                           C2 - |
 nF6 :                           CE - |  nF7 :                           DA - |
*nFs0 :                          87 - | *nFs1 :                          93 - |
*nFs2 :                          9F - | *nFs3 :                          AB - |
*nFs4 :                          B7 - |  nFs5 :                          C3 - |
*nFs6 :                          CF - | *nFs7 :                          DB - |
*nG0 :                           88 - | *nG1 :                           94 - |
 nG2 :                           A0 - |  nG3 :                           AC - |
 nG4 :                           B8 - |  nG5 :                           C4 - |
 nG6 :                           D0 - |  nG7 :                           DC - |
 nMaxPSG :                       C6 - | *nMaxPSG1 :                      D2 - |
*nMaxPSG2 :                      D2 - |  nRst :                          80 - |
 panCenter :                     C0 - | *panCentre :                     C0 - |
 panLeft :                       80 - | *panNone :                        0 - |
 panRight :                      40 - |  psgdelta :                       C - |
 smpsNoAttack :                  E7 - | *smpsPitch00 :                    0 - |
*smpsPitch01hi :                  C - | *smpsPitch01lo :                 F4 - |
*smpsPitch02hi :                 18 - | *smpsPitch02lo :                 E8 - |
*smpsPitch03hi :                 24 - | *smpsPitch03lo :                 DC - |
*smpsPitch04hi :                 30 - | *smpsPitch04lo :                 D0 - |
 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 73 - 01/15/2025 07:33:10 PM


*smpsPitch05hi :                 3C - | *smpsPitch05lo :                 C4 - |
*smpsPitch06hi :                 48 - | *smpsPitch06lo :                 B8 - |
*smpsPitch07hi :                 54 - | *smpsPitch07lo :                 AC - |
*smpsPitch08hi :                 60 - | *smpsPitch08lo :                 A0 - |
*smpsPitch09hi :                 6C - | *smpsPitch09lo :                 94 - |
*smpsPitch10hi :                 78 - | *smpsPitch10lo :                 88 - |
 songStart :                   1380 - |  vcAM1 :                          0 - |
 vcAM2 :                          0 - |  vcAM3 :                          0 - |
 vcAM4 :                          0 - |  vcAR1 :                         1F - |
 vcAR2 :                         1F - |  vcAR3 :                         12 - |
 vcAR4 :                         1F - |  vcAlgorithm :                    4 - |
 vcCF1 :                          4 - |  vcCF2 :                          4 - |
 vcCF3 :                          4 - |  vcCF4 :                          4 - |
 vcD1R1 :                         7 - |  vcD1R1Unk :                      0 - |
 vcD1R2 :                         0 - |  vcD1R2Unk :                      0 - |
 vcD1R3 :                         7 - |  vcD1R3Unk :                      0 - |
 vcD1R4 :                         0 - |  vcD1R4Unk :                      0 - |
 vcD2R1 :                         7 - |  vcD2R2 :                         0 - |
 vcD2R3 :                         7 - |  vcD2R4 :                         0 - |
 vcDL1 :                          3 - |  vcDL2 :                          0 - |
 vcDL3 :                          3 - |  vcDL4 :                          0 - |
 vcDT1 :                          3 - |  vcDT2 :                          3 - |
 vcDT3 :                          7 - |  vcDT4 :                          7 - |
 vcFeedback :                     5 - |  vcRR1 :                          8 - |
 vcRR2 :                          0 - |  vcRR3 :                          8 - |
 vcRR4 :                          0 - |  vcRS1 :                          0 - |
 vcRS2 :                          0 - |  vcRS3 :                          0 - |
 vcRS4 :                          0 - |  vcTL1 :                          0 - |
 vcTL2 :                         17 - |  vcTL3 :                          0 - |
 vcTL4 :                         16 - |  vcTLMask1 :                     80 - |
 vcTLMask2 :                      0 - |  vcTLMask3 :                     80 - |
 vcTLMask4 :                      0 - |  vcUnusedBits :                   0 - |

    298 symbols
    140 unused symbols

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 74 - 01/15/2025 07:33:10 PM


  Defined Macros:
  ---------------

CheckedChannelPointer                 | PSGPitchConvert                      
convertMainTempoMod                   | smpsAlterNote                        
smpsAlterPitch                        | smpsAlterVol                         
smpsCall                              | smpsChanTempoDiv                     
smpsChangeTransposition               | smpsClearPush                        
smpsDetune                            | smpsFMAlterVol                       
smpsFMFlutter                         | smpsFMvoice                          
smpsFade                              | smpsHeaderChan                       
smpsHeaderChanSFX                     | smpsHeaderDAC                        
smpsHeaderFM                          | smpsHeaderPSG                        
smpsHeaderSFXChannel                  | smpsHeaderStartSong                  
smpsHeaderTempo                       | smpsHeaderTempoSFX                   
smpsHeaderVoice                       | smpsHeaderVoiceNull                  
smpsHeaderVoiceUVB                    | smpsJump                             
smpsLoop                              | smpsMaxRelRate                       
smpsModOff                            | smpsModOn                            
smpsModSet                            | smpsNop                              
smpsNoteFill                          | smpsPSGAlterVol                      
smpsPSGAlterVolS2                     | smpsPSGform                          
smpsPSGvoice                          | smpsPan                              
smpsReturn                            | smpsSetTempoDiv                      
smpsSetTempoMod                       | smpsSetVol                           
smpsSetvoice                          | smpsStop                             
smpsStopSpecial                       | smpsVcAlgorithm                      
smpsVcAmpMod                          | smpsVcAttackRate                     
smpsVcCoarseFreq                      | smpsVcDecayLevel                     
smpsVcDecayRate1                      | smpsVcDecayRate2                     
smpsVcDetune                          | smpsVcFeedback                       
smpsVcRateScale                       | smpsVcReleaseRate                    
smpsVcTotalLevel                      | smpsVcUnusedBits                     
smpsWeirdD1LRR                        |

     61 macros

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 75 - 01/15/2025 07:33:10 PM


  Defined Functions:
  ------------------

s3TempotoS2                           | s3TempotoS1                          
s1TempotoS3                           | s1TempotoS2                          
s2TempotoS3                           | s2TempotoS1                          
conv0To256                            | z80_ptr                              

 AS V1.42 Beta [Bld 212] - Source File song.asm - Page 76 - 01/15/2025 07:33:10 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.04 seconds assembly time

   1583 lines source file
   3950 lines incl. macro expansions
      2 passes
        Additional necessary passes not started due to
        errors, listing possibly incorrect.
     45 errors
      0 warnings
